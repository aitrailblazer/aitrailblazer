@using Microsoft.AspNetCore.Components.Authorization
@inject TimeZoneService TimeZoneService
<StatefulReconnection />

<CascadingAuthenticationState>
    <Router AppAssembly="typeof(Program).Assembly">
        <Found Context="routeData">
            <AuthorizeRouteView RouteData="@routeData" DefaultLayout="typeof(Layout.MainLayout)">
                <NotAuthorized>
                    @if (!context.User.Identity.IsAuthenticated)
                    {
                        <RedirectToLogin />
                    }
                    else
                    {
                        <p>You are not authorized to access this resource.</p>
                    }
                </NotAuthorized>
                <Authorizing>
                    <p>Authorizing...</p>
                </Authorizing>
            </AuthorizeRouteView>
            <FocusOnNavigate RouteData="@routeData" Selector="h1" />
        </Found>
        <NotFound>
            <PageTitle>Not found</PageTitle>
            <LayoutView Layout="typeof(Layout.MainLayout)">
                <p role="alert">Sorry, there's nothing at this address.</p>
            </LayoutView>
        </NotFound>
    </Router>
</CascadingAuthenticationState>

@code {
    protected override async Task OnInitializedAsync()
    {
        try
        {
            var userTimeZone = await TimeZoneService.GetTimeZoneAsync();
            Console.WriteLine($"User's Time Zone: {userTimeZone}");
            // Additional logic based on user's time zone can be added here
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error retrieving time zone: {ex.Message}");
            // Handle the error gracefully, possibly defaulting to UTC
        }
    }
}