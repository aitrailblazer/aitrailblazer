// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace AITGraph.Sdk.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class Team : global::AITGraph.Sdk.Models.Entity, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>List of channels either hosted in or shared with the team (incoming channels).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::AITGraph.Sdk.Models.Channel>? AllChannels { get; set; }
#nullable restore
#else
        public List<global::AITGraph.Sdk.Models.Channel> AllChannels { get; set; }
#endif
        /// <summary>The collection of channels and messages associated with the team.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::AITGraph.Sdk.Models.Channel>? Channels { get; set; }
#nullable restore
#else
        public List<global::AITGraph.Sdk.Models.Channel> Channels { get; set; }
#endif
        /// <summary>An optional label. Typically describes the data or business sensitivity of the team. Must match one of a pre-configured set in the tenant&apos;s directory.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Classification { get; set; }
#nullable restore
#else
        public string Classification { get; set; }
#endif
        /// <summary>Timestamp at which the team was created.</summary>
        public DateTimeOffset? CreatedDateTime { get; set; }
        /// <summary>An optional description for the team. Maximum length: 1024 characters.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Description { get; set; }
#nullable restore
#else
        public string Description { get; set; }
#endif
        /// <summary>Settings to configure team discoverability by others.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::AITGraph.Sdk.Models.TeamDiscoverySettings? DiscoverySettings { get; set; }
#nullable restore
#else
        public global::AITGraph.Sdk.Models.TeamDiscoverySettings DiscoverySettings { get; set; }
#endif
        /// <summary>The name of the team.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? DisplayName { get; set; }
#nullable restore
#else
        public string DisplayName { get; set; }
#endif
        /// <summary>Settings to configure use of Giphy, memes, and stickers in the team.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::AITGraph.Sdk.Models.TeamFunSettings? FunSettings { get; set; }
#nullable restore
#else
        public global::AITGraph.Sdk.Models.TeamFunSettings FunSettings { get; set; }
#endif
        /// <summary>The group property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::AITGraph.Sdk.Models.Group? Group { get; set; }
#nullable restore
#else
        public global::AITGraph.Sdk.Models.Group Group { get; set; }
#endif
        /// <summary>Settings to configure whether guests can create, update, or delete channels in the team.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::AITGraph.Sdk.Models.TeamGuestSettings? GuestSettings { get; set; }
#nullable restore
#else
        public global::AITGraph.Sdk.Models.TeamGuestSettings GuestSettings { get; set; }
#endif
        /// <summary>List of channels shared with the team.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::AITGraph.Sdk.Models.Channel>? IncomingChannels { get; set; }
#nullable restore
#else
        public List<global::AITGraph.Sdk.Models.Channel> IncomingChannels { get; set; }
#endif
        /// <summary>The apps installed in this team.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::AITGraph.Sdk.Models.TeamsAppInstallation>? InstalledApps { get; set; }
#nullable restore
#else
        public List<global::AITGraph.Sdk.Models.TeamsAppInstallation> InstalledApps { get; set; }
#endif
        /// <summary>A unique ID for the team that has been used in a few places such as the audit log/Office 365 Management Activity API.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? InternalId { get; set; }
#nullable restore
#else
        public string InternalId { get; set; }
#endif
        /// <summary>Whether this team is in read-only mode.</summary>
        public bool? IsArchived { get; set; }
        /// <summary>If set to true, the team is currently in the owner-only team membership state and not accessible by other team members, such as students.</summary>
        public bool? IsMembershipLimitedToOwners { get; set; }
        /// <summary>Members and owners of the team.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::AITGraph.Sdk.Models.ConversationMember>? Members { get; set; }
#nullable restore
#else
        public List<global::AITGraph.Sdk.Models.ConversationMember> Members { get; set; }
#endif
        /// <summary>Settings to configure whether members can perform certain actions, for example, create channels and add bots, in the team.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::AITGraph.Sdk.Models.TeamMemberSettings? MemberSettings { get; set; }
#nullable restore
#else
        public global::AITGraph.Sdk.Models.TeamMemberSettings MemberSettings { get; set; }
#endif
        /// <summary>Settings to configure messaging and mentions in the team.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::AITGraph.Sdk.Models.TeamMessagingSettings? MessagingSettings { get; set; }
#nullable restore
#else
        public global::AITGraph.Sdk.Models.TeamMessagingSettings MessagingSettings { get; set; }
#endif
        /// <summary>The async operations that ran or are running on this team.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::AITGraph.Sdk.Models.TeamsAsyncOperation>? Operations { get; set; }
#nullable restore
#else
        public List<global::AITGraph.Sdk.Models.TeamsAsyncOperation> Operations { get; set; }
#endif
        /// <summary>The list of this team&apos;s owners. Currently, when creating a team using application permissions, exactly one owner must be specified. When using user delegated permissions, no owner can be specified (the current user is the owner). Owner must be specified as an object ID (GUID), not a UPN.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::AITGraph.Sdk.Models.User>? Owners { get; set; }
#nullable restore
#else
        public List<global::AITGraph.Sdk.Models.User> Owners { get; set; }
#endif
        /// <summary>A collection of permissions granted to apps to access the team.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::AITGraph.Sdk.Models.ResourceSpecificPermissionGrant>? PermissionGrants { get; set; }
#nullable restore
#else
        public List<global::AITGraph.Sdk.Models.ResourceSpecificPermissionGrant> PermissionGrants { get; set; }
#endif
        /// <summary>The team photo.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::AITGraph.Sdk.Models.ProfilePhoto? Photo { get; set; }
#nullable restore
#else
        public global::AITGraph.Sdk.Models.ProfilePhoto Photo { get; set; }
#endif
        /// <summary>The general channel for the team.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::AITGraph.Sdk.Models.Channel? PrimaryChannel { get; set; }
#nullable restore
#else
        public global::AITGraph.Sdk.Models.Channel PrimaryChannel { get; set; }
#endif
        /// <summary>The schedule of shifts for this team.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::AITGraph.Sdk.Models.Schedule? Schedule { get; set; }
#nullable restore
#else
        public global::AITGraph.Sdk.Models.Schedule Schedule { get; set; }
#endif
        /// <summary>Optional. Indicates whether the team is intended for a particular use case.  Each team specialization has access to unique behaviors and experiences targeted to its use case.</summary>
        public global::AITGraph.Sdk.Models.TeamSpecialization? Specialization { get; set; }
        /// <summary>Contains summary information about the team, including number of owners, members, and guests.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::AITGraph.Sdk.Models.TeamSummary? Summary { get; set; }
#nullable restore
#else
        public global::AITGraph.Sdk.Models.TeamSummary Summary { get; set; }
#endif
        /// <summary>The tags associated with the team.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::AITGraph.Sdk.Models.TeamworkTag>? Tags { get; set; }
#nullable restore
#else
        public List<global::AITGraph.Sdk.Models.TeamworkTag> Tags { get; set; }
#endif
        /// <summary>The template this team was created from. See available templates.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::AITGraph.Sdk.Models.TeamsTemplate? Template { get; set; }
#nullable restore
#else
        public global::AITGraph.Sdk.Models.TeamsTemplate Template { get; set; }
#endif
        /// <summary>The templateDefinition property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::AITGraph.Sdk.Models.TeamTemplateDefinition? TemplateDefinition { get; set; }
#nullable restore
#else
        public global::AITGraph.Sdk.Models.TeamTemplateDefinition TemplateDefinition { get; set; }
#endif
        /// <summary>The ID of the Azure Active Directory tenant.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? TenantId { get; set; }
#nullable restore
#else
        public string TenantId { get; set; }
#endif
        /// <summary>The visibility of the group and team. Defaults to Public.</summary>
        public global::AITGraph.Sdk.Models.TeamVisibilityType? Visibility { get; set; }
        /// <summary>A hyperlink that will go to the team in the Microsoft Teams client. This is the URL that you get when you right-click a team in the Microsoft Teams client and select Get link to team. This URL should be treated as an opaque blob, and not parsed.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? WebUrl { get; set; }
#nullable restore
#else
        public string WebUrl { get; set; }
#endif
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::AITGraph.Sdk.Models.Team"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static new global::AITGraph.Sdk.Models.Team CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::AITGraph.Sdk.Models.Team();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public override IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>(base.GetFieldDeserializers())
            {
                { "allChannels", n => { AllChannels = n.GetCollectionOfObjectValues<global::AITGraph.Sdk.Models.Channel>(global::AITGraph.Sdk.Models.Channel.CreateFromDiscriminatorValue)?.AsList(); } },
                { "channels", n => { Channels = n.GetCollectionOfObjectValues<global::AITGraph.Sdk.Models.Channel>(global::AITGraph.Sdk.Models.Channel.CreateFromDiscriminatorValue)?.AsList(); } },
                { "classification", n => { Classification = n.GetStringValue(); } },
                { "createdDateTime", n => { CreatedDateTime = n.GetDateTimeOffsetValue(); } },
                { "description", n => { Description = n.GetStringValue(); } },
                { "discoverySettings", n => { DiscoverySettings = n.GetObjectValue<global::AITGraph.Sdk.Models.TeamDiscoverySettings>(global::AITGraph.Sdk.Models.TeamDiscoverySettings.CreateFromDiscriminatorValue); } },
                { "displayName", n => { DisplayName = n.GetStringValue(); } },
                { "funSettings", n => { FunSettings = n.GetObjectValue<global::AITGraph.Sdk.Models.TeamFunSettings>(global::AITGraph.Sdk.Models.TeamFunSettings.CreateFromDiscriminatorValue); } },
                { "group", n => { Group = n.GetObjectValue<global::AITGraph.Sdk.Models.Group>(global::AITGraph.Sdk.Models.Group.CreateFromDiscriminatorValue); } },
                { "guestSettings", n => { GuestSettings = n.GetObjectValue<global::AITGraph.Sdk.Models.TeamGuestSettings>(global::AITGraph.Sdk.Models.TeamGuestSettings.CreateFromDiscriminatorValue); } },
                { "incomingChannels", n => { IncomingChannels = n.GetCollectionOfObjectValues<global::AITGraph.Sdk.Models.Channel>(global::AITGraph.Sdk.Models.Channel.CreateFromDiscriminatorValue)?.AsList(); } },
                { "installedApps", n => { InstalledApps = n.GetCollectionOfObjectValues<global::AITGraph.Sdk.Models.TeamsAppInstallation>(global::AITGraph.Sdk.Models.TeamsAppInstallation.CreateFromDiscriminatorValue)?.AsList(); } },
                { "internalId", n => { InternalId = n.GetStringValue(); } },
                { "isArchived", n => { IsArchived = n.GetBoolValue(); } },
                { "isMembershipLimitedToOwners", n => { IsMembershipLimitedToOwners = n.GetBoolValue(); } },
                { "memberSettings", n => { MemberSettings = n.GetObjectValue<global::AITGraph.Sdk.Models.TeamMemberSettings>(global::AITGraph.Sdk.Models.TeamMemberSettings.CreateFromDiscriminatorValue); } },
                { "members", n => { Members = n.GetCollectionOfObjectValues<global::AITGraph.Sdk.Models.ConversationMember>(global::AITGraph.Sdk.Models.ConversationMember.CreateFromDiscriminatorValue)?.AsList(); } },
                { "messagingSettings", n => { MessagingSettings = n.GetObjectValue<global::AITGraph.Sdk.Models.TeamMessagingSettings>(global::AITGraph.Sdk.Models.TeamMessagingSettings.CreateFromDiscriminatorValue); } },
                { "operations", n => { Operations = n.GetCollectionOfObjectValues<global::AITGraph.Sdk.Models.TeamsAsyncOperation>(global::AITGraph.Sdk.Models.TeamsAsyncOperation.CreateFromDiscriminatorValue)?.AsList(); } },
                { "owners", n => { Owners = n.GetCollectionOfObjectValues<global::AITGraph.Sdk.Models.User>(global::AITGraph.Sdk.Models.User.CreateFromDiscriminatorValue)?.AsList(); } },
                { "permissionGrants", n => { PermissionGrants = n.GetCollectionOfObjectValues<global::AITGraph.Sdk.Models.ResourceSpecificPermissionGrant>(global::AITGraph.Sdk.Models.ResourceSpecificPermissionGrant.CreateFromDiscriminatorValue)?.AsList(); } },
                { "photo", n => { Photo = n.GetObjectValue<global::AITGraph.Sdk.Models.ProfilePhoto>(global::AITGraph.Sdk.Models.ProfilePhoto.CreateFromDiscriminatorValue); } },
                { "primaryChannel", n => { PrimaryChannel = n.GetObjectValue<global::AITGraph.Sdk.Models.Channel>(global::AITGraph.Sdk.Models.Channel.CreateFromDiscriminatorValue); } },
                { "schedule", n => { Schedule = n.GetObjectValue<global::AITGraph.Sdk.Models.Schedule>(global::AITGraph.Sdk.Models.Schedule.CreateFromDiscriminatorValue); } },
                { "specialization", n => { Specialization = n.GetEnumValue<global::AITGraph.Sdk.Models.TeamSpecialization>(); } },
                { "summary", n => { Summary = n.GetObjectValue<global::AITGraph.Sdk.Models.TeamSummary>(global::AITGraph.Sdk.Models.TeamSummary.CreateFromDiscriminatorValue); } },
                { "tags", n => { Tags = n.GetCollectionOfObjectValues<global::AITGraph.Sdk.Models.TeamworkTag>(global::AITGraph.Sdk.Models.TeamworkTag.CreateFromDiscriminatorValue)?.AsList(); } },
                { "template", n => { Template = n.GetObjectValue<global::AITGraph.Sdk.Models.TeamsTemplate>(global::AITGraph.Sdk.Models.TeamsTemplate.CreateFromDiscriminatorValue); } },
                { "templateDefinition", n => { TemplateDefinition = n.GetObjectValue<global::AITGraph.Sdk.Models.TeamTemplateDefinition>(global::AITGraph.Sdk.Models.TeamTemplateDefinition.CreateFromDiscriminatorValue); } },
                { "tenantId", n => { TenantId = n.GetStringValue(); } },
                { "visibility", n => { Visibility = n.GetEnumValue<global::AITGraph.Sdk.Models.TeamVisibilityType>(); } },
                { "webUrl", n => { WebUrl = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public override void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            base.Serialize(writer);
            writer.WriteCollectionOfObjectValues<global::AITGraph.Sdk.Models.Channel>("allChannels", AllChannels);
            writer.WriteCollectionOfObjectValues<global::AITGraph.Sdk.Models.Channel>("channels", Channels);
            writer.WriteStringValue("classification", Classification);
            writer.WriteDateTimeOffsetValue("createdDateTime", CreatedDateTime);
            writer.WriteStringValue("description", Description);
            writer.WriteObjectValue<global::AITGraph.Sdk.Models.TeamDiscoverySettings>("discoverySettings", DiscoverySettings);
            writer.WriteStringValue("displayName", DisplayName);
            writer.WriteObjectValue<global::AITGraph.Sdk.Models.TeamFunSettings>("funSettings", FunSettings);
            writer.WriteObjectValue<global::AITGraph.Sdk.Models.Group>("group", Group);
            writer.WriteObjectValue<global::AITGraph.Sdk.Models.TeamGuestSettings>("guestSettings", GuestSettings);
            writer.WriteCollectionOfObjectValues<global::AITGraph.Sdk.Models.Channel>("incomingChannels", IncomingChannels);
            writer.WriteCollectionOfObjectValues<global::AITGraph.Sdk.Models.TeamsAppInstallation>("installedApps", InstalledApps);
            writer.WriteStringValue("internalId", InternalId);
            writer.WriteBoolValue("isArchived", IsArchived);
            writer.WriteBoolValue("isMembershipLimitedToOwners", IsMembershipLimitedToOwners);
            writer.WriteCollectionOfObjectValues<global::AITGraph.Sdk.Models.ConversationMember>("members", Members);
            writer.WriteObjectValue<global::AITGraph.Sdk.Models.TeamMemberSettings>("memberSettings", MemberSettings);
            writer.WriteObjectValue<global::AITGraph.Sdk.Models.TeamMessagingSettings>("messagingSettings", MessagingSettings);
            writer.WriteCollectionOfObjectValues<global::AITGraph.Sdk.Models.TeamsAsyncOperation>("operations", Operations);
            writer.WriteCollectionOfObjectValues<global::AITGraph.Sdk.Models.User>("owners", Owners);
            writer.WriteCollectionOfObjectValues<global::AITGraph.Sdk.Models.ResourceSpecificPermissionGrant>("permissionGrants", PermissionGrants);
            writer.WriteObjectValue<global::AITGraph.Sdk.Models.ProfilePhoto>("photo", Photo);
            writer.WriteObjectValue<global::AITGraph.Sdk.Models.Channel>("primaryChannel", PrimaryChannel);
            writer.WriteObjectValue<global::AITGraph.Sdk.Models.Schedule>("schedule", Schedule);
            writer.WriteEnumValue<global::AITGraph.Sdk.Models.TeamSpecialization>("specialization", Specialization);
            writer.WriteObjectValue<global::AITGraph.Sdk.Models.TeamSummary>("summary", Summary);
            writer.WriteCollectionOfObjectValues<global::AITGraph.Sdk.Models.TeamworkTag>("tags", Tags);
            writer.WriteObjectValue<global::AITGraph.Sdk.Models.TeamsTemplate>("template", Template);
            writer.WriteObjectValue<global::AITGraph.Sdk.Models.TeamTemplateDefinition>("templateDefinition", TemplateDefinition);
            writer.WriteStringValue("tenantId", TenantId);
            writer.WriteEnumValue<global::AITGraph.Sdk.Models.TeamVisibilityType>("visibility", Visibility);
            writer.WriteStringValue("webUrl", WebUrl);
        }
    }
}
#pragma warning restore CS0618
