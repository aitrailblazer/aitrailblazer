@page "/organizer"
@rendermode InteractiveServer
@attribute [Authorize]
@using Microsoft.AspNetCore.Authorization
@using Microsoft.Identity.Web
@using AITrailblazer.net.Services

@inject AITGraphService GraphService

@inject NavigationManager NavigationManager

@inject SKHandler skHandler

<PageTitle>Organizer</PageTitle>
@if (isLoading)
{
    <FluentLabel Typo="Typography.Body">Please wait...</FluentLabel>
    <FluentProgress Class="progress-top" style="color: var(--themePrimary);"></FluentProgress>
}

<h1>Organizer</h1>
<div class="alert alert-info">@response</div>

<p role="status">Current count: @currentCount</p>

<button class="btn btn-primary" @onclick="IncrementCount">Click me</button>

@code {

private int currentCount = 0;

private void IncrementCount()
{
    currentCount++;
}

}

@code {
private string response;

    private bool isLoading = true;

    private bool isInitialized = false;

    protected override async Task OnInitializedAsync()
    {
        if (!isInitialized)
        {
            response = await skHandler.SKTestAsync("programming");

            await LoadUserDataAsync();
            isInitialized = true;
        }
    }

    private async Task LoadUserDataAsync()
    {
        isLoading = true;
        try
        {
        
        }
        catch (AuthenticationRequiredException)
        {
            RedirectToLogin();
        }
        catch (Exception ex)
        {
            error = $"Error loading user data: {ex.Message}";
        }
        finally
        {
            isLoading = false; // Hide loading state
        }

    }

    private void RedirectToLogin()
    {
        var returnUrl = Uri.EscapeDataString(NavigationManager.Uri);
        NavigationManager.NavigateTo($"/MicrosoftIdentity/Account/SignIn?returnUrl={returnUrl}", forceLoad: true);
    }
    }