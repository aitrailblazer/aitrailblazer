// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace AITGraph.Sdk.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class CloudPC : global::AITGraph.Sdk.Models.Entity, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>The Azure Active Directory (Azure AD) device ID of the Cloud PC.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? AadDeviceId { get; set; }
#nullable restore
#else
        public string AadDeviceId { get; set; }
#endif
        /// <summary>The connectivity health check result of a Cloud PC, including the updated timestamp and whether the Cloud PC is able to be connected or not.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::AITGraph.Sdk.Models.CloudPcConnectivityResult? ConnectivityResult { get; set; }
#nullable restore
#else
        public global::AITGraph.Sdk.Models.CloudPcConnectivityResult ConnectivityResult { get; set; }
#endif
        /// <summary>The disk encryption applied to the Cloud PC. Possible values: notAvailable, notEncrypted, encryptedUsingPlatformManagedKey, encryptedUsingCustomerManagedKey, and unknownFutureValue.</summary>
        public global::AITGraph.Sdk.Models.CloudPcDiskEncryptionState? DiskEncryptionState { get; set; }
        /// <summary>The display name of the Cloud PC.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? DisplayName { get; set; }
#nullable restore
#else
        public string DisplayName { get; set; }
#endif
        /// <summary>The date and time when the grace period ends and reprovisioning/deprovisioning happens. Required only if the status is inGracePeriod. The timestamp is shown in ISO 8601 format and Coordinated Universal Time (UTC). For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.</summary>
        public DateTimeOffset? GracePeriodEndDateTime { get; set; }
        /// <summary>Name of the OS image that&apos;s on the Cloud PC.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ImageDisplayName { get; set; }
#nullable restore
#else
        public string ImageDisplayName { get; set; }
#endif
        /// <summary>The last login result of the Cloud PC. For example, { &apos;time&apos;: &apos;2014-01-01T00:00:00Z&apos;}.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::AITGraph.Sdk.Models.CloudPcLoginResult? LastLoginResult { get; set; }
#nullable restore
#else
        public global::AITGraph.Sdk.Models.CloudPcLoginResult LastLoginResult { get; set; }
#endif
        /// <summary>The last modified date and time of the Cloud PC. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.</summary>
        public DateTimeOffset? LastModifiedDateTime { get; set; }
        /// <summary>The last remote action result of the enterprise Cloud PCs. The supported remote actions are: Reboot, Rename, Reprovision, Restore, and Troubleshoot.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::AITGraph.Sdk.Models.CloudPcRemoteActionResult? LastRemoteActionResult { get; set; }
#nullable restore
#else
        public global::AITGraph.Sdk.Models.CloudPcRemoteActionResult LastRemoteActionResult { get; set; }
#endif
        /// <summary>The Intune device ID of the Cloud PC.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ManagedDeviceId { get; set; }
#nullable restore
#else
        public string ManagedDeviceId { get; set; }
#endif
        /// <summary>The Intune device name of the Cloud PC.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ManagedDeviceName { get; set; }
#nullable restore
#else
        public string ManagedDeviceName { get; set; }
#endif
        /// <summary>The Azure network connection that is applied during the provisioning of Cloud PCs.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? OnPremisesConnectionName { get; set; }
#nullable restore
#else
        public string OnPremisesConnectionName { get; set; }
#endif
        /// <summary>The version of the operating system (OS) to provision on Cloud PCs. Possible values are: windows10, windows11, and unknownFutureValue.</summary>
        public global::AITGraph.Sdk.Models.CloudPcOperatingSystem? OsVersion { get; set; }
        /// <summary>The results of every partner agent&apos;s installation status on Cloud PC.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::AITGraph.Sdk.Models.CloudPcPartnerAgentInstallResult>? PartnerAgentInstallResults { get; set; }
#nullable restore
#else
        public List<global::AITGraph.Sdk.Models.CloudPcPartnerAgentInstallResult> PartnerAgentInstallResults { get; set; }
#endif
        /// <summary>The provisioning policy ID of the Cloud PC.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ProvisioningPolicyId { get; set; }
#nullable restore
#else
        public string ProvisioningPolicyId { get; set; }
#endif
        /// <summary>The provisioning policy that is applied during the provisioning of Cloud PCs.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ProvisioningPolicyName { get; set; }
#nullable restore
#else
        public string ProvisioningPolicyName { get; set; }
#endif
        /// <summary>The provisioningType property</summary>
        public global::AITGraph.Sdk.Models.CloudPcProvisioningType? ProvisioningType { get; set; }
        /// <summary>The service plan ID of the Cloud PC.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ServicePlanId { get; set; }
#nullable restore
#else
        public string ServicePlanId { get; set; }
#endif
        /// <summary>The service plan name of the Cloud PC.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ServicePlanName { get; set; }
#nullable restore
#else
        public string ServicePlanName { get; set; }
#endif
        /// <summary>The service plan type of the Cloud PC.</summary>
        public global::AITGraph.Sdk.Models.CloudPcServicePlanType? ServicePlanType { get; set; }
        /// <summary>The status property</summary>
        public global::AITGraph.Sdk.Models.CloudPcStatus? Status { get; set; }
        /// <summary>The details of the Cloud PC status.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::AITGraph.Sdk.Models.CloudPcStatusDetails? StatusDetails { get; set; }
#nullable restore
#else
        public global::AITGraph.Sdk.Models.CloudPcStatusDetails StatusDetails { get; set; }
#endif
        /// <summary>The account type of the user on provisioned Cloud PCs. Possible values are: standardUser, administrator, and unknownFutureValue.</summary>
        public global::AITGraph.Sdk.Models.CloudPcUserAccountType? UserAccountType { get; set; }
        /// <summary>The user principal name (UPN) of the user assigned to the Cloud PC.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? UserPrincipalName { get; set; }
#nullable restore
#else
        public string UserPrincipalName { get; set; }
#endif
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::AITGraph.Sdk.Models.CloudPC"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static new global::AITGraph.Sdk.Models.CloudPC CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::AITGraph.Sdk.Models.CloudPC();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public override IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>(base.GetFieldDeserializers())
            {
                { "aadDeviceId", n => { AadDeviceId = n.GetStringValue(); } },
                { "connectivityResult", n => { ConnectivityResult = n.GetObjectValue<global::AITGraph.Sdk.Models.CloudPcConnectivityResult>(global::AITGraph.Sdk.Models.CloudPcConnectivityResult.CreateFromDiscriminatorValue); } },
                { "diskEncryptionState", n => { DiskEncryptionState = n.GetEnumValue<global::AITGraph.Sdk.Models.CloudPcDiskEncryptionState>(); } },
                { "displayName", n => { DisplayName = n.GetStringValue(); } },
                { "gracePeriodEndDateTime", n => { GracePeriodEndDateTime = n.GetDateTimeOffsetValue(); } },
                { "imageDisplayName", n => { ImageDisplayName = n.GetStringValue(); } },
                { "lastLoginResult", n => { LastLoginResult = n.GetObjectValue<global::AITGraph.Sdk.Models.CloudPcLoginResult>(global::AITGraph.Sdk.Models.CloudPcLoginResult.CreateFromDiscriminatorValue); } },
                { "lastModifiedDateTime", n => { LastModifiedDateTime = n.GetDateTimeOffsetValue(); } },
                { "lastRemoteActionResult", n => { LastRemoteActionResult = n.GetObjectValue<global::AITGraph.Sdk.Models.CloudPcRemoteActionResult>(global::AITGraph.Sdk.Models.CloudPcRemoteActionResult.CreateFromDiscriminatorValue); } },
                { "managedDeviceId", n => { ManagedDeviceId = n.GetStringValue(); } },
                { "managedDeviceName", n => { ManagedDeviceName = n.GetStringValue(); } },
                { "onPremisesConnectionName", n => { OnPremisesConnectionName = n.GetStringValue(); } },
                { "osVersion", n => { OsVersion = n.GetEnumValue<global::AITGraph.Sdk.Models.CloudPcOperatingSystem>(); } },
                { "partnerAgentInstallResults", n => { PartnerAgentInstallResults = n.GetCollectionOfObjectValues<global::AITGraph.Sdk.Models.CloudPcPartnerAgentInstallResult>(global::AITGraph.Sdk.Models.CloudPcPartnerAgentInstallResult.CreateFromDiscriminatorValue)?.AsList(); } },
                { "provisioningPolicyId", n => { ProvisioningPolicyId = n.GetStringValue(); } },
                { "provisioningPolicyName", n => { ProvisioningPolicyName = n.GetStringValue(); } },
                { "provisioningType", n => { ProvisioningType = n.GetEnumValue<global::AITGraph.Sdk.Models.CloudPcProvisioningType>(); } },
                { "servicePlanId", n => { ServicePlanId = n.GetStringValue(); } },
                { "servicePlanName", n => { ServicePlanName = n.GetStringValue(); } },
                { "servicePlanType", n => { ServicePlanType = n.GetEnumValue<global::AITGraph.Sdk.Models.CloudPcServicePlanType>(); } },
                { "status", n => { Status = n.GetEnumValue<global::AITGraph.Sdk.Models.CloudPcStatus>(); } },
                { "statusDetails", n => { StatusDetails = n.GetObjectValue<global::AITGraph.Sdk.Models.CloudPcStatusDetails>(global::AITGraph.Sdk.Models.CloudPcStatusDetails.CreateFromDiscriminatorValue); } },
                { "userAccountType", n => { UserAccountType = n.GetEnumValue<global::AITGraph.Sdk.Models.CloudPcUserAccountType>(); } },
                { "userPrincipalName", n => { UserPrincipalName = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public override void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            base.Serialize(writer);
            writer.WriteStringValue("aadDeviceId", AadDeviceId);
            writer.WriteObjectValue<global::AITGraph.Sdk.Models.CloudPcConnectivityResult>("connectivityResult", ConnectivityResult);
            writer.WriteEnumValue<global::AITGraph.Sdk.Models.CloudPcDiskEncryptionState>("diskEncryptionState", DiskEncryptionState);
            writer.WriteStringValue("displayName", DisplayName);
            writer.WriteDateTimeOffsetValue("gracePeriodEndDateTime", GracePeriodEndDateTime);
            writer.WriteStringValue("imageDisplayName", ImageDisplayName);
            writer.WriteObjectValue<global::AITGraph.Sdk.Models.CloudPcLoginResult>("lastLoginResult", LastLoginResult);
            writer.WriteDateTimeOffsetValue("lastModifiedDateTime", LastModifiedDateTime);
            writer.WriteObjectValue<global::AITGraph.Sdk.Models.CloudPcRemoteActionResult>("lastRemoteActionResult", LastRemoteActionResult);
            writer.WriteStringValue("managedDeviceId", ManagedDeviceId);
            writer.WriteStringValue("managedDeviceName", ManagedDeviceName);
            writer.WriteStringValue("onPremisesConnectionName", OnPremisesConnectionName);
            writer.WriteEnumValue<global::AITGraph.Sdk.Models.CloudPcOperatingSystem>("osVersion", OsVersion);
            writer.WriteCollectionOfObjectValues<global::AITGraph.Sdk.Models.CloudPcPartnerAgentInstallResult>("partnerAgentInstallResults", PartnerAgentInstallResults);
            writer.WriteStringValue("provisioningPolicyId", ProvisioningPolicyId);
            writer.WriteStringValue("provisioningPolicyName", ProvisioningPolicyName);
            writer.WriteEnumValue<global::AITGraph.Sdk.Models.CloudPcProvisioningType>("provisioningType", ProvisioningType);
            writer.WriteStringValue("servicePlanId", ServicePlanId);
            writer.WriteStringValue("servicePlanName", ServicePlanName);
            writer.WriteEnumValue<global::AITGraph.Sdk.Models.CloudPcServicePlanType>("servicePlanType", ServicePlanType);
            writer.WriteEnumValue<global::AITGraph.Sdk.Models.CloudPcStatus>("status", Status);
            writer.WriteObjectValue<global::AITGraph.Sdk.Models.CloudPcStatusDetails>("statusDetails", StatusDetails);
            writer.WriteEnumValue<global::AITGraph.Sdk.Models.CloudPcUserAccountType>("userAccountType", UserAccountType);
            writer.WriteStringValue("userPrincipalName", UserPrincipalName);
        }
    }
}
#pragma warning restore CS0618
