// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace AITGraph.Sdk.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class PolicyBase : global::AITGraph.Sdk.Models.DirectoryObject, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Description for this policy. Required.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Description { get; set; }
#nullable restore
#else
        public string Description { get; set; }
#endif
        /// <summary>Display name for this policy. Required.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? DisplayName { get; set; }
#nullable restore
#else
        public string DisplayName { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::AITGraph.Sdk.Models.PolicyBase"/> and sets the default values.
        /// </summary>
        public PolicyBase() : base()
        {
            OdataType = "#microsoft.graph.policyBase";
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::AITGraph.Sdk.Models.PolicyBase"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static new global::AITGraph.Sdk.Models.PolicyBase CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            var mappingValue = parseNode.GetChildNode("@odata.type")?.GetStringValue();
            return mappingValue switch
            {
                "#microsoft.graph.activityBasedTimeoutPolicy" => new global::AITGraph.Sdk.Models.ActivityBasedTimeoutPolicy(),
                "#microsoft.graph.appManagementPolicy" => new global::AITGraph.Sdk.Models.AppManagementPolicy(),
                "#microsoft.graph.authorizationPolicy" => new global::AITGraph.Sdk.Models.AuthorizationPolicy(),
                "#microsoft.graph.claimsMappingPolicy" => new global::AITGraph.Sdk.Models.ClaimsMappingPolicy(),
                "#microsoft.graph.crossTenantAccessPolicy" => new global::AITGraph.Sdk.Models.CrossTenantAccessPolicy(),
                "#microsoft.graph.externalIdentitiesPolicy" => new global::AITGraph.Sdk.Models.ExternalIdentitiesPolicy(),
                "#microsoft.graph.homeRealmDiscoveryPolicy" => new global::AITGraph.Sdk.Models.HomeRealmDiscoveryPolicy(),
                "#microsoft.graph.identitySecurityDefaultsEnforcementPolicy" => new global::AITGraph.Sdk.Models.IdentitySecurityDefaultsEnforcementPolicy(),
                "#microsoft.graph.permissionGrantPolicy" => new global::AITGraph.Sdk.Models.PermissionGrantPolicy(),
                "#microsoft.graph.servicePrincipalCreationPolicy" => new global::AITGraph.Sdk.Models.ServicePrincipalCreationPolicy(),
                "#microsoft.graph.stsPolicy" => new global::AITGraph.Sdk.Models.StsPolicy(),
                "#microsoft.graph.tenantAppManagementPolicy" => new global::AITGraph.Sdk.Models.TenantAppManagementPolicy(),
                "#microsoft.graph.tenantRelationshipAccessPolicyBase" => new global::AITGraph.Sdk.Models.TenantRelationshipAccessPolicyBase(),
                "#microsoft.graph.tokenIssuancePolicy" => new global::AITGraph.Sdk.Models.TokenIssuancePolicy(),
                "#microsoft.graph.tokenLifetimePolicy" => new global::AITGraph.Sdk.Models.TokenLifetimePolicy(),
                _ => new global::AITGraph.Sdk.Models.PolicyBase(),
            };
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public override IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>(base.GetFieldDeserializers())
            {
                { "description", n => { Description = n.GetStringValue(); } },
                { "displayName", n => { DisplayName = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public override void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            base.Serialize(writer);
            writer.WriteStringValue("description", Description);
            writer.WriteStringValue("displayName", DisplayName);
        }
    }
}
#pragma warning restore CS0618
