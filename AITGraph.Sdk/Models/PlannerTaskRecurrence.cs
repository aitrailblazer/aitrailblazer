// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace AITGraph.Sdk.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class PlannerTaskRecurrence : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The nextInSeriesTaskId property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? NextInSeriesTaskId { get; set; }
#nullable restore
#else
        public string NextInSeriesTaskId { get; set; }
#endif
        /// <summary>The occurrenceId property</summary>
        public int? OccurrenceId { get; set; }
        /// <summary>The OdataType property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? OdataType { get; set; }
#nullable restore
#else
        public string OdataType { get; set; }
#endif
        /// <summary>The previousInSeriesTaskId property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? PreviousInSeriesTaskId { get; set; }
#nullable restore
#else
        public string PreviousInSeriesTaskId { get; set; }
#endif
        /// <summary>The recurrenceStartDateTime property</summary>
        public DateTimeOffset? RecurrenceStartDateTime { get; set; }
        /// <summary>The schedule property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::AITGraph.Sdk.Models.PlannerRecurrenceSchedule? Schedule { get; set; }
#nullable restore
#else
        public global::AITGraph.Sdk.Models.PlannerRecurrenceSchedule Schedule { get; set; }
#endif
        /// <summary>The seriesId property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? SeriesId { get; set; }
#nullable restore
#else
        public string SeriesId { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::AITGraph.Sdk.Models.PlannerTaskRecurrence"/> and sets the default values.
        /// </summary>
        public PlannerTaskRecurrence()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::AITGraph.Sdk.Models.PlannerTaskRecurrence"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::AITGraph.Sdk.Models.PlannerTaskRecurrence CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::AITGraph.Sdk.Models.PlannerTaskRecurrence();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "nextInSeriesTaskId", n => { NextInSeriesTaskId = n.GetStringValue(); } },
                { "occurrenceId", n => { OccurrenceId = n.GetIntValue(); } },
                { "@odata.type", n => { OdataType = n.GetStringValue(); } },
                { "previousInSeriesTaskId", n => { PreviousInSeriesTaskId = n.GetStringValue(); } },
                { "recurrenceStartDateTime", n => { RecurrenceStartDateTime = n.GetDateTimeOffsetValue(); } },
                { "schedule", n => { Schedule = n.GetObjectValue<global::AITGraph.Sdk.Models.PlannerRecurrenceSchedule>(global::AITGraph.Sdk.Models.PlannerRecurrenceSchedule.CreateFromDiscriminatorValue); } },
                { "seriesId", n => { SeriesId = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("nextInSeriesTaskId", NextInSeriesTaskId);
            writer.WriteIntValue("occurrenceId", OccurrenceId);
            writer.WriteStringValue("@odata.type", OdataType);
            writer.WriteStringValue("previousInSeriesTaskId", PreviousInSeriesTaskId);
            writer.WriteDateTimeOffsetValue("recurrenceStartDateTime", RecurrenceStartDateTime);
            writer.WriteObjectValue<global::AITGraph.Sdk.Models.PlannerRecurrenceSchedule>("schedule", Schedule);
            writer.WriteStringValue("seriesId", SeriesId);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
