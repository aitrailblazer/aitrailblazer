@page "/organizer"
@rendermode InteractiveServer

@attribute [Authorize]
@using System
@using System.Linq
@using SmartComponents
@using Markdig
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Authorization
@using Microsoft.Identity.Web
@using AITGraph.Sdk.Models

@using AITrailblazer.net.Services
@using AITrailblazer.net.Models
@using NewsResponse = AITrailblazer.net.Models.NewsResponse
@using Newtonsoft.Json <!-- Added for Newtonsoft.Json -->
@using OurNewsArticle = AITrailblazer.net.Models.NewsArticle
@using System.Globalization
@using GraphMessage = AITGraph.Sdk.Models.Message

@using Microsoft.AspNetCore.Components.Web

@using Cosmos.Copilot.Services

@inject ChatService chatService


@inject AITGraphService graphService

@inject NavigationManager NavigationManager
@inject AzureOpenAIHandler azureOpenAIHandler
@inject IJSRuntime JS
@inject TimeFunctions _timeFunctions
@inject UserIDsService UserIDsService
@inject IHttpContextAccessor HttpContextAccessor
@inject CosmosDbService cosmosDbService



@if (isLoading)
{
    <p><em>Loading...</em></p>
}
else if (error != null)
{
    <div class="alert alert-danger" role="alert">
        @error
    </div>
}
else if (profile != null)
{
    <FluentCard MinimalStyle="true" Width="1280px" Height="840px" Style="border: 2px solid var(--accent-fill-rest); padding: 20px;" Class="fluent-card-user-details-size">
        <div style="display: flex; align-items: center;">
            @if (userPhotoBase64 != null)
            {
                <img src="data:image/jpeg;base64,@userPhotoBase64" alt="User Photo"
                     style="width: 100px; height: 100px; object-fit: cover; border-radius: 50%; margin-right: 20px;" />
            }
            else
            {
                <div style="width: 100px; height: 100px; background-color: #ccc; border-radius: 50%; display: flex; align-items: center; justify-content: center; margin-right: 20px;">
                    <span style="font-size: 50px; color: white;">ðŸ‘¤</span>
                </div>
            }
<!-- User.razor -->
<div class="user-profile-container">
    <FluentCard MinimalStyle="false" Class="user-profile-card" Height="180px" Width="100%" MaxWidth="720px">
        <div class="card-content">

            <FluentLabel Typo="Typography.H2" Class="user-name">
                Welcome, @GetUserFullName()
            </FluentLabel>
            <FluentLabel Typo="Typography.Body" Class="welcome-message">
                        We are glad to have you here.

            </FluentLabel>
            <FluentDivider Class="card-divider"></FluentDivider>
            <div class="content-section">
                <FluentStack Orientation="Orientation.Vertical" HorizontalAlignment="@Horizontal" VerticalAlignment="@Vertical" VerticalGap="1">
                    <!--
                    <FluentTextBlock Typo="Typography.BodyStrong">
                        ID: <span class="value-text">@currentUserTenantID / @currentUserIdentityID</span>
                    </FluentTextBlock>
                    --> 
                    <FluentTextBlock Typo="Typography.BodyStrong">
                        Email: <span class="value-text">@GetUserEmail()</span>
                    </FluentTextBlock>
                <FluentStack Orientation="Orientation.Horizontal" HorizontalAlignment="@Horizontal" VerticalAlignment="@Vertical" VerticalGap="1">
                    <FluentTextBlock Typo="Typography.BodyStrong">
                        Time Zone: <span class="value-text">@userTimeZone</span>
                    </FluentTextBlock>
                    <FluentTextBlock Typo="Typography.BodyStrong">
                        Local Time: <span class="value-text">@userLocalTime</span>
                    </FluentTextBlock>
                    <FluentTextBlock Typo="Typography.BodyStrong">
                        Language: <span class="value-text">@GetUserLanguage()</span>
                    </FluentTextBlock>                
                </FluentStack>
                <!--
                    <FluentTextBlock Typo="Typography.BodyStrong">
                        Phone: <span class="value-text">@GetUserPhoneNumber()</span>
                    </FluentTextBlock>
                    <FluentTextBlock Typo="Typography.BodyStrong">
                        Address: <span class="value-text">@GetUserAddress()</span>
                    </FluentTextBlock>
                -->
                </FluentStack>
            </div>
        </div>
    </FluentCard>
</div>

        </div>

        <!-- Input Section for Azure OpenAI Query -->
        <div style="margin-top: 20px; display: flex; align-items: center; max-width: 820px;">
            <FluentStack Orientation="Orientation.Vertical" HorizontalAlignment="@Horizontal" VerticalAlignment="@Vertical" VerticalGap="1">
                @if (Submitting)
                {
                    <FluentLabel Typo="Typography.Body">Please wait...</FluentLabel>
                    <FluentProgress Class="progress-top" style="color: var(--themePrimary);"></FluentProgress>
                }                  
                <FluentStack Orientation="Orientation.Horizontal" HorizontalAlignment="@Horizontal" VerticalAlignment="@Vertical" VerticalGap="1">
                
                    
                <FluentTextArea 
                    Typo="Typography.Body" 
                    @bind-Value="@userQuery" 
                    @oninput="HandleInput" 
                    Placeholder="Enter your question here..."
                    style="flex: 1; overflow-y: hidden; resize: none;" 
                    Class="card-splitter alert alert-primary content-splitter-font-size"
                    Appearance="FluentInputAppearance.Filled" 
                    Autofocus="@Autofocus" 
                    Minlength="@MinLength"
                    MaxLength="@MaxLength" 
                    Rows="2" 
                    id="fluentTextArea" 
                     @oninput="@(async (ChangeEventArgs e) => await AutoResizeTextArea())"
                />

                    <!-- OnButtonASAPTimeClicked -->
                    <FluentButton 
                        IconStart="@(new Icons.Filled.Size24.BotSparkle())" 
                        Class="FluentButton"
                        OnClick="@OnButtonASAPTimeClicked" 
                        >
                        AI-Organizer
                    </FluentButton>
                </FluentStack>
                @if (isDeleting)
                {
                    <FluentLabel Typo="Typography.Body">Please wait...</FluentLabel>
                    <FluentProgress Class="progress-top" style="color: var(--themePrimary);"></FluentProgress>
                }

            </FluentStack>
        </div>
@if (showResponse)
{
    @if (showResponse && !string.IsNullOrEmpty(responseQuery))
    {
        <FluentCard MinimalStyle="false" Class="response-card" Width="720px" 
                    Style="@($"background-color: #FFFFFF; border: 1px solid #ccc; position: absolute; top: 10px; left: 50%; transform: translateX(-50%); z-index: 9999; height: {calculatedHeight}px;")">
            <div style="display: flex; justify-content: space-between; align-items: center;">
                <FluentLabel Typo="Typography.Subject" Class="response-label">
                    Response:
                </FluentLabel>
                <FluentButton 
                    IconStart="@(new Icons.Filled.Size24.Dismiss())" 
                    Appearance="Appearance.Stealth" 
                    Class="close-button"
                    OnClick="@CloseResponse"
                    aria-label="Close Response">
                </FluentButton>
            </div>
            <FluentTextBlock Typo="Typography.Body" Class="response-text" Style="max-height: @(calculatedHeight - 50)px; overflow-y: auto;">
                @((MarkupString)formattedResponse)
            </FluentTextBlock>
        </FluentCard>
    }
    @if (newsArticles != null && newsArticles.Any())
    {
            <FluentCard MinimalStyle="true" Class="response-card" Width="1200px" 
                Style="@($"background-color: #FFFFFF; border: 1px solid #ccc; position: absolute; top: 10px; left: 50%; transform: translateX(-50%); z-index: 9999; height: 100%; max-height: 90vh; overflow-y: auto;")">
                <div style="display: flex; justify-content: space-between; align-items: center;">
                    <FluentLabel Typo="Typography.Subject" Class="response-label">
                        News Articles:
                    </FluentLabel>
                    <FluentButton 
                        IconStart="@(new Icons.Filled.Size24.Dismiss())" 
                        Appearance="Appearance.Stealth" 
                        Class="close-button"
                        OnClick="@CloseResponse"
                        aria-label="Close Response">
                    </FluentButton>
                </div>

                <!-- Scrollable container for articles -->
                <div class="news-articles-container" style="overflow-y: auto; max-height: 80vh;">
                    @foreach (var article in newsArticles)
                    {
                    <!-- Article card, now wider -->
                    <FluentCard Class="article-card" MinimalStyle="false" Width="1100px" Height="180px" Style="margin-bottom: 16px; padding: 16px;">
                        <div style="display: flex; width: 100%;">
                            @if (!string.IsNullOrEmpty(article.ThumbnailUrl))
                            {
                            <img src="@article.ThumbnailUrl" alt="Thumbnail" style="width: 120px; height: 120px; object-fit: cover; margin-right: 16px;" />

                            }
                            <div style="flex: 1;">
                                <!-- Article Title with Link -->
                                <FluentAnchor Href="@article.Url" Target="_blank" Style="font-size: 20px; font-weight: bold; color: #0078D4; text-decoration: none;">
                                    @article.Name
                                </FluentAnchor>

                                <!-- Article Description -->
                                <p style="margin-top: 8px;">@article.Description</p>

                                <!-- News Source, Category, and Date Published on one line -->
                                <p style="margin-top: 8px; font-size: 14px; color: #888;">
                                    Source: <strong>@article.Source</strong> |
                                    Category: <strong>@article.Category</strong> |
                                    Published on: <strong>@DateTime.Parse(article.DatePublished).ToString("MMMM dd, yyyy hh:mm tt")</strong>
                                </p>
                            </div>
                        </div>
                    </FluentCard>


                    }
                </div>
            </FluentCard>

    }
}


        <FluentTabs @bind-ActiveTabId="@activeTabId" OnTabChange="HandleOnTabChange">
            <!-- Emails Tab -->
            <FluentTab Id="Emails-tab">
                <Header>
                    <FluentIcon Value="@(new Icons.Regular.Size20.Mail())" />
                    <FluentLabel Typo="Typography.Body" Appearance="Appearance.Stealth" Color="@Color.Neutral">
                        Mail
                    </FluentLabel>
                </Header>
                <Content>
                    <FluentLabel Typo="Typography.H4" Appearance="Appearance.Stealth" Color="@Color.Neutral">
                        Your Emails in Outlook
                    </FluentLabel>
                    <FluentLabel Typo="Typography.Body" Appearance="Appearance.Stealth" Color="@Color.Neutral">
                        Access and manage your Outlook emails directly from this tab.
                    </FluentLabel>
                    <!--
                    <FluentStack Orientation="Orientation.Horizontal" HorizontalAlignment="@Horizontal" VerticalAlignment="@Vertical">
                        <FluentTextArea 
                            Typo="Typography.Body" 
                            Class="card-splitter alert alert-primary content-splitter-font-size"
                            Appearance="FluentInputAppearance.Filled" 
                            @bind-Value="@searchQuery" 
                            Placeholder="Search emails..."
                            Style="width: 1600px;"
                            @oninput="OnSearchInputChanged" 
                            Autofocus="@Autofocus" 
                            Minlength="@MinLength"
                            MaxLength="@MaxLength" 
                            Rows="@Rows" />
                        <FluentStack Orientation="Orientation.Vertical" HorizontalAlignment="@Horizontal" VerticalAlignment="@Vertical">

                            @if (isSearch)
                            {
                                <FluentLabel Typo="Typography.Body">Please wait...</FluentLabel>
                                <FluentProgress Class="progress-top" style="color: var(--themePrimary);"></FluentProgress>
                            }
                            <FluentButton 
                                OnClick="@SearchEmails" 
                                Appearance="Appearance.Accent"
                                Disabled="@string.IsNullOrWhiteSpace(searchQuery)"
                                IconStart="@(new Icons.Regular.Size20.Search())"
                                aria-label="Search Emails">
                                Search
                            </FluentButton>
                            @if (!string.IsNullOrWhiteSpace(searchQuery))
                            {
                                <FluentButton 
                                    OnClick="@ClearSearchAndReloadEmails" 
                                    Appearance="Appearance.Lightweight"
                                    IconStart="@(new Icons.Regular.Size20.Delete())"
                                    aria-label="Clear Search">
                                    Clear Search
                                </FluentButton>
                            }
                        </FluentStack>
                    </FluentStack>
                    -->
                        @if (isMessagesLoading)
                        {
                            <FluentLabel Typo="Typography.Body">Please wait...</FluentLabel>
                            <FluentProgress Class="progress-top" style="color: var(--themePrimary);"></FluentProgress>
                        }
                        else
                        {
                            @if (emailsWithComputedProperties != null && emailsWithComputedProperties.Any())
                            {
                                <FluentStack Orientation="Orientation.Horizontal" HorizontalAlignment="@Horizontal" VerticalAlignment="@Vertical">

                                    <FluentButton OnClick="RefreshMessagesAsync" Appearance="Appearance.Stealth" IconStart="@(new Icons.Regular.Size20.ArrowSync())">
                                        Refresh
                                    </FluentButton>
                                    @if (!isMessagesLoading)
                                    {
                                        <FluentButton OnClick="LoadMoreMessagesAsync" Appearance="Appearance.Stealth" IconStart="@(new Icons.Regular.Size20.ArrowDown())">
                                            Load More Messages
                                        </FluentButton>
                                    }
                                    else
                                    {
                                        <!-- Loading Spinner for Load More -->
                                        <FluentProgress Class="progress-top" style="color: var(--themePrimary);"></FluentProgress>
                                    }
                                    @if (!isAIOrganizerLoading)
                                    {
                                        <FluentButton OnClick="AIOrganizerAsync" Appearance="Appearance.Stealth" IconStart="@(new Icons.Regular.Size24.BotSparkle())">
                                            AI Organizer
                                        </FluentButton>
                                    }
                                    else
                                    {
                                        <!-- Loading Spinner for Load More -->
                                        <FluentProgress Class="progress-top" style="color: var(--themePrimary);"></FluentProgress>
                                    }
                                </FluentStack>
                                <!-- Data Grid for Emails -->
                                <div style="max-height: 400px; overflow-y: auto;" tabindex="-1">
                                    <FluentDataGrid 
                                        Items="@emailsWithComputedProperties.AsQueryable()" 
                                        TGridItem="PureEmailViewBasicModel"
                                        ShowHover="true" 
                                        SelectionMode="DataGridSelectionMode.Single" 
                                        SelectedItemsChanged="OnSelectedEmailChanged"
                                        GenerateHeader="GenerateHeaderOption.Sticky">

                                        <!-- Sender Column -->
                                        <PropertyColumn Property="@(e => e.From.Name)" Title="Sender" Sortable="true" Width="150px" />
                                        <PropertyColumn Property="@(e => FormatReceivedDateTime(e.ReceivedDateTime))" Title="Received" Sortable="true" Width="150px" />
                                        <!-- Subject Column -->
                                        <PropertyColumn Property="@(e => e.Subject)" Title="Subject" Sortable="true" Width="300px" />
                                        <!-- Action Required Column 
                                        <PropertyColumn 
                                            Property="@(e => e.ActionRequired)" 
                                            Title="Action Required" 
                                            Sortable="true" 
                                            Width="220px" />
                                        <PropertyColumn 
                                            Property="@(e => e.Priority)" 
                                            Title="Priority" 
                                            Sortable="true" 
                                            Width="100px" />
                                        <PropertyColumn 
                                            Property="@(e => string.Join(", ", e.Categories))" 
                                            Title="Categories" 
                                            Sortable="false" 
                                            Width="200px" />
                                            -->
                                        <TemplateColumn Title="Action" Width="150px">
                                            <ChildContent Context="PureEmailViewBasicModel">
                                                <FluentStack Orientation="Orientation.Horizontal" HorizontalGap="5">

                                                    <!-- View Button -->
                                                    <FluentButton 
                                                        OnClick="@(() => OpenEmailDialog(PureEmailViewBasicModel))" 
                                                        Appearance="Appearance.Stealth" 
                                                        Size="Size.Small" 
                                                        IconStart="@(new Icons.Regular.Size20.Eye())" 
                                                        class="text-gray-500 hover:text-gray-700">
                                                    </FluentButton>

                                                    <!-- Delete Button -->
                                                    <FluentButton 
                                                        OnClick="@(() => DeleteEmail(PureEmailViewBasicModel))" 
                                                        Appearance="Appearance.Stealth" 
                                                        Size="Size.Small" 
                                                        IconStart="@(new Icons.Regular.Size20.Delete())" 
                                                        class="text-red-500 hover:text-red-700">
                                                    </FluentButton>

                                                </FluentStack>
                                            </ChildContent>
                                        </TemplateColumn>
                                    </FluentDataGrid>
                                </div>
                            }
                            else
                            {
                                <FluentLabel Typo="Typography.Body">No emails available</FluentLabel>
                            }
                        }

                        <!-- Email Content Dialog -->
                        @if (selectedEmail != null)
                        {
                            <FluentDialog 
                                Id="emailContentDialog" 
                                Visible="true" 
                                OnDismiss="CloseEmailDialog" 
                                Style="width: 80vw; max-height: 80vh; overflow: auto;">
                                
                                <FluentStack Orientation="Orientation.Horizontal" HorizontalGap="10" Padding="10">
                                    <FluentStack Orientation="Orientation.Vertical" HorizontalGap="10" Padding="10">
                                        <!-- Save Button -->
                                        @if (isMessageSaving)
                                        {
                                            <FluentLabel Typo="Typography.Body">Please wait...</FluentLabel>
                                            <FluentProgress Class="progress-top" style="color: var(--themePrimary);"></FluentProgress>
                                        }
                                        <FluentButton 
                                            Appearance="Appearance.Accent" 
                                            IconStart="@(new Icons.Regular.Size20.NotepadSparkle())" 
                                            OnClick="@(() => SaveEmailToDatabase())"
                                            AriaLabel="Save Email to Database"
                                            Id="SaveEmailToDB">Save to AI database 
                                        </FluentButton>
                                        <FluentTooltip Anchor="SaveEmailToDB" HideTooltipOnCursorLeave="true" MaxWidth="200px"
                                            Delay=300>Save this email to your AI database. 
                                        </FluentTooltip>
                                    </FluentStack>

                                    <!-- Copy Button -->
                                    <FluentButton 
                                        Appearance="Appearance.Stealth" 
                                        IconStart="@(new Icons.Regular.Size20.Clipboard())" 
                                        OnClick="@(() => CopyEmailToClipboard())"
                                        AriaLabel="Copy Email">
                                    </FluentButton>
                                    
                                    <!-- Dismiss Button -->
                                    <FluentButton 
                                        Appearance="Appearance.Stealth" 
                                        IconStart="@(new Icons.Regular.Size20.Dismiss())" 
                                        OnClick="@CloseEmailDialog" 
                                        AriaLabel="Close Dialog">
                                    </FluentButton>
                                </FluentStack>
                                
                                <div style="padding: 10px;">
                                    <h3>@selectedEmail.Subject</h3>
                                    
                                    <p><strong>From:</strong> @selectedEmail.From.Name (@selectedEmail.From.EmailAddress)</p>
                                    <p><strong>To:</strong> @(selectedEmail.ToRecipients != null && selectedEmail.ToRecipients.Any() 
                                        ? string.Join(", ", selectedEmail.ToRecipients.Select(r => $"{r.Name} <{r.EmailAddress}>".Trim())) 
                                        : "No recipients")</p>
                                    <p><strong>Received:</strong> @(DateTimeOffset.TryParse(selectedEmail.ReceivedDateTime, out var dt) 
                                        ? dt.ToLocalTime().ToString("g") 
                                        : "N/A")</p>
                                    
                                    <!-- Action Required -->
                                    <p><strong>Action Required:</strong> @(selectedEmail.ActionRequired)</p>
                                    
                                    <!-- Priority -->
                                    <p><strong>Priority:</strong> @selectedEmail.Priority</p>
                                    
                                    <!-- Categories -->
                                    <p><strong>Categories:</strong> @(selectedEmail.Categories != null && selectedEmail.Categories.Any() 
                                        ? string.Join(", ", selectedEmail.Categories) 
                                        : "None")</p>

                                    
                                    <!-- Email Body -->
                                    <div style="margin-top: 20px;">
                                        <pre style="white-space: pre-wrap; padding: 10px; background-color: #f5f5f5; border: 1px solid #ddd; font-size: 16px; color: black;">
                                            @if (!string.IsNullOrEmpty(selectedEmail.BodyContent))
                                            {
                                                @((MarkupString)selectedEmail.BodyContent)
                                            }
                                            else
                                            {
                                                <em>No content available</em>
                                            }
                                        </pre>
                                    </div>
                                </div>
                            </FluentDialog>
                        }

                </Content>
            </FluentTab>

            <!-- Calendar Tab -->
            <FluentTab Id="Calendar-tab">
                <Header>
                    <FluentIcon Value="@(new Icons.Regular.Size20.Calendar())" />
                    <FluentLabel Typo="Typography.Body" Appearance="Appearance.Stealth" Color="@Color.Neutral">
                        Calendar
                    </FluentLabel>
                </Header>
                <Content>
                    <FluentLabel Typo="Typography.H4" Appearance="Appearance.Stealth" Color="@Color.Neutral">
                        Your Outlook Calendar
                    </FluentLabel>
                    <FluentLabel Typo="Typography.Body" Appearance="Appearance.Stealth" Color="@Color.Neutral">
                        Access and manage your Outlook calendar directly from this tab.
                    </FluentLabel>
                    <!-- Button to open the event creation dialog -->
                    <FluentButton 
                        OnClick="@OpenNewEventDialog" 
                        Appearance="Appearance.Accent"
                        IconStart="@(new Icons.Regular.Size20.AddCircle())"
                        Size="Size.Small">
                        Create New Event
                    </FluentButton>
                    @if (calendarEventsWithComputedProperties != null && calendarEventsWithComputedProperties.Any())
                    {
                        <div style="max-height: 640px; overflow-y: auto;" tabindex="-1">
                            <FluentDataGrid 
                                Items="@calendarEventsWithComputedProperties.AsQueryable()" 
                                ShowHover="true" 
                                TGridItem="EventViewModel"
                                SelectionMode="DataGridSelectionMode.Single" 
                                SelectedItemsChanged="OnSelectedEventChanged"
                                GenerateHeader="GenerateHeaderOption.Sticky" 
                                Style="width: 820px;">
                                
                                <!-- Select Column with Fixed Width -->
                                <SelectColumn 
                                    TGridItem="EventViewModel" 
                                    SelectMode="DataGridSelectMode.Single" 
                                    Width="50px" />
                                
                                <!-- Event Subject Column -->
                                <PropertyColumn 
                                    Property="@(e => e.Subject ?? "No Subject")"
                                    Title="Event" 
                                    Sortable="true" 
                                    Width="250px" />
                                
                                <!-- Start Date Column -->
                                <PropertyColumn 
                                    Property="@(e => e.StartDateTimeFormatted ?? "N/A")"
                                    Title="Start" 
                                    Sortable="true" 
                                    Width="150px" />
                                
                                <!-- End Date Column -->
                                <PropertyColumn 
                                    Property="@(e => e.EndDateTimeFormatted ?? "N/A")"
                                    Title="End" 
                                    Sortable="true" 
                                    Width="150px" />
                                
                                <PropertyColumn 
                                    Property="@(e => e.Location.DisplayName  ?? "N/A")"
                                    Title="Location" 
                                    Sortable="true" 
                                    Width="150px" />

                                
                                <!-- Attendees Column 
                                <PropertyColumn 
                                    Property="@(e => e.AttendeesDisplay)"
                                    Title="Attendees" 
                                    Sortable="true" 
                                    Width="200px" />
                                    -->
                                
                                <!-- BodyPreview Column 
                                <PropertyColumn 
                                    Property="@(e => e.BodyPreview ?? "No Preview")"
                                    Title="Preview" 
                                    Sortable="false" 
                                    Width="300px" />
                                -->
                                <!-- WebLink Column -->
                                <TemplateColumn 
                                    Title="Link" 
                                    Width="150px">
                                    <ChildContent Context="eventViewModel">
                                        @if (!string.IsNullOrEmpty(eventViewModel.WebLink))
                                        {
                                            <a href="@eventViewModel.WebLink" target="_blank" rel="noopener noreferrer">View in Outlook</a>
                                        }
                                        else
                                        {
                                            <span>N/A</span>
                                        }
                                    </ChildContent>
                                </TemplateColumn>
                                
                                <!-- Importance Column -->
                                <PropertyColumn 
                                    Property="@(e => GetImportanceText(e.Importance))"
                                    Title="Importance" 
                                    Sortable="true" 
                                    Width="100px" />
                                
                                <!-- IsAllDay Column -->
                                <PropertyColumn 
                                    Property="@(e => e.IsAllDay ? "Yes" : "No")"
                                    Title="All Day" 
                                    Sortable="true" 
                                    Width="80px" />
                                
                                <!-- IsCancelled Column -->
                                <PropertyColumn 
                                    Property="@(e => e.IsCancelled ? "Yes" : "No")"
                                    Title="Cancelled" 
                                    Sortable="true" 
                                    Width="100px" />
                                
                                <!-- Categories Column -->
                                <PropertyColumn 
                                    Property="@(e => string.Join(", ", e.Categories))"
                                    Title="Categories" 
                                    Sortable="true" 
                                    Width="200px" />
                                
                                <!-- Actions Column -->
                                <TemplateColumn 
                                    Title="Actions" 
                                    Width="200px">
                                    <ChildContent Context="eventViewModel">
                                        <FluentStack Orientation="Orientation.Horizontal" HorizontalGap="5">

                                            <FluentButton 
                                                OnClick="@(() => OpenEventDialog(eventViewModel))" 
                                                Appearance="Appearance.Stealth" 
                                                Size="Size.Small"
                                                IconStart="@(new Icons.Regular.Size20.Eye())"
                                                class="text-gray-500 hover:text-gray-700">
                                            </FluentButton>
                                            <!-- Delete Event Button with Confirmation -->
                                            <FluentButton 
                                                OnClick="@(() => OpenConfirmModal(eventViewModel.Id))" 
                                                Appearance="Appearance.Stealth" 
                                                Size="Size.Small"
                                                IconStart="@(new Icons.Regular.Size20.Delete())"
                                                class="text-gray-500 hover:text-gray-700">
                                            </FluentButton>
                                        </FluentStack>
                                    </ChildContent>
                                </TemplateColumn>
                                
                            </FluentDataGrid>
                        </div>
                    }
                    else
                    {
                        <p>No events available</p>
                    }
                    <!-- Event Details Dialog -->
                    @if (selectedEvent != null)
                    {
                        <FluentDialog 
                            Visible="true" 
                            OnDismiss="CloseEventDetailsDialog" 
                            Class="dialog-container">
                            
                            <!-- Wrapper Div for Flex Layout -->
                            <div class="dialog-wrapper">
                                
                                <!-- Scrollable Content Area -->
                                <div class="dialog-content">
                                    <h3>@selectedEvent.Subject</h3>
                                    
                                    <!-- Event Subject -->
                                    <p><strong>Event Subject:</strong> @(!string.IsNullOrWhiteSpace(selectedEvent.Subject) ? selectedEvent.Subject : "N/A")</p>
                                    
                                    <!-- Event Start Date/Time -->
                                    <p><strong>Start Date:</strong> @FormatDate(selectedEvent.StartDateTime, "d")</p>
                                    <p><strong>Start Time:</strong> @FormatDate(selectedEvent.StartDateTime, "t")</p>
                                    
                                    <!-- Event End Date/Time -->
                                    <p><strong>End Date:</strong> @FormatDate(selectedEvent.EndDateTime, "d")</p>
                                    <p><strong>End Time:</strong> @FormatDate(selectedEvent.EndDateTime, "t")</p>
                                    
                                    <!-- Event Location -->
                                    <p>
                                        <strong>Location:</strong> 
                                        @(!string.IsNullOrWhiteSpace(selectedEvent.Location?.DisplayName) 
                                            ? selectedEvent.Location.DisplayName 
                                            : "N/A")
                                    </p>
                                    
                                    <!-- Event Attendees -->
                                    <p><strong>Attendees:</strong></p>
                                    <ul>
                                        @if (selectedEvent.Attendees != null && selectedEvent.Attendees.Any())
                                        {
                                            @foreach (var attendee in selectedEvent.Attendees)
                                            {
                                                <li>@(attendee.EmailAddress?.Name ?? attendee.EmailAddress?.Address ?? "Unknown Attendee")</li>
                                            }
                                        }
                                        else
                                        {
                                            <li>No attendees</li>
                                        }
                                    </ul>
                                    
                                    <!-- Display Event Categories -->
                                    <p><strong>Categories:</strong> 
                                        @if (selectedEvent.Categories != null && selectedEvent.Categories.Any())
                                        {
                                            @string.Join(", ", selectedEvent.Categories)
                                        }
                                        else
                                        {
                                            <span>No categories</span>
                                        }
                                    </p>

                                    <!-- Display Event Description -->
                                    <p><strong>Body Preview:</strong></p>
                                    <div style="white-space: normal; padding: 10px; background-color: #f5f5f5; border: 1px solid #ddd;">
                                        @((MarkupString)(!string.IsNullOrWhiteSpace(selectedEvent.BodyPreview) ? selectedEvent.BodyPreview : "No Body Preview available"))
                                    </div>
                                </div>
                                
                                <!-- Fixed Footer with Close Button -->
                                <div class="dialog-footer">
                                    <FluentButton 
                                        Appearance="Appearance.Stealth" 
                                        IconStart="@(new Icons.Regular.Size20.Dismiss())" 
                                        OnClick="@CloseEventDetailsDialog" 
                                        class="text-gray-500 hover:text-gray-700">
                                        Cancel
                                    </FluentButton>
                                </div>
                            </div>
                        </FluentDialog>
                    }

                        @if (isEventDialogVisible)
                        {
                            <FluentDialog Visible="true" OnDismiss="CloseNewEventDialog">
                                <FluentCard MinimalStyle="true" Width="640px" Height="100%">
                                    <FluentHeader>Create New Event</FluentHeader>
                                    <EditForm Model="@newEvent">
                                        <DataAnnotationsValidator />
                                        <ValidationSummary class="mb-4 text-red-600" />
                                        <form class="default-form rounded-lg bg-white p-8 shadow-xl mb-12">
                                            <div class="grid gap-8">
                                                <FluentStack Orientation="Orientation.Vertical" HorizontalAlignment="@Horizontal" VerticalAlignment="@Vertical">

                                                    <!-- Event Subject -->
                                                    <div>
                                                        <label for="EventSubject" class="block text-sm font-medium text-gray-700 mb-2">Event Subject</label>
                                                        <InputText id="EventSubject" class="mt-1 block w-full rounded-lg" 
                                                                @bind-Value="newEvent.Subject" 
                                                                data-smartpaste-description="This is the title or subject of the event or meeting."
                                                                style="width: 600px; max-width: 600px;" />
                                                    </div>

                                                    <!-- Event Start Date/Time -->
                                                    <div>
                                                        <label for="EventStartDateFromReceived" class="block text-sm font-medium text-gray-700 mb-2">Start Date</label>
                                                        <InputDate id="EventStartDateFromReceived" class="mt-1 block w-full rounded-lg" 
                                                                @bind-Value="newEventStartDate"
                                                                data-smartpaste-description="The start date of the event, in the format MM/DD/YYYY." />
                                                        
                                                        <label for="EventStartTimeFromReceived" class="block text-sm font-medium text-gray-700 mt-2">Start Time</label>
                                                        <select id="EventStartTimeFromReceived" class="mt-1 block w-full rounded-lg" 
                                                                @bind="selectedStartTime" 
                                                                data-smartpaste-description="The time the event starts, in the format HH:mm (24-hour clock).">
                                                            @foreach (var time in timeIntervals)
                                                            {
                                                                <option value="@time">@time</option>
                                                            }
                                                        </select>
                                                    </div>

                                                    <!-- Event End Date/Time -->
                                                    <div>
                                                        <label for="EventEndDateFromReceived" class="block text-sm font-medium text-gray-700 mb-2">End Date</label>
                                                        <InputDate id="EventEndDateFromReceived" class="mt-1 block w-full rounded-lg" 
                                                                @bind-Value="newEventEndDate" 
                                                                data-smartpaste-description="The end date of the event, in the format MM/DD/YYYY." />
                                                        
                                                        <label for="EventEndTimeFromReceived" class="block text-sm font-medium text-gray-700 mt-2">End Time</label>
                                                        <select id="EventEndTimeFromReceived" class="mt-1 block w-full rounded-lg" 
                                                                @bind="selectedEndTime"
                                                                data-smartpaste-description="The time the event ends, in the format HH:mm (24-hour clock).">
                                                            @foreach (var time in timeIntervals)
                                                            {
                                                                <option value="@time">@time</option>
                                                            }
                                                        </select>
                                                    </div>

                                                    <!-- Event Location -->
                                                    <div>
                                                        <label for="EventLocation" class="block text-sm font-medium text-gray-700 mb-2">Event Location</label>
                                                        <InputText id="EventLocation" class="mt-1 block w-full rounded-lg" 
                                                                @bind-Value="newEvent.Location.DisplayName" 
                                                                data-smartpaste-description="The location of the event, either physical or virtual, such as 'Conference Room A' or 'Microsoft Teams Meeting'."
                                                                style="width: 600px; max-width: 600px;" />
                                                    </div>

                                                    <!-- Event Attendees -->
                                                    <div>
                                                        <label for="EventAttendees" class="block text-sm font-medium text-gray-700 mb-2">Attendees (comma-separated emails)</label>
                                                        <InputTextArea id="EventAttendees" class="mt-1 block w-full rounded-lg" 
                                                                    @bind-Value="attendeesInput" 
                                                                    data-smartpaste-description="A list of email addresses of people attending the event, separated by commas."
                                                                    Rows="5" 
                                                                    Placeholder="Enter attendee emails..." 
                                                                    style="width: 600px; max-width: 600px;" />
                                                    </div>

                                                    <!-- Event Description -->
                                                    <div>
                                                        <label for="EventDescription" class="block text-sm font-medium text-gray-700 mb-2">Event Description</label>
                                                        <InputTextArea id="EventDescription" class="mt-1 block w-full rounded-lg" 
                                                                    @bind-Value="newEventBody" 
                                                                    data-smartpaste-description="A detailed description of the event or meeting, including the agenda or purpose."
                                                                    Rows="5" 
                                                                    Placeholder="Enter event description..." 
                                                                    style="width: 600px; max-width: 600px;" />
                                                    </div>

                                                </FluentStack>
                                            </div>

                                            <!-- SmartPasteButton for Clipboard Parsing -->
                                            <div class="flex gap-4 mt-10 justify-end items-center">
                                                <FluentIcon Value="@(new Icons.Regular.Size20.Sparkle())" Slot="start" />
                                                <SmartPasteButton IconStart="@(new Icons.Regular.Size20.DocumentSave())" />
                                            </div>
                                        </form>
                                    </EditForm>

                                    <FluentDialogActions class="mt-6">
                                        <FluentButton 
                                            Appearance="Appearance.Stealth" 
                                            IconStart="@(new Icons.Regular.Size20.Dismiss())" 
                                            OnClick="@CloseNewEventDialog" 
                                            class="text-gray-500 hover:text-gray-700">
                                            Cancel
                                        </FluentButton>
                                        <FluentButton 
                                            Appearance="Appearance.Accent" 
                                            IconStart="@(new Icons.Regular.Size20.Save())" 
                                            OnClick="@SaveEventAsync" 
                                            class="text-gray-500 hover:text-gray-700"
                                            Disabled="!IsFormValid()">
                                            Save
                                        </FluentButton>
                                    </FluentDialogActions>
                                </FluentCard>
                            </FluentDialog>
                        }

                </Content>
            </FluentTab>
            <!-- Contacts Tab -->
            <FluentTab Id="Contacts-tab">
                <Header>
                    <FluentIcon Value="@(new Icons.Regular.Size20.People())" />
                    <FluentLabel Typo="Typography.Body" Appearance="Appearance.Stealth" Color="@Color.Neutral">
                        Contacts
                    </FluentLabel>
                </Header>
                <Content>
                    <FluentLabel Typo="Typography.H4" Appearance="Appearance.Stealth" Color="@Color.Neutral">
                        Your Contacts
                    </FluentLabel>
                    <FluentLabel Typo="Typography.Body" Appearance="Appearance.Stealth" Color="@Color.Neutral">
                        Access and manage your contacts directly from this tab.
                    </FluentLabel>
                    <FluentButton 
                        OnClick="@OpenNewContactDialog" 
                        Appearance="Appearance.Accent"
                        IconStart="@(new Icons.Regular.Size20.PersonAdd())"
                        Size="Size.Small">
                        Add New Contact
                    </FluentButton>
                    @if (contactsWithComputedProperties != null && contactsWithComputedProperties.Any())
                    {
                        <div style="max-height: 640px; overflow-y: auto;" tabindex="-1">
                            <FluentDataGrid 
                                Items="@contactsWithComputedProperties.AsQueryable()" 
                                ShowHover="true" 
                                TGridItem="ContactViewModel"
                                SelectionMode="DataGridSelectionMode.Single" 
                                SelectedItemsChanged="OnSelectedContactChanged"
                                GenerateHeader="GenerateHeaderOption.Sticky" 
                                Style="width: 820px;">
                                
                                <!-- Contact Name Column -->
                                <PropertyColumn 
                                    Property="@(c => c.DisplayName)"
                                    Title="Name" 
                                    Sortable="true" 
                                    Width="200px" />
                                
                                <!-- Email Address Column -->
                                <PropertyColumn 
                                    Property="@(c => c.EmailAddressesFormatted)"
                                    Title="Email" 
                                    Sortable="true" 
                                    Width="250px" />
                                
                                <!-- Mobile Phone Column -->
                                <PropertyColumn 
                                    Property="@(c => c.MobilePhone)"
                                    Title="Mobile Phone" 
                                    Sortable="true" 
                                    Width="150px" />
                                
                                <!-- Actions Column -->
                                <TemplateColumn Title="Actions" Width="200px">
                                    <ChildContent Context="contactViewModel">
                                        <FluentStack Orientation="Orientation.Horizontal" HorizontalGap="5">
                                            <FluentButton 
                                                OnClick="() => OpenContactDialog(contactViewModel)" 
                                                Appearance="Appearance.Stealth" 
                                                Size="Size.Small"
                                                IconStart="@(new Icons.Regular.Size20.Edit())"
                                                class="text-gray-500 hover:text-gray-700">
                                            </FluentButton>
                                            <FluentButton 
                                                OnClick="() => DeleteContactAsync(contactViewModel.Id)" 
                                                Appearance="Appearance.Stealth" 
                                                Size="Size.Small"
                                                IconStart="@(new Icons.Regular.Size20.Delete())"
                                                class="text-gray-500 hover:text-gray-700">
                                            </FluentButton>
                                        </FluentStack>
                                    </ChildContent>
                                </TemplateColumn>
                                
                            </FluentDataGrid>
                        </div>
                    }
                    else
                    {
                        <p>No contacts available</p>
                    }

                    <!-- Contact Details Dialog -->
                    @if (selectedContact != null && isContactDetailsDialogVisible)
                    {
                        <FluentDialog @bind-Visible="isContactDetailsDialogVisible">
                            <FluentCard MinimalStyle="true" Width="640px" Height="100%" Style="border: 1px solid var(--accent-fill-rest); padding: 0px; margin-right: 0px;" Class="fluent-card-summary-details">
                                <FluentHeader>@(string.IsNullOrEmpty(selectedContact.Id) ? "Add New Contact" : "Edit Contact")</FluentHeader>
                                <EditForm Model="@selectedContact" OnValidSubmit="SaveContactAsync">
                                    <DataAnnotationsValidator />
                                    <ValidationSummary class="mb-4 text-red-600" />
                                    <form class="default-form rounded-lg bg-white p-8 shadow-xl mb-12">
                                        <div class="grid gap-8 md:grid-cols-2">
                                            <!-- Personal Information -->
                                            <div class="col-span-2">
                                                <h3 class="text-lg font-medium text-gray-900 mb-4">Personal Information</h3>
                                                <FluentStack Orientation="Orientation.Horizontal" HorizontalAlignment="@Horizontal" VerticalAlignment="@Vertical">
                                                    <div>
                                                        <label for="FirstName" class="block text-sm font-medium text-gray-700 mb-2">First Name</label>
                                                        <InputText id="FirstName" class="mt-1 block w-full rounded-lg border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm p-2" @bind-Value="@selectedContact.GivenName"></InputText>
                                                    </div>
                                                    <div>
                                                        <label for="LastName" class="block text-sm font-medium text-gray-700 mb-2">Last Name</label>
                                                        <InputText id="LastName" class="mt-1 block w-full rounded-lg border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm p-2" @bind-Value="@selectedContact.Surname"></InputText>
                                                        <ValidationMessage For="@(() => selectedContact.Surname)" />
                                                    </div>
                                                </FluentStack>
                                            </div>

                                            <!-- Contact Information -->
                                            <div class="col-span-2">
                                                <h3 class="text-lg font-medium text-gray-900 mb-4">Contact Information</h3>
                                                <FluentStack Orientation="Orientation.Horizontal" HorizontalAlignment="@Horizontal" VerticalAlignment="@Vertical">
                                                    <div>
                                                        <label for="email" class="block text-sm font-medium text-gray-700 mb-2">Email</label>
                                                        <InputText id="email" class="mt-1 block w-full rounded-lg border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm p-2" @bind-Value="@selectedContact.EmailAddress"></InputText>
                                                        <ValidationMessage For="@(() => selectedContact.EmailAddress)" />
                                                    </div>
                                                    <div>
                                                        <label for="phone" class="block text-sm font-medium text-gray-700 mb-2">Phone</label>
                                                        <InputText id="phone" class="mt-1 block w-full rounded-lg border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm p-2" @bind-Value="@selectedContact.MobilePhone"></InputText>
                                                        <ValidationMessage For="@(() => selectedContact.MobilePhone)" />
                                                    </div>
                                                </FluentStack>
                                            </div>

                                            <!-- Professional Information -->
                                            <div class="col-span-2">
                                                <h3 class="text-lg font-medium text-gray-900 mb-4">Professional Information</h3>
                                                <FluentStack Orientation="Orientation.Horizontal" HorizontalAlignment="@Horizontal" VerticalAlignment="@Vertical">
                                                    <div>
                                                        <label for="jobTitle" class="block text-sm font-medium text-gray-700 mb-2">Job Title</label>
                                                        <InputText id="jobTitle" class="mt-1 block w-full rounded-lg border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm p-2" @bind-Value="@selectedContact.JobTitle"></InputText>
                                                        <ValidationMessage For="@(() => selectedContact.JobTitle)" />
                                                    </div>
                                                    <div>
                                                        <label for="company" class="block text-sm font-medium text-gray-700 mb-2">Company</label>
                                                        <InputText id="company" class="mt-1 block w-full rounded-lg border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm p-2" @bind-Value="@selectedContact.CompanyName"></InputText>
                                                        <ValidationMessage For="@(() => selectedContact.CompanyName)" />
                                                    </div>
                                                </FluentStack>
                                            </div>

                                            <!-- Business Address -->
                                            <div class="col-span-2">
                                                <h3 class="text-lg font-medium text-gray-900 mb-4">Business Address</h3>
                                                <FluentStack Orientation="Orientation.Horizontal" HorizontalAlignment="@Horizontal" VerticalAlignment="@Vertical">
                                                    <div>
                                                        <label for="businessStreet" class="block text-sm font-medium text-gray-700 mb-2">Street</label>
                                                        <InputText id="businessStreet" class="mt-1 block w-full rounded-lg border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm p-2" @bind-Value="@selectedContact.BusinessAddress.Street"></InputText>
                                                    </div>
                                                    <div>
                                                        <label for="businessCity" class="block text-sm font-medium text-gray-700 mb-2">City</label>
                                                        <InputText id="businessCity" class="mt-1 block w-full rounded-lg border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm p-2" @bind-Value="@selectedContact.BusinessAddress.City"></InputText>
                                                    </div>
                                                </FluentStack>
                                                <FluentStack Orientation="Orientation.Horizontal" HorizontalAlignment="@Horizontal" VerticalAlignment="@Vertical">
                                                    <div>
                                                        <label for="businessState" class="block text-sm font-medium text-gray-700 mb-2">State</label>
                                                        <InputText id="businessState" class="mt-1 block w-full rounded-lg border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm p-2" @bind-Value="@selectedContact.BusinessAddress.State"></InputText>
                                                    </div>
                                                    <div>
                                                        <label for="businessPostalCode" class="block text-sm font-medium text-gray-700 mb-2">Postal Code</label>
                                                        <InputText id="businessPostalCode" class="mt-1 block w-full rounded-lg border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm p-2" @bind-Value="@selectedContact.BusinessAddress.PostalCode"></InputText>
                                                    </div>
                                                    <div>
                                                        <label for="businessCountry" class="block text-sm font-medium text-gray-700 mb-2">Country</label>
                                                        <InputText id="businessCountry" class="mt-1 block w-full rounded-lg border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm p-2" @bind-Value="@selectedContact.BusinessAddress.CountryOrRegion"></InputText>
                                                    </div>
                                                </FluentStack>
                                            </div>
                                        </div>
                                        <div class="flex gap-4 mt-10 justify-end items-center">
                                            <FluentIcon Value="@(new Icons.Regular.Size20.Sparkle())" Slot="start" />
                                            <SmartPasteButton IconStart="@(new Icons.Regular.Size20.DocumentSave())" />
                                        </div>    
                                    </form>
                                </EditForm>
                                <FluentDialogActions class="mt-6">
                                    <FluentButton Appearance="Appearance.Stealth" IconStart="@(new Icons.Regular.Size20.Dismiss())" OnClick="@CloseContactDialog" class="text-gray-500 hover:text-gray-700">Cancel</FluentButton>
                                    <FluentButton Appearance="Appearance.Stealth" IconStart="@(new Icons.Regular.Size20.Save())" OnClick="@SaveContactAsync" class="text-gray-500 hover:text-gray-700"
                                    Disabled="@(!IsAtLeastOneContactFieldFilled())">Save</FluentButton>
                                </FluentDialogActions>
                            </FluentCard>
                        </FluentDialog>
                    }
                </Content>
            </FluentTab>
            <!-- Additional Tabs can be added here -->
        </FluentTabs>
    </FluentCard>
}
else
{
    <p>User information could not be loaded.</p>
}

@code {

    public string Placeholder { get; set; } = "Enter command or text";
    public bool Autofocus { get; set; } = false;
    public int MinLength { get; set; } = 16;
    public int MaxLength { get; set; } = 1024;
    public int Rows { get; set; } = 1;

    private Profile profile;
    private UserAccountInformation accountInfo;
    private string displayName = "";

    private string currentUserTenantID;
    private string currentUserIdentityID;

    string principal;
    private string userEmail;
    private string userFullName;
    private string userPhoneNumer;
    private string userLanguage;
    private string userAddress;
    private string? Tenant;


    private List<GraphMessage> userMessages = new List<GraphMessage>();
    
    private CalendarEventsResult calendarEventsResult = new CalendarEventsResult();
    private List<Event> calendarViewEventsResult;
    private List<EventViewModel> calendarEventsWithComputedProperties = new List<EventViewModel>();
 
    private List<PureEmailViewBasicModel> emailsWithComputedProperties = new List<PureEmailViewBasicModel>();
    private List<ContactViewModel> contactsWithComputedProperties = new List<ContactViewModel>();
    private ContactViewModel selectedContact;
    private ContactViewModel originalContact = new ContactViewModel(new Contact());
    private bool isContactDetailsDialogVisible = false;

    private bool isLoading = true;
    private bool isMessagesLoading = false;
    private bool isMessageSaving = false;

    private bool isAIOrganizerLoading = false;

    private string error;
    private string userPhotoBase64;
    private string activeTabId = "Emails-tab";
    private string responseQuery;
    private string formattedResponse;
    private int calculatedHeight;
    private bool showResponse = false;

    private string userQuery = string.Empty;

    private PureEmailViewBasicModel selectedEmail;
    // Changed from 'Event' to 'EventViewModel'
    private EventViewModel selectedEvent;
    private bool isInitialized = false;
    public bool Submitting { get; set; }
    private string timeZoneInfo;

    private string userTimeZone;
    private DateTime userLocalTime;

    protected override async Task OnInitializedAsync()
    {
        if (!isInitialized)
        {
            await LoadUserDataAsync();
            isInitialized = true;
        }
    }

private async Task LoadUserDataAsync()
{
    isLoading = true;  // Show loading state
    error = null;
    emailsWithComputedProperties.Clear();  // Clear previous data

    try
    {
         // Call the GetUserTimeZone function and update the UI
        //timeZoneInfo = _timeFunctions.GetUserTimeZone();

        // Trigger re-render to show the result
        profile = await graphService.GetCurrentUserProfileAsync();
        accountInfo = await graphService.GetUserAccountInformationAsync();
        
        //currentUserIdentityID = accountInfo?.Id;

         var (userId, tenantId) = await UserIDsService.GetUserIDs();
        currentUserIdentityID = userId;
        currentUserTenantID = tenantId;

        userEmail = GetUserEmail();
        userFullName = GetUserFullName();  

        userPhoneNumer = GetUserPhoneNumber();

        userLanguage = GetUserLanguage();

        userAddress = GetUserAddress();

        try
        {
            string input = "fetch latest 5 emails"; // Modify as per your application's logic

            //string emailsJson = await azureOpenAIHandler.ShowEmailsAsync(input);

            string emailsJson = await graphService.GetRecentMessagesPureEmailViewBasicModelAsync(10);



            if (!string.IsNullOrWhiteSpace(emailsJson))
            {
                // Deserialize using Newtonsoft.Json into EmailResult
                var emailList = JsonConvert.DeserializeObject<PureEmailResult>(emailsJson);

                if (emailList != null && emailList.Emails.Any())
                {
                    emailsWithComputedProperties = emailList.Emails;
                }
                else
                {
                    emailsWithComputedProperties = new List<PureEmailViewBasicModel>();
                    error = "No emails found.";
                }
            }
            else
            {
                emailsWithComputedProperties = new List<PureEmailViewBasicModel>();
                error = "Failed to retrieve emails.";
            }
        }
        catch (JsonException jsonEx)
        {
            error = $"Failed to parse messages: {jsonEx.Message}";
        }
        catch (Exception ex)
        {
            error = $"Error loading emails: {ex.Message}";
        }
        finally
        {
            isSearch = false;
        }

        // Ensure the UI updates
        StateHasChanged();

        // Fetch the user's profile photo
        var photoStream = await graphService.GetUserPhotoAsync();
        if (photoStream != null)
        {
            using (var memoryStream = new MemoryStream())
            {
                await photoStream.CopyToAsync(memoryStream);
                userPhotoBase64 = Convert.ToBase64String(memoryStream.ToArray());
            }
        }

        // Fetch contacts
        var contacts = await graphService.GetUserContactsAsync(50);
        contactsWithComputedProperties = contacts.Select(c => new ContactViewModel(c)).ToList();

        await LoadCalendarEventsAsync();

        var mailboxSettings = await graphService.GetMailboxSettingsAsync();
        if (mailboxSettings != null)
        {
            Console.WriteLine($"Time Zone: {mailboxSettings.TimeZone}");
            Console.WriteLine($"Date Format: {mailboxSettings.DateFormat}");
            Console.WriteLine($"Time Format: {mailboxSettings.TimeFormat}");
            
            // Accessing other properties
            Console.WriteLine($"Archive Folder: {mailboxSettings.ArchiveFolder}");
            
            if (mailboxSettings.AutomaticRepliesSetting != null)
            {
                Console.WriteLine($"Automatic Replies Status: {mailboxSettings.AutomaticRepliesSetting.Status}");
                Console.WriteLine($"External Audience: {mailboxSettings.AutomaticRepliesSetting.ExternalAudience}");
                // Add more properties as needed
            }
            
            if (mailboxSettings.Language != null)
            {
                Console.WriteLine($"Language Locale: {mailboxSettings.Language.Locale}");
                Console.WriteLine($"Language Display Name: {mailboxSettings.Language.DisplayName}");
            }
            
            if (mailboxSettings.WorkingHours != null)
            {
                Console.WriteLine($"Working Hours Start Time: {mailboxSettings.WorkingHours.StartTime}");
                Console.WriteLine($"Working Hours End Time: {mailboxSettings.WorkingHours.EndTime}");
                Console.WriteLine($"Working Days: {string.Join(", ", mailboxSettings.WorkingHours.DaysOfWeek)}");
            }
            
            Console.WriteLine($"User Purpose: {mailboxSettings.UserPurpose}");
            Console.WriteLine($"User Purpose V2: {mailboxSettings.UserPurposeV2}");
            Console.WriteLine($"Delegate Meeting Message Delivery Options: {mailboxSettings.DelegateMeetingMessageDeliveryOptions}");
        }
        userTimeZone = await UserIDsService.GetTimeZoneAsync();
        Console.WriteLine($"LoadUserDataAsync userTimeZone: {userTimeZone}");

        timeZoneInfo = _timeFunctions.GetUserTimeZone();
        Console.WriteLine($"LoadUserDataAsync timeZoneInfo: {timeZoneInfo}");

        // Get the current UTC time
        DateTime utcNow = DateTime.UtcNow;

        // Convert to user's local time
        userLocalTime = await UserIDsService.ConvertToUserTimeZoneAsync(utcNow);

        //input= "Tonights gonna be a good night! A good good night!";
        //string response = await azureOpenAIHandler.StruturedOutputTestAsync(input);
        //Console.WriteLine($"LoadUserDataAsync JSON Response: {response}");
        
        string inputStr= "I need to get my tires changed from 12:00 to 2:00 pm on Friday March 15, 2024";
        string response = await azureOpenAIHandler.StruturedOutputCalendarAsync(inputStr);
        Console.WriteLine($"LoadUserDataAsync StruturedOutputCalendarAsync JSON Response: {response}");

        inputStr= "What will the date be in 5 days?";
        response = await azureOpenAIHandler.GetIntent(inputStr);
        Console.WriteLine($"LoadUserDataAsync GetIntent JSON Response: {response}");

        //await chatService.TestAsync();
        //await chatService.InitializeAsync(); // load products


    }
    catch (AuthenticationRequiredException)
    {
        RedirectToLogin();
    }
    catch (Exception ex)
    {
        error = $"Error loading user data: {ex.Message}";
    }
    finally
    {
        isLoading = false;  // Hide loading state
    }
}
    private async Task LoadCalendarEventsAsync()
    {
        try
        {
           DateTime startOfWeek = GetStartOfWeek(DateTime.UtcNow);
        DateTime endOfWeek = startOfWeek.AddDays(7);

            // Convert DateTime to ISO 8601 string format
            string startOfWeekString = startOfWeek.ToString("o");
            string endOfWeekString = endOfWeek.ToString("o");

            Console.WriteLine($"Fetching calendar events from {startOfWeekString} to {endOfWeekString}");

            // Call the method with string parameters
            List<EventViewModel> events = await graphService.GetCalendarViewAsync(20, startOfWeekString, endOfWeekString);
                
            if (events == null || !events.Any())
            {
                calendarEventsWithComputedProperties = new List<EventViewModel>();
                Console.WriteLine("No events found. Initialized an empty list.");
            }
            else
            {
                // Filter out any null events to prevent exceptions
                var validEvents = events.Where(e => e != null).ToList();

                // Log the number of null events found (if any)
                int nullEventsCount = events.Count - validEvents.Count;
                if (nullEventsCount > 0)
                {
                    Console.WriteLine($"Found {nullEventsCount} null event(s) in the fetched data.");
                }

                // Assign the valid events to the calendarEventsWithComputedProperties
                calendarEventsWithComputedProperties = validEvents;

                Console.WriteLine($"Successfully loaded {calendarEventsWithComputedProperties.Count} event(s).");
            }
        }
        catch (AuthenticationRequiredException authEx)
        {
            Console.WriteLine($"Authentication is required: {authEx.Message}");
            // Optionally, redirect to login or prompt user
        }
        catch (InvalidOperationException invOpEx)
        {
            Console.WriteLine($"Invalid operation: {invOpEx.Message}");
        }
        catch (JsonException jsonEx)
        {
            Console.WriteLine($"JSON deserialization error: {jsonEx.Message}");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"An unexpected error occurred: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }

    private DateTime GetStartOfWeek(DateTime date)
    {
        // Assuming week starts on Monday
        int diff = (7 + (date.DayOfWeek - DayOfWeek.Monday)) % 7;
        return date.AddDays(-1 * diff).Date;
    }

    private int currentPage = 1;
    private const int PageSize = 10;  // Load 10 messages per page

 private async Task LoadMoreMessagesAsync()
{
    try
    {
        isMessagesLoading = true;
        string input = "fetch latest 10 more emails";
        //var emailsJson = await azureOpenAIHandler.ShowEmailsAsync(input);
        string emailsJson = await graphService.GetRecentMessagesPureEmailViewBasicModelAsync(10);

        if (!string.IsNullOrWhiteSpace(emailsJson))
        {
            // Deserialize using Newtonsoft.Json
            var emailList = JsonConvert.DeserializeObject<PureEmailResult>(emailsJson);


            if (emailList != null && emailList.Emails.Any())
            {
                emailsWithComputedProperties.AddRange(emailList.Emails);
            }
        }

        currentPage++;  // Move to next page
    }
    catch (Newtonsoft.Json.JsonException jsonEx)
    {
        error = $"Failed to parse messages: {jsonEx.Message}";
    }
    catch (Exception ex)
    {
        error = $"Error loading more messages: {ex.Message}";
    }
    finally
    {
        isMessagesLoading = false;
    }
}


    private void RedirectToLogin()
    {
        var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
        var queryString = System.Web.HttpUtility.ParseQueryString(uri.Query);
        // Get the value of the "myParameter" query string parameter
        Tenant = queryString["Tenant"];
        Console.WriteLine($"Tenant: {Tenant}");
   
        // Log the returnUrl for debugging purposes
        Console.WriteLine($"uri: {uri}");

        // Navigate to the sign-in page with the encoded returnUrl
        NavigationManager.NavigateTo($"/MicrosoftIdentity/Account/SignIn?returnUrl={uri}", forceLoad: true);
    }



    private string GetUserFullName()
    {
        // Try to get the user's full name from the Names list
        if (profile?.Names != null && profile.Names.Any())
        {
            var primaryName = profile.Names.FirstOrDefault();
            if (primaryName != null)
            {
                string firstName = primaryName.First ?? "";
                string lastName = primaryName.Last ?? "";
                if (!string.IsNullOrWhiteSpace(firstName) || !string.IsNullOrWhiteSpace(lastName))
                {
                    return $"{firstName} {lastName}".Trim();
                }
                else if (!string.IsNullOrWhiteSpace(primaryName.DisplayName))
                {
                    return primaryName.DisplayName;
                }
            }
        }

        // As a fallback, return accountInfo?.UserPrincipalName or "User"
        return accountInfo?.UserPrincipalName ?? "User";
    }

    private string GetUserPhoneNumber()
    {
        // Try to get the user's primary phone number from the Phones list
        if (profile?.Phones != null && profile.Phones.Any())
        {
            // Look for the mobile phone number first
            var mobilePhone = profile.Phones.FirstOrDefault(phone => phone.Type == PhoneType.Mobile);
            if (mobilePhone != null && !string.IsNullOrWhiteSpace(mobilePhone.Number))
            {
                return mobilePhone.Number;
            }

            // If no mobile phone, get any available phone number
            var primaryPhone = profile.Phones.FirstOrDefault();
            if (primaryPhone != null && !string.IsNullOrWhiteSpace(primaryPhone.Number))
            {
                return primaryPhone.Number;
            }
        }

        // As a fallback, return an empty string or a default message
        return "";
    }

    private string GetUserAddress()
    {
        // Try to get the user's current position from the Positions list
        if (profile?.Positions != null && profile.Positions.Any())
        {
            // Look for the current position where IsCurrent is true
            var currentPosition = profile.Positions.FirstOrDefault(position => position.IsCurrent == true);

            if (currentPosition != null && currentPosition.Detail?.Company?.Address != null)
            {
                var address = currentPosition.Detail.Company.Address;

                // Extract address components
                string street = address.Street ?? "";
                string city = address.City ?? "";
                string state = address.State ?? "";
                string postalCode = address.PostalCode ?? "";
                string countryOrRegion = address.CountryOrRegion ?? "";

                // Build the full address string
                var addressParts = new List<string> { street, city, state, postalCode, countryOrRegion };
                var fullAddress = string.Join(", ", addressParts.Where(part => !string.IsNullOrWhiteSpace(part)));

                if (!string.IsNullOrWhiteSpace(fullAddress))
                {
                    return fullAddress;
                }
            }
        }

        // As a fallback, return a default message or an empty string
        return "Address not specified";
    }

    private string GetUserLanguage()
    {
        // Try to get the user's primary language from the Languages list
        if (profile?.Languages != null && profile.Languages.Any())
        {
            var primaryLanguage = profile.Languages.FirstOrDefault();
            if (primaryLanguage != null)
            {
                string displayName = primaryLanguage.DisplayName ?? "";
                string tag = primaryLanguage.Tag ?? "";

                if (!string.IsNullOrWhiteSpace(displayName))
                {
                    return displayName;
                }
                else if (!string.IsNullOrWhiteSpace(tag))
                {
                    return tag;
                }
            }
        }

        // As a fallback, return a default message or an empty string
        return "Language not specified";
    }

    private string GetUserEmail()
    {
        // Try to get the user's primary email from the Emails list
        if (profile?.Emails != null && profile.Emails.Any())
        {
            var primaryEmail = profile.Emails.FirstOrDefault();
            if (primaryEmail != null)
            {
                return primaryEmail.Address ?? accountInfo?.UserPrincipalName ?? "";
            }
        }
        // As a fallback, return accountInfo?.UserPrincipalName or an empty string
        return accountInfo?.UserPrincipalName ?? "";
    }

    private string ParseAndFormatDateTime(string? dateTimeString)
    {
        if (string.IsNullOrEmpty(dateTimeString))
            return "N/A";

        if (DateTime.TryParse(dateTimeString, out DateTime dateTime))
        {
            return dateTime.ToLocalTime().ToString("g");
        }

        return dateTimeString; // Return the original string if parsing fails
    }

    // @using OurNewsArticle = AITrailblazer.net.Models.NewsArticle

    // Event handler for handling input changes (optional)
    private void HandleInput(ChangeEventArgs e)
    {
        // Optional: Handle input changes if needed
        // Currently, @bind-Value takes care of updating userQuery
    }
    // List to hold the news articles
    private List<OurNewsArticle> newsArticles = new List<OurNewsArticle>();

  
    // Event handler for button click
    private async Task OnButtonASAPTimeClicked()
    {

        Console.WriteLine($"OnButtonASAPTimeClicked User Query: {userQuery}");
        if (string.IsNullOrWhiteSpace(userQuery))
        {
            responseQuery = "Please enter a valid query.";
            
            showResponse = false; // Ensure the card is hidden if the query is invalid
            return;
        }

        try
        {
            Submitting = true;
            showResponse = false;
            error = null;

            // Call the Azure OpenAI handler with the user's query
            Console.WriteLine($"call azureOpenAIHandler.HandleUserQueryAsync User Query: {userQuery}");
            
            //responseQuery = await azureOpenAIHandler.HandleUserQueryAsync(userQuery);

            //responseQuery = await azureOpenAIHandler.GetASAPTime(userQuery);


           string subject = "";
            string promptText = userQuery;
            string categoryId = "";

            (responseQuery, subject) = await chatService.GetEmailCompletionAsync(
                currentUserTenantID,
                currentUserIdentityID,
                categoryId,
                promptText
            );
            formattedResponse = Markdown.ToHtml(responseQuery);
            // Dynamically adjust height based on response length
            calculatedHeight = CalculateHeight(formattedResponse);

            searchQuery = "subject: " + subject;
            showResponse = true; // Show the response card when a new response is received
            await SearchEmails();
        }
        catch (Exception ex)
        {
            error = $"Error processing your request: {ex.Message}";
            showResponse = false; // Hide the card in case of an error
        }
        finally
        {
            Submitting = false;
        }
    }


  // Event handler for button click
   private async Task OnButtonASAPNewsClicked()
{
    if (string.IsNullOrWhiteSpace(userQuery))
    {
        responseQuery = "Please enter a valid query.";
        showResponse = false; // Ensure the card is hidden if the query is invalid
        return;
    }

    try
    {
        Submitting = true;
        error = null;
        responseQuery = string.Empty;

        // Call the Azure OpenAI handler with the user's query
        var jsonResponse = await azureOpenAIHandler.ShowNewsAsync(userQuery);

        // Log the JSON response for debugging
        Console.WriteLine($"JSON Response: {jsonResponse}");

        var newsResponse = JsonConvert.DeserializeObject<NewsResponse>(jsonResponse);
        if (newsResponse != null)
        {
            newsArticles = newsResponse.Articles;
            showResponse = true;

            responseQuery = $"Found {newsResponse.TotalResults} articles for your query.";
        }
        else
        {
            showResponse = true;
            newsArticles = new List<OurNewsArticle>();
            responseQuery = "No news articles found for your query.";
        }
    }
    catch (Newtonsoft.Json.JsonException jsonEx)
    {
        responseQuery = $"Failed to parse news data: {jsonEx.Message}";
        showResponse = true;
        newsArticles = new List<OurNewsArticle>();
    }
    catch (Exception ex)
    {
        responseQuery = $"An error occurred while fetching news articles: {ex.Message}";
        showResponse = true;
        newsArticles = new List<OurNewsArticle>();
    }
    finally
    {
        Submitting = false;
    }
}

    protected override void OnParametersSet()
    {
        // Dynamically adjust height based on response length
        calculatedHeight = CalculateHeight(formattedResponse);
    }

    private int CalculateHeight(string responseText)
    {
        const int minHeight = 200; // Minimum height for very short responses
        const int maxHeight = 1000; // Increased max height for long responses
        const int charLimitPerLine = 85; // Approximate character limit per line for 720px width
        const int pixelsPerLine = 24; // Increase line height for readability

        if (string.IsNullOrEmpty(responseText))
        {
            return minHeight;
        }

        int lineCount = (int)((responseText.Length / (double)charLimitPerLine) * 1.2) + 1;
        int calculatedHeight = (lineCount * pixelsPerLine) + 80; // Additional padding

        return Math.Clamp(calculatedHeight, minHeight, maxHeight);
    }



    // Event handler to close the response card
    private void CloseResponse()
    {
        showResponse = false;
    }

    private void HandleOnTabChange(FluentTab tabId)
    {
        // Optional: Handle tab changes if needed
    }

    // Email Selection Handler
    private void OnSelectedEmailChanged(IEnumerable<PureEmailViewBasicModel> selectedItems)
    {
        selectedEmail = selectedItems.FirstOrDefault();
    }

    private void CloseEmailDialog()
    {
        selectedEmail = null;
    }
    private string searchQuery = "";
    private bool isSearchButtonDisabled = true;

    private void OnSearchInputChanged(ChangeEventArgs e)
    {
        searchQuery = e.Value?.ToString() ?? "";
        isSearchButtonDisabled = string.IsNullOrWhiteSpace(searchQuery);
        StateHasChanged();
    }

    private bool isSearch = false;

    private async Task SearchEmails()
    {
        isSearch = true;
        error = null;

        try
        {
            // Generate KQL query from natural language input
            //string kqlQuery = await azureOpenAIHandler.GenerateKQLQuery(searchQuery);

            Console.WriteLine($"SearchEmails searchQuery: {searchQuery}");
            var searchResultsJson = await graphService.SearchMessagesAsync(searchQuery, 20);
            Console.WriteLine($"SearchEmails searchResultsJson: {searchResultsJson}");

            if (!string.IsNullOrWhiteSpace(searchResultsJson))
            {
                // Deserialize the JSON response into a list of PureEmailViewBasicModel objects
                emailsWithComputedProperties = JsonConvert.DeserializeObject<List<PureEmailViewBasicModel>>(searchResultsJson, new JsonSerializerSettings
                {
                    MissingMemberHandling = MissingMemberHandling.Ignore,
                    NullValueHandling = NullValueHandling.Ignore
                });

                // Check if deserialization was successful
                //if (emailsWithComputedProperties == null || !emailsWithComputedProperties.Any())
                //{
                //    emailsWithComputedProperties = new List<PureEmailViewBasicModel>();
                    //error = "No messages found matching the search criteria.";
                //}
            }
            else
            {
                //emailsWithComputedProperties = new List<PureEmailViewBasicModel>();
                //error = "Failed to retrieve search results.";
            }
        }
        catch (Exception ex)
        {
            //error = $"Error searching emails: {ex.Message}";
        }
        finally
        {
            isSearch = false;
        }
    }
 private async Task ClearSearchAndReloadEmails()
    {
        // Clear the search query
        searchQuery = "";

        // Reset the email list
        isSearch = true;
        error = null;

        try
        {
            // Reload the original email list
            var messagesJson = await graphService.GetRecentMessagesAsync(20); // Adjust the count as needed

            if (!string.IsNullOrWhiteSpace(messagesJson))
            {
                // Deserialize using Newtonsoft.Json directly into a list of PureEmailViewBasicModel objects
                var messages = JsonConvert.DeserializeObject<List<PureEmailViewBasicModel>>(messagesJson, new JsonSerializerSettings
                {
                    MissingMemberHandling = MissingMemberHandling.Ignore,
                    NullValueHandling = NullValueHandling.Ignore
                    // Add other settings as needed
                });

                if (messages != null && messages.Any())
                {
                    // Directly assign the deserialized messages
                    emailsWithComputedProperties = messages;
                }
                else
                {
                    emailsWithComputedProperties = new List<PureEmailViewBasicModel>();
                    error = "No emails found.";
                }
            }
            else
            {
                emailsWithComputedProperties = new List<PureEmailViewBasicModel>();
                error = "Failed to retrieve emails.";
            }
        }
        catch (Newtonsoft.Json.JsonException jsonEx)
        {
            error = $"Failed to parse messages: {jsonEx.Message}";
            emailsWithComputedProperties = new List<PureEmailViewBasicModel>();
        }
        catch (Exception ex)
        {
            error = $"Error loading emails: {ex.Message}";
            emailsWithComputedProperties = new List<PureEmailViewBasicModel>();
        }
        finally
        {
            isSearch = false;
        }

        // Ensure the UI updates
        StateHasChanged();
    }

    // Event Selection Handler
    private void OnSelectedEventChanged(IEnumerable<EventViewModel> selectedItems)
    {
        // Changed to assign EventViewModel instead of Event
        selectedEvent = selectedItems.FirstOrDefault();
    }

    private void CloseEventDetailsDialog()
    {
        selectedEvent = null;
    }

    private void OpenEmailDialog(PureEmailViewBasicModel PureEmailViewBasicModel)
    {
        Console.WriteLine($"OpenEmailDialog");

        selectedEmail = PureEmailViewBasicModel;
        Console.WriteLine($"Selected email: {selectedEmail?.Subject}");
    }

    // Changed parameter type from 'Event' to 'EventViewModel'
    private void OpenEventDialog(EventViewModel evtViewModel)
    {
        selectedEvent = evtViewModel;
    }
   private async Task DeleteEventAsync(string eventId)
    {
        try
        {
            // Confirm the deletion with the user using JS confirm dialog
            var confirmed = await JS.InvokeAsync<bool>("confirm", "Are you sure you want to delete this event?");
            if (!confirmed)
            {
                return;
            }

            await graphService.DeleteCalendarEventAsync(eventId);

            // Remove the event from the UI using the correct property
            calendarEventsWithComputedProperties.RemoveAll(e => e.Id == eventId);
            StateHasChanged(); // Update the UI

            // Optionally, log the successful deletion
            Console.WriteLine($"Event with ID {eventId} deleted successfully.");

        }
        catch (Exception ex)
        {
            // Replace Console.WriteLine with ILogger for better logging
            Console.WriteLine($"Error deleting event: {ex.Message}");

            // Use JS alert to notify the user of the error
            await JS.InvokeVoidAsync("alert", $"Error deleting event: {ex.Message}");
        }
    }

// Open and Close methods for Contact Dialog
    private void OpenContactDialog(ContactViewModel contactViewModel)
    {
        selectedContact = contactViewModel;
        isContactDetailsDialogVisible = true;
    }
    private void CloseContactDialog()
    {
        isContactDetailsDialogVisible = false;
        selectedContact = null;
    }

@code {
    private bool IsAtLeastOneContactFieldFilled()
    {
        return !string.IsNullOrWhiteSpace(selectedContact.GivenName) ||
            !string.IsNullOrWhiteSpace(selectedContact.Surname) ||
            !string.IsNullOrWhiteSpace(selectedContact.EmailAddress) ||
            !string.IsNullOrWhiteSpace(selectedContact.MobilePhone) ||
            !string.IsNullOrWhiteSpace(selectedContact.JobTitle) ||
            !string.IsNullOrWhiteSpace(selectedContact.CompanyName) ||
            (selectedContact.BusinessAddress != null &&
            (!string.IsNullOrWhiteSpace(selectedContact.BusinessAddress.Street) ||
                !string.IsNullOrWhiteSpace(selectedContact.BusinessAddress.City) ||
                !string.IsNullOrWhiteSpace(selectedContact.BusinessAddress.State) ||
                !string.IsNullOrWhiteSpace(selectedContact.BusinessAddress.PostalCode) ||
                !string.IsNullOrWhiteSpace(selectedContact.BusinessAddress.CountryOrRegion)));
    }
   
private async Task SaveContactAsync()
{
    try
    {
        Contact contactToSave;
        if (string.IsNullOrEmpty(selectedContact.Id))
        {
            // This is a new contact
            contactToSave = new Contact
            {
                GivenName = selectedContact.GivenName,
                Surname = selectedContact.Surname,
                JobTitle = selectedContact.JobTitle,
                CompanyName = selectedContact.CompanyName,
                EmailAddresses = new List<TypedEmailAddress>
                {
                    new TypedEmailAddress
                    {
                        Address = selectedContact.EmailAddress,
                        Type = EmailType.Other // You can change this to the appropriate type if needed
                    }
                },
                Phones = new List<Phone>
                {
                    new Phone
                    {
                        Number = selectedContact.MobilePhone,
                        Type = PhoneType.Mobile
                    }
                },
                PostalAddresses = new List<PhysicalAddress>
                {
                    new PhysicalAddress
                    {
                        Street = selectedContact.BusinessAddress?.Street,
                        City = selectedContact.BusinessAddress?.City,
                        State = selectedContact.BusinessAddress?.State,
                        PostalCode = selectedContact.BusinessAddress?.PostalCode,
                        CountryOrRegion = selectedContact.BusinessAddress?.CountryOrRegion,
                        Type = PhysicalAddressType.Business
                    }
                }
            };

            var newContact = await graphService.AddContactAsync(contactToSave);
            contactsWithComputedProperties.Add(new ContactViewModel(newContact));
        }
        else
        {
            // This is an existing contact
            contactToSave = new Contact
            {
                Id = selectedContact.Id,
                GivenName = selectedContact.GivenName,
                Surname = selectedContact.Surname,
                JobTitle = selectedContact.JobTitle,
                CompanyName = selectedContact.CompanyName,
                Phones = new List<Phone>
                {
                    new Phone
                    {
                        Number = selectedContact.MobilePhone,
                        Type = PhoneType.Mobile
                    }
                },
                PostalAddresses = new List<PhysicalAddress>
                {
                    new PhysicalAddress
                    {
                        Street = selectedContact.BusinessAddress?.Street,
                        City = selectedContact.BusinessAddress?.City,
                        State = selectedContact.BusinessAddress?.State,
                        PostalCode = selectedContact.BusinessAddress?.PostalCode,
                        CountryOrRegion = selectedContact.BusinessAddress?.CountryOrRegion,
                        Type = PhysicalAddressType.Business
                    }
                }
            };

            var updatedContact = await graphService.UpdateContactAsync(selectedContact.Id, contactToSave);
            var index = contactsWithComputedProperties.FindIndex(c => c.Id == updatedContact.Id);
            if (index != -1)
            {
                contactsWithComputedProperties[index] = new ContactViewModel(updatedContact);
            }
        }

        CloseContactDialog();
        StateHasChanged();
    }
    catch (Exception ex)
    {
        Console.WriteLine($"Error saving contact: {ex.Message}");
    }
}
private string GetAddressFormatted(AITGraph.Sdk.Models.PhysicalAddress address)
        {
            if (address == null) return "N/A";

            var components = new List<string>
            {
                address.Street, address.City, address.State, address.PostalCode, address.CountryOrRegion
            }.Where(c => !string.IsNullOrWhiteSpace(c));

            return components.Any() ? string.Join(", ", components) : "N/A";
        }
    }

private void OpenNewContactDialog()
{
    selectedContact = new ContactViewModel(new Contact());
    isContactDetailsDialogVisible = true;
    StateHasChanged(); // Ensure the UI updates
}

private bool isDeleting = false;


private async Task DeleteContactAsync(string contactId)
{
    try
    {
        var confirmed = await JS.InvokeAsync<bool>("confirm", "Are you sure you want to delete this contact?");
        if (!confirmed)
        {
            return;
        }

        isDeleting = true;
        StateHasChanged();

        await graphService.DeleteContactAsync(contactId);
        contactsWithComputedProperties.RemoveAll(c => c.Id == contactId);
    }
    catch (Exception ex)
    {
        Console.WriteLine($"Error deleting contact: {ex.Message}");
        await JS.InvokeVoidAsync("alert", $"Error deleting contact: {ex.Message}");
    }
    finally
    {
        isDeleting = false;
        StateHasChanged();
    }
}


    HorizontalAlignment Horizontal;
    VerticalAlignment Vertical;
    

}

@code {

    private DateTime? newEventStartDate { get; set; } = DateTime.Now;
    private string newEventStartTime { get; set; } = DateTime.Now.ToString("HH:mm");

    private DateTime? newEventEndDate { get; set; } = DateTime.Now.AddMinutes(30);
    private string newEventEndTime { get; set; } = DateTime.Now.AddMinutes(30).ToString("HH:mm");

    // Model for creating new event
    private Event newEvent = new Event
    {
        Start = new DateTimeTimeZone(),
        End = new DateTimeTimeZone(),
    };
    
    private bool isEventDialogVisible = false;
    
    // Open event creation dialog
    private void OpenNewEventDialog()
    {
        // Set current time as start and round it to the next 30-minute interval
        var startDateTime = RoundToNext30MinuteInterval(DateTime.Now); 
        var endDateTime = startDateTime.AddMinutes(30); // End time 30 minutes later

        // Initialize the time intervals for the dropdown
        timeIntervals = GenerateTimeIntervals();

        // Find the closest intervals that match the start and end times
        selectedStartTime = timeIntervals.FirstOrDefault(t => t == startDateTime.ToString("HH:mm"));
        selectedEndTime = timeIntervals.FirstOrDefault(t => t == endDateTime.ToString("HH:mm"));

        // Initialize a new event with proper Start, End, Location, and Attendees values
        newEvent = new Event
        {
            Subject = "", // Set an initial empty subject to prevent null errors
            Start = new DateTimeTimeZone
            {
                DateTime = startDateTime.ToString("yyyy-MM-ddTHH:mm:ss"), // Local start date and time
                TimeZone = TimeZoneInfo.Local.Id // Use the local time zone
            },
            End = new DateTimeTimeZone
            {
                DateTime = endDateTime.ToString("yyyy-MM-ddTHH:mm:ss"), // Local end date and time (30 mins later)
                TimeZone = TimeZoneInfo.Local.Id // Use the local time zone
            },
            Location = new Location
            {
                DisplayName = "Microsoft Teams Meeting" // Set an initial empty location
            },
            // Set the event description
            Body = new ItemBody
            {
                Content = ""
            },
            Attendees = new List<Attendee>() // Initialize with an empty attendees list
        };

        attendeesInput = ""; // Clear attendees input
        isEventDialogVisible = true;
    }
    private string clipboardContent = "";

    private async Task PasteClipboardContentIntoVariable()
    {
        // Call the JavaScript function to get clipboard content
        clipboardContent = await JS.InvokeAsync<string>("getClipboardText");

        // You can now use clipboardContent in your logic
        Console.WriteLine("Clipboard content: " + clipboardContent);
    }
    private DateTime RoundToNext30MinuteInterval(DateTime dateTime)
    {
        // Round the current time to the next 30-minute interval
        var minutes = dateTime.Minute;
        var adjustment = minutes % 30 == 0 ? 0 : 30 - (minutes % 30);
        return dateTime.AddMinutes(adjustment).AddSeconds(-dateTime.Second); // Remove seconds to clean time
    }


    private List<string> timeIntervals;
    private string selectedStartTime { get; set; }
    private string selectedEndTime { get; set; }

    private List<string> GenerateTimeIntervals()
    {
        var intervals = new List<string>();
        var start = new TimeSpan(0, 0, 0);  // 00:00
        var end = new TimeSpan(23, 59, 0);  // 23:59
        var increment = TimeSpan.FromMinutes(30);  // 30-minute intervals

        for (var time = start; time <= end; time = time.Add(increment))
        {
            intervals.Add(time.ToString(@"hh\:mm"));
        }

        return intervals;
    }
    // Close event creation dialog
    private void CloseNewEventDialog()
    {
        isEventDialogVisible = false;
    }

    private string newEventBody { get; set; } = ""; // Store the body content
    private string attendeesInput { get; set; } = string.Empty; // Holds attendee emails input

    private bool IsFormValid()
    {
        // Ensure newEvent is not null before proceeding
        if (newEvent == null)
        {
            Console.WriteLine("Event object is null.");
            return false;
        }

        // Validate Subject: it must not be empty
        bool hasValidSubject = !string.IsNullOrWhiteSpace(newEvent.Subject);
        if (!hasValidSubject)
        {
            Console.WriteLine("Subject is missing.");
        }

        // Validate StartDate and EndDate: they must have values
        bool hasValidDates = newEventStartDate.HasValue && newEventEndDate.HasValue;
        if (!hasValidDates)
        {
            Console.WriteLine("Start or End date is missing.");
        }

        // Ensure Start and End times are not empty and End time is after Start time
        if (hasValidDates && (!string.IsNullOrWhiteSpace(selectedStartTime) && !string.IsNullOrWhiteSpace(selectedEndTime)))
        {
            if (DateTimeOffset.TryParse($"{newEventStartDate.Value:yyyy-MM-dd}T{selectedStartTime}", out var startDateTimeParsed) &&
                DateTimeOffset.TryParse($"{newEventEndDate.Value:yyyy-MM-dd}T{selectedEndTime}", out var endDateTimeParsed))
            {
                if (endDateTimeParsed <= startDateTimeParsed)
                {
                    Console.WriteLine("End time must be after Start time.");
                    return false;
                }
            }
            else
            {
                Console.WriteLine("Invalid Start or End time format.");
                return false;
            }
        }
        else
        {
            Console.WriteLine("Start time or End time is missing.");
            return false;
        }

        // Validate Location: it must not be empty
        bool hasValidLocation = !string.IsNullOrWhiteSpace(newEvent.Location?.DisplayName);
        if (!hasValidLocation)
        {
            Console.WriteLine("Location is missing.");
        }

        // Validate Attendees: there must be at least one valid attendee
        bool hasValidAttendees = !string.IsNullOrWhiteSpace(attendeesInput) &&
                                attendeesInput.Split(',')
                                            .Select(email => email.Trim())
                                            .Any(email => !string.IsNullOrWhiteSpace(email));
        if (!hasValidAttendees)
        {
            Console.WriteLine("At least one valid attendee is required.");
        }

        // Validate Body: it must not be empty
        bool hasValidBody = !string.IsNullOrWhiteSpace(newEventBody);
        if (!hasValidBody)
        {
            Console.WriteLine("Event description (Body) is missing.");
        }

        // Ensure all fields are valid
        bool isValid = hasValidSubject && hasValidDates && hasValidLocation && hasValidAttendees && hasValidBody;
        if (!isValid)
        {
            Console.WriteLine("Form validation failed. Please ensure all required fields are correctly filled.");
        }

        return isValid;
    }
private async Task SaveEventAsync()
{
    try
    {
        // Validate the form before proceeding
        if (!IsFormValid())
        {
            error = "Please ensure all required fields are filled out correctly.";
            Console.WriteLine(error);
            return;
        }

        // Ensure newEvent is not null
        newEvent ??= new Event();

        // Set the event subject
        newEvent.Subject = string.IsNullOrWhiteSpace(newEvent.Subject) ? "No Subject" : newEvent.Subject;

        // Combine date and time for Start
        if (newEventStartDate.HasValue && !string.IsNullOrWhiteSpace(selectedStartTime))
        {
            newEvent.Start.DateTime = $"{newEventStartDate.Value:yyyy-MM-dd}T{selectedStartTime}";
            newEvent.Start.TimeZone = TimeZoneInfo.Local.Id;
        }

        // Combine date and time for End
        if (newEventEndDate.HasValue && !string.IsNullOrWhiteSpace(selectedEndTime))
        {
            newEvent.End.DateTime = $"{newEventEndDate.Value:yyyy-MM-dd}T{selectedEndTime}";
            newEvent.End.TimeZone = TimeZoneInfo.Local.Id;
        }

        // Ensure the end time is after the start time
        if (DateTimeOffset.TryParse(newEvent.Start.DateTime, out var startDateTimeParsed) &&
            DateTimeOffset.TryParse(newEvent.End.DateTime, out var endDateTimeParsed))
        {
            if (endDateTimeParsed <= startDateTimeParsed)
            {
                error = "End time must be after the start time.";
                Console.WriteLine(error);
                return;
            }
        }
        else
        {
            error = "Invalid date/time format.";
            Console.WriteLine(error);
            return;
        }

        // Set the location
        newEvent.Location = new Location
        {
            DisplayName = !string.IsNullOrWhiteSpace(newEvent.Location?.DisplayName) 
                ? newEvent.Location.DisplayName 
                : "No location"
        };

        // Process attendees input
        if (!string.IsNullOrWhiteSpace(attendeesInput))
        {
            var attendeesEmails = attendeesInput.Split(',')
                                                .Select(email => email.Trim())
                                                .Where(email => !string.IsNullOrWhiteSpace(email))
                                                .ToList();

            newEvent.Attendees = attendeesEmails.Select(email => new Attendee
            {
                EmailAddress = new EmailAddress { Address = email },
                Type = AttendeeType.Required
            }).ToList();
        }
        else
        {
            newEvent.Attendees = new List<Attendee>();
        }

        // Set the event description
        newEvent.Body = new ItemBody
        {
            ContentType = BodyType.Text,
            Content = string.IsNullOrWhiteSpace(newEventBody) ? "No description available" : newEventBody
        };

        // Call the service to create the event
        var result = await graphService.CreateCalendarEventAsync(newEvent);

        if (result.CreatedEvent != null)
        {
            // Log the event properties for verification
            Console.WriteLine("Event Created:");
            Console.WriteLine($"Subject: {result.CreatedEvent.Subject}");
            Console.WriteLine($"Start: {result.CreatedEvent.Start.DateTime} ({result.CreatedEvent.Start.TimeZone})");
            Console.WriteLine($"End: {result.CreatedEvent.End.DateTime} ({result.CreatedEvent.End.TimeZone})");
            Console.WriteLine($"Location: {result.CreatedEvent.Location?.DisplayName}");
            Console.WriteLine($"Attendees: {string.Join(", ", result.CreatedEvent.Attendees.Select(a => a.EmailAddress.Address))}");
            Console.WriteLine($"BodyPreview: {result.CreatedEvent.BodyPreview}");

            // Add the created event to the list with computed properties
            calendarEventsWithComputedProperties.Add(new EventViewModel
            {
                Id = result.CreatedEvent.Id,
                Subject = result.CreatedEvent.Subject,
                StartDateTimeFormatted = DateTimeOffset.Parse(result.CreatedEvent.Start.DateTime).ToLocalTime().ToString("g", CultureInfo.CurrentCulture),
                EndDateTimeFormatted = DateTimeOffset.Parse(result.CreatedEvent.End.DateTime).ToLocalTime().ToString("g", CultureInfo.CurrentCulture),
                Location = result.CreatedEvent.Location,
                Attendees = result.CreatedEvent.Attendees,
                BodyPreview = result.CreatedEvent.BodyPreview,
                WebLink = result.CreatedEvent.WebLink
            });

            // Close the dialog and refresh the state
            CloseNewEventDialog();
            StateHasChanged();
        }
        else
        {
            error = result.ErrorMessage ?? "An error occurred while creating the event.";
            Console.WriteLine(error);
        }
    }
    catch (Exception ex)
    {
        error = $"Error creating event: {ex.Message}";
        Console.WriteLine(error);
    }
}
}
@code {
    private async Task SaveEmailToDatabase()
    {
        isMessageSaving = true;

        try
        {
            // Ensure that email has valid From and To fields
            var fromEmail = selectedEmail.From != null 
                ? $"{selectedEmail.From.Name} <{selectedEmail.From.EmailAddress}>"
                : "Unknown sender";

            var toEmails = selectedEmail.ToRecipients != null && selectedEmail.ToRecipients.Any()
                ? string.Join(", ", selectedEmail.ToRecipients.Select(r => $"{r.Name} <{r.EmailAddress}>"))
                : "No recipients";

            // Combine From and To for Attendees
            var attendees = fromEmail + (toEmails != "No recipients" ? $", {toEmails}" : "");

            // Parse the Received DateTime
            var receivedDateTime = DateTimeOffset.TryParse(selectedEmail.ReceivedDateTime, out var dt)
                ? dt.ToLocalTime().ToString("g")
                : "N/A";

            // Get the plain text version of the email body
            var bodyContent = string.IsNullOrEmpty(GetPlainText(selectedEmail))
                ? "No body content available."
                : GetPlainText(selectedEmail);

            // Prepare the email message
            var email = new EmailMessage(
                tenantId: currentUserTenantID,
                userId: currentUserIdentityID,
                categoryIds:  new List<string> { "work", "important" }, // selectedEmail.CategoryIds ??
                subject: selectedEmail.Subject ?? "No subject"
            )
            {
                BodyContent = selectedEmail.BodyContent ?? bodyContent,
                BodyContentText = bodyContent,
                BodyContentType = selectedEmail.BodyContentType ?? "HTML",
                HasAttachments = selectedEmail.HasAttachments,
                Importance = selectedEmail.Importance ?? "Normal",
                Priority = selectedEmail.Priority ?? "Normal",
                IsRead = selectedEmail.IsRead,
                ConversationId = selectedEmail.ConversationId ?? Guid.NewGuid().ToString(),
                WebLink = selectedEmail.WebLink,
                From = new EmailMessageRecipientInfo
                {
                    Name = selectedEmail.From?.Name ?? "Unknown",
                    EmailAddress = selectedEmail.From?.EmailAddress ?? "unknown@example.com"
                },
                ToRecipients = selectedEmail.ToRecipients?.Select(r => new EmailMessageRecipientInfo { Name = r.Name, EmailAddress = r.EmailAddress }).ToList() ?? new List<EmailMessageRecipientInfo>(),
                CcRecipients = selectedEmail.CcRecipients?.Select(r => new EmailMessageRecipientInfo { Name = r.Name, EmailAddress = r.EmailAddress }).ToList() ?? new List<EmailMessageRecipientInfo>(),
                BccRecipients = selectedEmail.BccRecipients?.Select(r => new EmailMessageRecipientInfo { Name = r.Name, EmailAddress = r.EmailAddress }).ToList() ?? new List<EmailMessageRecipientInfo>(),
                ReceivedDateTime = selectedEmail.ReceivedDateTime
            };

            // Call the upsert function to save the email
            await chatService.UpsertEmailMessageAsync(
                email);
            Console.WriteLine("Email upserted successfully.");

            await cosmosDbService.QueryEmailMessagesAsync(
                currentUserTenantID,
                currentUserIdentityID,
                ""); // "" for all categories


        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error upserting email: {ex.Message}");
        }
        finally
        {
            isMessageSaving = false;
        }
    }



    private async Task CopyEmailToClipboard()
    {
        // Ensure that email has valid From and To fields
        var fromEmail = $"{selectedEmail.From.Name} <{selectedEmail.From.EmailAddress}>";

        var toEmails = selectedEmail.ToRecipients != null && selectedEmail.ToRecipients.Any()
            ? string.Join(", ", selectedEmail.ToRecipients.Select(r => $"{r.Name} <{r.EmailAddress}>"))
            : "No recipients";

        // Combine From and To for Attendees
        var attendees = fromEmail + (toEmails != "No recipients" ? $", {toEmails}" : "");

        var receivedDateTime = DateTimeOffset.TryParse(selectedEmail.ReceivedDateTime, out var dt) 
            ? dt.ToLocalTime().ToString("g") 
            : "N/A";
        // Get the plain text version of the email body
        var bodyContent = string.IsNullOrEmpty(GetPlainText(selectedEmail))
            ? "No body content available."
            : GetPlainText(selectedEmail);

        // Prepare the email content to be copied
        var clipboardContent = $"Subject: {selectedEmail.Subject ?? "No subject"}\n" +
                            $"From: {fromEmail}\n" +
                            $"To: {toEmails}\n" +
                            $"Attendees: {attendees}\n" +  // Adding Attendees field
                            $"Received: {receivedDateTime}\n\n" +
                            $"Body:\n{bodyContent}";

        // Output for debugging (optional)
        Console.WriteLine("Clipboard Content:\n" + clipboardContent);

        // Call the JavaScript function to copy the content to the clipboard
        await JS.InvokeVoidAsync("copyToClipboard", clipboardContent);
    }



    // Method to remove HTML tags from email body content
    private string GetPlainText(PureEmailViewBasicModel email)
    {
        if (email.BodyContentType == "Html")
        {
            // Remove HTML comments
            var plainText = System.Text.RegularExpressions.Regex.Replace(email.BodyContent, "<!--.*?-->", string.Empty, System.Text.RegularExpressions.RegexOptions.Singleline);

            // Remove HTML tags
            plainText = System.Text.RegularExpressions.Regex.Replace(plainText, "<.*?>", string.Empty);

            // Decode HTML entities (e.g., &nbsp; -> space)
            plainText = System.Net.WebUtility.HtmlDecode(plainText);

            // Normalize and trim excess whitespace
            plainText = System.Text.RegularExpressions.Regex.Replace(plainText, @"\s+", " ").Trim();

            return plainText;
        }

        return email.BodyContent;
    }


}
@code {
    private async Task AutoResizeTextArea()
    {
        // Use JavaScript to resize the textarea dynamically
        await JS.InvokeVoidAsync("autoResizeTextarea", "fluentTextArea");
    }
}

@code {
private async Task RefreshMessagesAsync()
{
    isMessagesLoading = true;  // Show loading state during refresh
    error = null;

    try
    {
        // Fetch the latest messages (adjust the count as needed)
        string input = "fetch latest 5 emails";
        //var emailsJson = await azureOpenAIHandler.ShowEmailsAsync(input);
        string emailsJson = await graphService.GetRecentMessagesPureEmailViewBasicModelAsync(10);

            if (!string.IsNullOrWhiteSpace(emailsJson))
            {
                // Deserialize using Newtonsoft.Json into EmailResult
                var emailList = JsonConvert.DeserializeObject<PureEmailResult>(emailsJson);

                if (emailList != null && emailList.Emails.Any())
                {
                    emailsWithComputedProperties = emailList.Emails;
                }
                else
                {
                    emailsWithComputedProperties = new List<PureEmailViewBasicModel>();
                    error = "No emails found.";
                }
            }
            else
            {
                emailsWithComputedProperties = new List<PureEmailViewBasicModel>();
                error = "Failed to retrieve emails.";
            }
    }
    catch (Newtonsoft.Json.JsonException jsonEx)
    {
        error = $"Failed to parse messages: {jsonEx.Message}";
        emailsWithComputedProperties.Clear();
    }
    catch (Exception ex)
    {
        error = $"Error refreshing messages: {ex.Message}";
        emailsWithComputedProperties.Clear();
    }
    finally
    {
        isMessagesLoading = false;  // Hide loading state
    }

    // Ensure the UI updates
    StateHasChanged();
}

    private async Task DeleteEmail(PureEmailViewBasicModel PureEmailViewBasicModel)
    {
        if (PureEmailViewBasicModel == null || string.IsNullOrEmpty(PureEmailViewBasicModel.Id))
        {
            return;
        }

        bool confirmDelete = await ConfirmDeleteAsync(); // Optional: Ask user for confirmation before deletion

        if (confirmDelete)
        {
            try
            {
                await graphService.DeleteEmailMessageAsync(PureEmailViewBasicModel.Id);

                // Remove the deleted email from the list and update the grid
                emailsWithComputedProperties.Remove(PureEmailViewBasicModel);
            }
            catch (Exception ex)
            {
                // Handle or log the exception
                Console.WriteLine($"Error deleting email: {ex.Message}");
            }
        }
    }
    private async Task<bool> ConfirmDeleteAsync()
    {
        // Wrap the string argument in an object array
        return await JS.InvokeAsync<bool>("confirm", new object[] { "Are you sure you want to delete this email?" });
    }


}

@code {

private async Task AIOrganizerAsync()
{
    isAIOrganizerLoading = true;  // Show loading state during refresh
    error = null;

    try
    {
        // Fetch the latest messages (adjust the count as needed)
        string input = "fetch latest 5 emails";
        var emailsJson = await azureOpenAIHandler.ShowEmailsAsync(input);
        //string emailsJson = await graphService.GetRecentMessagesPureEmailViewBasicModelAsync(10);

            if (!string.IsNullOrWhiteSpace(emailsJson))
            {
                // Deserialize using Newtonsoft.Json into EmailResult
                var emailList = JsonConvert.DeserializeObject<PureEmailResult>(emailsJson);

                if (emailList != null && emailList.Emails.Any())
                {
                    emailsWithComputedProperties = emailList.Emails;
                }
                else
                {
                    emailsWithComputedProperties = new List<PureEmailViewBasicModel>();
                    error = "No emails found.";
                }
            }
            else
            {
                emailsWithComputedProperties = new List<PureEmailViewBasicModel>();
                error = "Failed to retrieve emails.";
            }
    }
    catch (Newtonsoft.Json.JsonException jsonEx)
    {
        error = $"Failed to parse messages: {jsonEx.Message}";
        emailsWithComputedProperties.Clear();
    }
    catch (Exception ex)
    {
        error = $"Error refreshing messages: {ex.Message}";
        emailsWithComputedProperties.Clear();
    }
    finally
    {
        isAIOrganizerLoading = false;  // Hide loading state
    }

    // Ensure the UI updates
    StateHasChanged();
}

}
@code {
       // Helper method to convert Importance int to text
    private string GetImportanceText(EventImportance importance)
    {
        return importance switch
        {
            EventImportance.Low => "Low",
            EventImportance.Normal => "Normal",
            EventImportance.High => "High",
            _ => "Unknown"
        };
    }
    private string FormatReceivedDateTime(string receivedDateTime)
    {
        if (DateTime.TryParse(receivedDateTime, out var parsedDate))
        {
            return parsedDate.ToString("MM/dd/yyyy hh:mm tt");
        }
        return receivedDateTime; // Return original string if parsing fails
    }

       private void OpenConfirmModal(string eventId)
    {
        //eventIdToDelete = eventId;
        //isConfirmModalOpen = true;
    }

    /// <summary>
    /// Formats a nullable DateTimeOffset into a string based on the provided format.
    /// Returns "N/A" if the date is null.
    /// </summary>
    /// <param name="date">The nullable DateTimeOffset to format.</param>
    /// <param name="format">The format string (e.g., "d" for short date, "t" for short time).</param>
    /// <returns>A formatted date string or "N/A".</returns>
    private string FormatDate(DateTimeOffset? date, string format)
    {
        return date.HasValue 
            ? date.Value.ToLocalTime().ToString(format, CultureInfo.CurrentCulture) 
            : "N/A";
    }
}