// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace CognitiveServices.Sdk.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.19.0")]
    #pragma warning disable CS1591
    public partial class ContractualRulesAttribution : global::CognitiveServices.Sdk.Models.ContractualRulesContractualRule, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>A Boolean value that determines whether the contents of the rule must be placed in close proximity to the field that the rule applies to. If true, the contents must be placed in close proximity. If false, or this field does not exist, the contents may be placed at the caller&apos;s discretion.</summary>
        public bool? MustBeCloseToContent { get; private set; }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::CognitiveServices.Sdk.Models.ContractualRulesAttribution"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static new global::CognitiveServices.Sdk.Models.ContractualRulesAttribution CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            var mappingValue = parseNode.GetChildNode("_type")?.GetStringValue();
            return mappingValue switch
            {
                "ContractualRulesLicenseAttribution" => new global::CognitiveServices.Sdk.Models.ContractualRulesLicenseAttribution(),
                "ContractualRulesLinkAttribution" => new global::CognitiveServices.Sdk.Models.ContractualRulesLinkAttribution(),
                "ContractualRulesMediaAttribution" => new global::CognitiveServices.Sdk.Models.ContractualRulesMediaAttribution(),
                "ContractualRulesTextAttribution" => new global::CognitiveServices.Sdk.Models.ContractualRulesTextAttribution(),
                _ => new global::CognitiveServices.Sdk.Models.ContractualRulesAttribution(),
            };
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public override IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>(base.GetFieldDeserializers())
            {
                { "mustBeCloseToContent", n => { MustBeCloseToContent = n.GetBoolValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public override void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            base.Serialize(writer);
        }
    }
}
#pragma warning restore CS0618
