// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace AITGraph.Sdk.Models
{
    /// <summary>
    /// The user experience analytics resource performance entity.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class UserExperienceAnalyticsResourcePerformance : global::AITGraph.Sdk.Models.Entity, IParsable
    {
        /// <summary>AverageSpikeTimeScore of a device or a model type. Valid values 0 to 100</summary>
        public int? AverageSpikeTimeScore { get; set; }
        /// <summary>CPU spike time in percentage. Valid values 0 to 100</summary>
        public double? CpuSpikeTimePercentage { get; set; }
        /// <summary>Threshold of cpuSpikeTimeScore. Valid values 0 to 100</summary>
        public double? CpuSpikeTimePercentageThreshold { get; set; }
        /// <summary>The user experience analytics device CPU spike time score. Valid values 0 to 100</summary>
        public int? CpuSpikeTimeScore { get; set; }
        /// <summary>User experience analytics summarized device count.</summary>
        public long? DeviceCount { get; set; }
        /// <summary>The id of the device.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? DeviceId { get; set; }
#nullable restore
#else
        public string DeviceId { get; set; }
#endif
        /// <summary>The name of the device.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? DeviceName { get; set; }
#nullable restore
#else
        public string DeviceName { get; set; }
#endif
        /// <summary>Resource performance score of a specific device. Valid values 0 to 100</summary>
        public int? DeviceResourcePerformanceScore { get; set; }
        /// <summary>The user experience analytics device manufacturer.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Manufacturer { get; set; }
#nullable restore
#else
        public string Manufacturer { get; set; }
#endif
        /// <summary>The user experience analytics device model.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Model { get; set; }
#nullable restore
#else
        public string Model { get; set; }
#endif
        /// <summary>RAM spike time in percentage. Valid values 0 to 100</summary>
        public double? RamSpikeTimePercentage { get; set; }
        /// <summary>Threshold of ramSpikeTimeScore. Valid values 0 to 100</summary>
        public double? RamSpikeTimePercentageThreshold { get; set; }
        /// <summary>The user experience analytics device RAM spike time score. Valid values 0 to 100</summary>
        public int? RamSpikeTimeScore { get; set; }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::AITGraph.Sdk.Models.UserExperienceAnalyticsResourcePerformance"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static new global::AITGraph.Sdk.Models.UserExperienceAnalyticsResourcePerformance CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::AITGraph.Sdk.Models.UserExperienceAnalyticsResourcePerformance();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public override IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>(base.GetFieldDeserializers())
            {
                { "averageSpikeTimeScore", n => { AverageSpikeTimeScore = n.GetIntValue(); } },
                { "cpuSpikeTimePercentage", n => { CpuSpikeTimePercentage = n.GetDoubleValue(); } },
                { "cpuSpikeTimePercentageThreshold", n => { CpuSpikeTimePercentageThreshold = n.GetDoubleValue(); } },
                { "cpuSpikeTimeScore", n => { CpuSpikeTimeScore = n.GetIntValue(); } },
                { "deviceCount", n => { DeviceCount = n.GetLongValue(); } },
                { "deviceId", n => { DeviceId = n.GetStringValue(); } },
                { "deviceName", n => { DeviceName = n.GetStringValue(); } },
                { "deviceResourcePerformanceScore", n => { DeviceResourcePerformanceScore = n.GetIntValue(); } },
                { "manufacturer", n => { Manufacturer = n.GetStringValue(); } },
                { "model", n => { Model = n.GetStringValue(); } },
                { "ramSpikeTimePercentage", n => { RamSpikeTimePercentage = n.GetDoubleValue(); } },
                { "ramSpikeTimePercentageThreshold", n => { RamSpikeTimePercentageThreshold = n.GetDoubleValue(); } },
                { "ramSpikeTimeScore", n => { RamSpikeTimeScore = n.GetIntValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public override void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            base.Serialize(writer);
            writer.WriteIntValue("averageSpikeTimeScore", AverageSpikeTimeScore);
            writer.WriteDoubleValue("cpuSpikeTimePercentage", CpuSpikeTimePercentage);
            writer.WriteDoubleValue("cpuSpikeTimePercentageThreshold", CpuSpikeTimePercentageThreshold);
            writer.WriteIntValue("cpuSpikeTimeScore", CpuSpikeTimeScore);
            writer.WriteLongValue("deviceCount", DeviceCount);
            writer.WriteStringValue("deviceId", DeviceId);
            writer.WriteStringValue("deviceName", DeviceName);
            writer.WriteIntValue("deviceResourcePerformanceScore", DeviceResourcePerformanceScore);
            writer.WriteStringValue("manufacturer", Manufacturer);
            writer.WriteStringValue("model", Model);
            writer.WriteDoubleValue("ramSpikeTimePercentage", RamSpikeTimePercentage);
            writer.WriteDoubleValue("ramSpikeTimePercentageThreshold", RamSpikeTimePercentageThreshold);
            writer.WriteIntValue("ramSpikeTimeScore", RamSpikeTimeScore);
        }
    }
}
#pragma warning restore CS0618
