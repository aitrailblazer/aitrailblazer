// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace AITGraph.Sdk.Models.DeviceManagement
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class AlertRule : global::AITGraph.Sdk.Models.Entity, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>The rule template of the alert event. The possible values are: cloudPcProvisionScenario, cloudPcImageUploadScenario, cloudPcOnPremiseNetworkConnectionCheckScenario, unknownFutureValue.</summary>
        public global::AITGraph.Sdk.Models.DeviceManagement.AlertRuleTemplate? AlertRuleTemplate { get; set; }
        /// <summary>The rule description.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Description { get; set; }
#nullable restore
#else
        public string Description { get; set; }
#endif
        /// <summary>The display name of the rule.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? DisplayName { get; set; }
#nullable restore
#else
        public string DisplayName { get; set; }
#endif
        /// <summary>The status of the rule that indicates whether the rule is enabled or disabled. If true, the rule is enabled; otherwise, the rule is disabled.</summary>
        public bool? Enabled { get; set; }
        /// <summary>Indicates whether the rule is a system rule. If true, the rule is a system rule; otherwise, the rule is a custom defined rule and can be edited. System rules are built-in and only a few properties can be edited.</summary>
        public bool? IsSystemRule { get; set; }
        /// <summary>The notification channels of the rule selected by the user.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::AITGraph.Sdk.Models.DeviceManagement.NotificationChannel>? NotificationChannels { get; set; }
#nullable restore
#else
        public List<global::AITGraph.Sdk.Models.DeviceManagement.NotificationChannel> NotificationChannels { get; set; }
#endif
        /// <summary>The severity of the rule. The possible values are: unknown, informational, warning, critical, unknownFutureValue.</summary>
        public global::AITGraph.Sdk.Models.DeviceManagement.RuleSeverityType? Severity { get; set; }
        /// <summary>The conditions to send alerts. For example, send alert when provisioning has failed for greater than or equal to 6 Cloud PCs.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::AITGraph.Sdk.Models.DeviceManagement.RuleThreshold? Threshold { get; set; }
#nullable restore
#else
        public global::AITGraph.Sdk.Models.DeviceManagement.RuleThreshold Threshold { get; set; }
#endif
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::AITGraph.Sdk.Models.DeviceManagement.AlertRule"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static new global::AITGraph.Sdk.Models.DeviceManagement.AlertRule CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::AITGraph.Sdk.Models.DeviceManagement.AlertRule();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public override IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>(base.GetFieldDeserializers())
            {
                { "alertRuleTemplate", n => { AlertRuleTemplate = n.GetEnumValue<global::AITGraph.Sdk.Models.DeviceManagement.AlertRuleTemplate>(); } },
                { "description", n => { Description = n.GetStringValue(); } },
                { "displayName", n => { DisplayName = n.GetStringValue(); } },
                { "enabled", n => { Enabled = n.GetBoolValue(); } },
                { "isSystemRule", n => { IsSystemRule = n.GetBoolValue(); } },
                { "notificationChannels", n => { NotificationChannels = n.GetCollectionOfObjectValues<global::AITGraph.Sdk.Models.DeviceManagement.NotificationChannel>(global::AITGraph.Sdk.Models.DeviceManagement.NotificationChannel.CreateFromDiscriminatorValue)?.AsList(); } },
                { "severity", n => { Severity = n.GetEnumValue<global::AITGraph.Sdk.Models.DeviceManagement.RuleSeverityType>(); } },
                { "threshold", n => { Threshold = n.GetObjectValue<global::AITGraph.Sdk.Models.DeviceManagement.RuleThreshold>(global::AITGraph.Sdk.Models.DeviceManagement.RuleThreshold.CreateFromDiscriminatorValue); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public override void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            base.Serialize(writer);
            writer.WriteEnumValue<global::AITGraph.Sdk.Models.DeviceManagement.AlertRuleTemplate>("alertRuleTemplate", AlertRuleTemplate);
            writer.WriteStringValue("description", Description);
            writer.WriteStringValue("displayName", DisplayName);
            writer.WriteBoolValue("enabled", Enabled);
            writer.WriteBoolValue("isSystemRule", IsSystemRule);
            writer.WriteCollectionOfObjectValues<global::AITGraph.Sdk.Models.DeviceManagement.NotificationChannel>("notificationChannels", NotificationChannels);
            writer.WriteEnumValue<global::AITGraph.Sdk.Models.DeviceManagement.RuleSeverityType>("severity", Severity);
            writer.WriteObjectValue<global::AITGraph.Sdk.Models.DeviceManagement.RuleThreshold>("threshold", Threshold);
        }
    }
}
#pragma warning restore CS0618
