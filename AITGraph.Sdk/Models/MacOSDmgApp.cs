// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace AITGraph.Sdk.Models
{
    /// <summary>
    /// Contains properties and inherited properties for the MacOS DMG App.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class MacOSDmgApp : global::AITGraph.Sdk.Models.MobileLobApp, IParsable
    {
        /// <summary>A value indicating whether the app&apos;s version will be used to detect the app after it is installed on a device. Set this to true for apps that use a self-update feature. Set this to false to install the app when it is not already installed on the device, or if the deploying app&apos;s version number does not match the version that&apos;s already installed on the device.</summary>
        public bool? IgnoreVersionDetection { get; set; }
        /// <summary>The list of apps expected to be installed by the DMG.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::AITGraph.Sdk.Models.MacOSIncludedApp>? IncludedApps { get; set; }
#nullable restore
#else
        public List<global::AITGraph.Sdk.Models.MacOSIncludedApp> IncludedApps { get; set; }
#endif
        /// <summary>The value for the minimum applicable operating system.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::AITGraph.Sdk.Models.MacOSMinimumOperatingSystem? MinimumSupportedOperatingSystem { get; set; }
#nullable restore
#else
        public global::AITGraph.Sdk.Models.MacOSMinimumOperatingSystem MinimumSupportedOperatingSystem { get; set; }
#endif
        /// <summary>The primary CFBundleIdentifier of the DMG.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? PrimaryBundleId { get; set; }
#nullable restore
#else
        public string PrimaryBundleId { get; set; }
#endif
        /// <summary>The primary CFBundleVersion of the DMG.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? PrimaryBundleVersion { get; set; }
#nullable restore
#else
        public string PrimaryBundleVersion { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::AITGraph.Sdk.Models.MacOSDmgApp"/> and sets the default values.
        /// </summary>
        public MacOSDmgApp() : base()
        {
            OdataType = "#microsoft.graph.macOSDmgApp";
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::AITGraph.Sdk.Models.MacOSDmgApp"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static new global::AITGraph.Sdk.Models.MacOSDmgApp CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::AITGraph.Sdk.Models.MacOSDmgApp();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public override IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>(base.GetFieldDeserializers())
            {
                { "ignoreVersionDetection", n => { IgnoreVersionDetection = n.GetBoolValue(); } },
                { "includedApps", n => { IncludedApps = n.GetCollectionOfObjectValues<global::AITGraph.Sdk.Models.MacOSIncludedApp>(global::AITGraph.Sdk.Models.MacOSIncludedApp.CreateFromDiscriminatorValue)?.AsList(); } },
                { "minimumSupportedOperatingSystem", n => { MinimumSupportedOperatingSystem = n.GetObjectValue<global::AITGraph.Sdk.Models.MacOSMinimumOperatingSystem>(global::AITGraph.Sdk.Models.MacOSMinimumOperatingSystem.CreateFromDiscriminatorValue); } },
                { "primaryBundleId", n => { PrimaryBundleId = n.GetStringValue(); } },
                { "primaryBundleVersion", n => { PrimaryBundleVersion = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public override void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            base.Serialize(writer);
            writer.WriteBoolValue("ignoreVersionDetection", IgnoreVersionDetection);
            writer.WriteCollectionOfObjectValues<global::AITGraph.Sdk.Models.MacOSIncludedApp>("includedApps", IncludedApps);
            writer.WriteObjectValue<global::AITGraph.Sdk.Models.MacOSMinimumOperatingSystem>("minimumSupportedOperatingSystem", MinimumSupportedOperatingSystem);
            writer.WriteStringValue("primaryBundleId", PrimaryBundleId);
            writer.WriteStringValue("primaryBundleVersion", PrimaryBundleVersion);
        }
    }
}
#pragma warning restore CS0618
