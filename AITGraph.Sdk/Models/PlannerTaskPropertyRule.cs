// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace AITGraph.Sdk.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class PlannerTaskPropertyRule : global::AITGraph.Sdk.Models.PlannerPropertyRule, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Rules and restrictions for applied categories. This value does not currently support overrides. Accepted values for the default rule and individual overrides are allow, block.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::AITGraph.Sdk.Models.PlannerFieldRules? AppliedCategories { get; set; }
#nullable restore
#else
        public global::AITGraph.Sdk.Models.PlannerFieldRules AppliedCategories { get; set; }
#endif
        /// <summary>Rules and restrictions for assignments. Allowed overrides are userCreated and applicationCreated. Accepted values for the default rule and individual overrides are allow, add, addSelf, addOther, remove, removeSelf, removeOther, block.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::AITGraph.Sdk.Models.PlannerFieldRules? Assignments { get; set; }
#nullable restore
#else
        public global::AITGraph.Sdk.Models.PlannerFieldRules Assignments { get; set; }
#endif
        /// <summary>Rules and restrictions for checklist. Allowed overrides are userCreated and applicationCreated. Accepted values for the default rule and individual overrides are allow, add, remove, update, check, reorder, block.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::AITGraph.Sdk.Models.PlannerFieldRules? CheckLists { get; set; }
#nullable restore
#else
        public global::AITGraph.Sdk.Models.PlannerFieldRules CheckLists { get; set; }
#endif
        /// <summary>Rules and restrictions for deleting the task. Accepted values are allow and block.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? Delete { get; set; }
#nullable restore
#else
        public List<string> Delete { get; set; }
#endif
        /// <summary>Rules and restrictions for changing the due date of the task. Accepted values are allow and block.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? DueDate { get; set; }
#nullable restore
#else
        public List<string> DueDate { get; set; }
#endif
        /// <summary>Rules and restrictions for moving the task between buckets or plans. Accepted values are allow, moveBetweenPlans, moveBetweenBuckets, and block.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? Move { get; set; }
#nullable restore
#else
        public List<string> Move { get; set; }
#endif
        /// <summary>Rules and restrictions for changing the notes of the task. Accepted values are allow and block.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? Notes { get; set; }
#nullable restore
#else
        public List<string> Notes { get; set; }
#endif
        /// <summary>Rules and restrictions for changing the order of the task. Accepted values are allow and block.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? Order { get; set; }
#nullable restore
#else
        public List<string> Order { get; set; }
#endif
        /// <summary>Rules and restrictions for changing the completion percentage of the task. Accepted values are allow, setToComplete, setToNotStarted, setToInProgress, and block.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? PercentComplete { get; set; }
#nullable restore
#else
        public List<string> PercentComplete { get; set; }
#endif
        /// <summary>Rules and restrictions for changing the preview type of the task. Accepted values are allow and block.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? PreviewType { get; set; }
#nullable restore
#else
        public List<string> PreviewType { get; set; }
#endif
        /// <summary>Rules and restrictions for changing the priority of the task. Accepted values are allow and block.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? Priority { get; set; }
#nullable restore
#else
        public List<string> Priority { get; set; }
#endif
        /// <summary>Rules and restrictions for references. Allowed overrides are userCreated and applicationCreated. Accepted values for the default rule and individual overrides are allow, add, remove, block.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::AITGraph.Sdk.Models.PlannerFieldRules? References { get; set; }
#nullable restore
#else
        public global::AITGraph.Sdk.Models.PlannerFieldRules References { get; set; }
#endif
        /// <summary>Rules and restrictions for changing the start date of the task. Accepted values are allow and block.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? StartDate { get; set; }
#nullable restore
#else
        public List<string> StartDate { get; set; }
#endif
        /// <summary>Rules and restrictions for changing the title of the task. Accepted values are allow and block.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? Title { get; set; }
#nullable restore
#else
        public List<string> Title { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::AITGraph.Sdk.Models.PlannerTaskPropertyRule"/> and sets the default values.
        /// </summary>
        public PlannerTaskPropertyRule() : base()
        {
            OdataType = "#microsoft.graph.plannerTaskPropertyRule";
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::AITGraph.Sdk.Models.PlannerTaskPropertyRule"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static new global::AITGraph.Sdk.Models.PlannerTaskPropertyRule CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::AITGraph.Sdk.Models.PlannerTaskPropertyRule();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public override IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>(base.GetFieldDeserializers())
            {
                { "appliedCategories", n => { AppliedCategories = n.GetObjectValue<global::AITGraph.Sdk.Models.PlannerFieldRules>(global::AITGraph.Sdk.Models.PlannerFieldRules.CreateFromDiscriminatorValue); } },
                { "assignments", n => { Assignments = n.GetObjectValue<global::AITGraph.Sdk.Models.PlannerFieldRules>(global::AITGraph.Sdk.Models.PlannerFieldRules.CreateFromDiscriminatorValue); } },
                { "checkLists", n => { CheckLists = n.GetObjectValue<global::AITGraph.Sdk.Models.PlannerFieldRules>(global::AITGraph.Sdk.Models.PlannerFieldRules.CreateFromDiscriminatorValue); } },
                { "delete", n => { Delete = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "dueDate", n => { DueDate = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "move", n => { Move = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "notes", n => { Notes = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "order", n => { Order = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "percentComplete", n => { PercentComplete = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "previewType", n => { PreviewType = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "priority", n => { Priority = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "references", n => { References = n.GetObjectValue<global::AITGraph.Sdk.Models.PlannerFieldRules>(global::AITGraph.Sdk.Models.PlannerFieldRules.CreateFromDiscriminatorValue); } },
                { "startDate", n => { StartDate = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "title", n => { Title = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public override void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            base.Serialize(writer);
            writer.WriteObjectValue<global::AITGraph.Sdk.Models.PlannerFieldRules>("appliedCategories", AppliedCategories);
            writer.WriteObjectValue<global::AITGraph.Sdk.Models.PlannerFieldRules>("assignments", Assignments);
            writer.WriteObjectValue<global::AITGraph.Sdk.Models.PlannerFieldRules>("checkLists", CheckLists);
            writer.WriteCollectionOfPrimitiveValues<string>("delete", Delete);
            writer.WriteCollectionOfPrimitiveValues<string>("dueDate", DueDate);
            writer.WriteCollectionOfPrimitiveValues<string>("move", Move);
            writer.WriteCollectionOfPrimitiveValues<string>("notes", Notes);
            writer.WriteCollectionOfPrimitiveValues<string>("order", Order);
            writer.WriteCollectionOfPrimitiveValues<string>("percentComplete", PercentComplete);
            writer.WriteCollectionOfPrimitiveValues<string>("previewType", PreviewType);
            writer.WriteCollectionOfPrimitiveValues<string>("priority", Priority);
            writer.WriteObjectValue<global::AITGraph.Sdk.Models.PlannerFieldRules>("references", References);
            writer.WriteCollectionOfPrimitiveValues<string>("startDate", StartDate);
            writer.WriteCollectionOfPrimitiveValues<string>("title", Title);
        }
    }
}
#pragma warning restore CS0618
