// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace AITGraph.Sdk.Models
{
    /// <summary>
    /// By providing configurations in this profile you can instruct the native email client on iOS devices to communicate with an Exchange server and get email, contacts, calendar, reminders, and notes. Furthermore, you can also specify how much email to sync and how often the device should sync.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class IosEasEmailProfileConfiguration : global::AITGraph.Sdk.Models.EasEmailProfileConfigurationBase, IParsable
    {
        /// <summary>Account name.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? AccountName { get; set; }
#nullable restore
#else
        public string AccountName { get; set; }
#endif
        /// <summary>Authentication method for this Email profile. Possible values are: usernameAndPassword, certificate, derivedCredential.</summary>
        public global::AITGraph.Sdk.Models.EasAuthenticationMethod? AuthenticationMethod { get; set; }
        /// <summary>Indicates whether or not to block moving messages to other email accounts.</summary>
        public bool? BlockMovingMessagesToOtherEmailAccounts { get; set; }
        /// <summary>Indicates whether or not to block sending email from third party apps.</summary>
        public bool? BlockSendingEmailFromThirdPartyApps { get; set; }
        /// <summary>Indicates whether or not to block syncing recently used email addresses, for instance - when composing new email.</summary>
        public bool? BlockSyncingRecentlyUsedEmailAddresses { get; set; }
        /// <summary>Tenant level settings for the Derived Credentials to be used for authentication.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::AITGraph.Sdk.Models.DeviceManagementDerivedCredentialSettings? DerivedCredentialSettings { get; set; }
#nullable restore
#else
        public global::AITGraph.Sdk.Models.DeviceManagementDerivedCredentialSettings DerivedCredentialSettings { get; set; }
#endif
        /// <summary>Possible values for email sync duration.</summary>
        public global::AITGraph.Sdk.Models.EmailSyncDuration? DurationOfEmailToSync { get; set; }
        /// <summary>Exchange data to sync. Possible values are: none, calendars, contacts, email, notes, reminders.</summary>
        public global::AITGraph.Sdk.Models.EasServices? EasServices { get; set; }
        /// <summary>Allow users to change sync settings.</summary>
        public bool? EasServicesUserOverrideEnabled { get; set; }
        /// <summary>Possible values for username source or email source.</summary>
        public global::AITGraph.Sdk.Models.UserEmailSource? EmailAddressSource { get; set; }
        /// <summary>Encryption Certificate type for this Email profile. Possible values are: none, certificate, derivedCredential.</summary>
        public global::AITGraph.Sdk.Models.EmailCertificateType? EncryptionCertificateType { get; set; }
        /// <summary>Exchange location that (URL) that the native mail app connects to.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? HostName { get; set; }
#nullable restore
#else
        public string HostName { get; set; }
#endif
        /// <summary>Identity certificate.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::AITGraph.Sdk.Models.IosCertificateProfileBase? IdentityCertificate { get; set; }
#nullable restore
#else
        public global::AITGraph.Sdk.Models.IosCertificateProfileBase IdentityCertificate { get; set; }
#endif
        /// <summary>Profile ID of the Per-App VPN policy to be used to access emails from the native Mail client</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? PerAppVPNProfileId { get; set; }
#nullable restore
#else
        public string PerAppVPNProfileId { get; set; }
#endif
        /// <summary>Indicates whether or not to use S/MIME certificate.</summary>
        public bool? RequireSmime { get; set; }
        /// <summary>Indicates whether or not to use SSL.</summary>
        public bool? RequireSsl { get; set; }
        /// <summary>Signing Certificate type for this Email profile. Possible values are: none, certificate, derivedCredential.</summary>
        public global::AITGraph.Sdk.Models.EmailCertificateType? SigningCertificateType { get; set; }
        /// <summary>Indicates whether or not to allow unencrypted emails.</summary>
        public bool? SmimeEnablePerMessageSwitch { get; set; }
        /// <summary>If set to true S/MIME encryption is enabled by default.</summary>
        public bool? SmimeEncryptByDefaultEnabled { get; set; }
        /// <summary>If set to true, the user can toggle the encryption by default setting.</summary>
        public bool? SmimeEncryptByDefaultUserOverrideEnabled { get; set; }
        /// <summary>S/MIME encryption certificate.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::AITGraph.Sdk.Models.IosCertificateProfile? SmimeEncryptionCertificate { get; set; }
#nullable restore
#else
        public global::AITGraph.Sdk.Models.IosCertificateProfile SmimeEncryptionCertificate { get; set; }
#endif
        /// <summary>If set to true the user can select the S/MIME encryption identity.</summary>
        public bool? SmimeEncryptionCertificateUserOverrideEnabled { get; set; }
        /// <summary>S/MIME signing certificate.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::AITGraph.Sdk.Models.IosCertificateProfile? SmimeSigningCertificate { get; set; }
#nullable restore
#else
        public global::AITGraph.Sdk.Models.IosCertificateProfile SmimeSigningCertificate { get; set; }
#endif
        /// <summary>If set to true, the user can select the signing identity.</summary>
        public bool? SmimeSigningCertificateUserOverrideEnabled { get; set; }
        /// <summary>If set to true S/MIME signing is enabled for this account</summary>
        public bool? SmimeSigningEnabled { get; set; }
        /// <summary>If set to true, the user can toggle S/MIME signing on or off.</summary>
        public bool? SmimeSigningUserOverrideEnabled { get; set; }
        /// <summary>Specifies whether the connection should use OAuth for authentication.</summary>
        public bool? UseOAuth { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::AITGraph.Sdk.Models.IosEasEmailProfileConfiguration"/> and sets the default values.
        /// </summary>
        public IosEasEmailProfileConfiguration() : base()
        {
            OdataType = "#microsoft.graph.iosEasEmailProfileConfiguration";
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::AITGraph.Sdk.Models.IosEasEmailProfileConfiguration"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static new global::AITGraph.Sdk.Models.IosEasEmailProfileConfiguration CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::AITGraph.Sdk.Models.IosEasEmailProfileConfiguration();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public override IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>(base.GetFieldDeserializers())
            {
                { "accountName", n => { AccountName = n.GetStringValue(); } },
                { "authenticationMethod", n => { AuthenticationMethod = n.GetEnumValue<global::AITGraph.Sdk.Models.EasAuthenticationMethod>(); } },
                { "blockMovingMessagesToOtherEmailAccounts", n => { BlockMovingMessagesToOtherEmailAccounts = n.GetBoolValue(); } },
                { "blockSendingEmailFromThirdPartyApps", n => { BlockSendingEmailFromThirdPartyApps = n.GetBoolValue(); } },
                { "blockSyncingRecentlyUsedEmailAddresses", n => { BlockSyncingRecentlyUsedEmailAddresses = n.GetBoolValue(); } },
                { "derivedCredentialSettings", n => { DerivedCredentialSettings = n.GetObjectValue<global::AITGraph.Sdk.Models.DeviceManagementDerivedCredentialSettings>(global::AITGraph.Sdk.Models.DeviceManagementDerivedCredentialSettings.CreateFromDiscriminatorValue); } },
                { "durationOfEmailToSync", n => { DurationOfEmailToSync = n.GetEnumValue<global::AITGraph.Sdk.Models.EmailSyncDuration>(); } },
                { "easServices", n => { EasServices = n.GetEnumValue<global::AITGraph.Sdk.Models.EasServices>(); } },
                { "easServicesUserOverrideEnabled", n => { EasServicesUserOverrideEnabled = n.GetBoolValue(); } },
                { "emailAddressSource", n => { EmailAddressSource = n.GetEnumValue<global::AITGraph.Sdk.Models.UserEmailSource>(); } },
                { "encryptionCertificateType", n => { EncryptionCertificateType = n.GetEnumValue<global::AITGraph.Sdk.Models.EmailCertificateType>(); } },
                { "hostName", n => { HostName = n.GetStringValue(); } },
                { "identityCertificate", n => { IdentityCertificate = n.GetObjectValue<global::AITGraph.Sdk.Models.IosCertificateProfileBase>(global::AITGraph.Sdk.Models.IosCertificateProfileBase.CreateFromDiscriminatorValue); } },
                { "perAppVPNProfileId", n => { PerAppVPNProfileId = n.GetStringValue(); } },
                { "requireSmime", n => { RequireSmime = n.GetBoolValue(); } },
                { "requireSsl", n => { RequireSsl = n.GetBoolValue(); } },
                { "signingCertificateType", n => { SigningCertificateType = n.GetEnumValue<global::AITGraph.Sdk.Models.EmailCertificateType>(); } },
                { "smimeEnablePerMessageSwitch", n => { SmimeEnablePerMessageSwitch = n.GetBoolValue(); } },
                { "smimeEncryptByDefaultEnabled", n => { SmimeEncryptByDefaultEnabled = n.GetBoolValue(); } },
                { "smimeEncryptByDefaultUserOverrideEnabled", n => { SmimeEncryptByDefaultUserOverrideEnabled = n.GetBoolValue(); } },
                { "smimeEncryptionCertificate", n => { SmimeEncryptionCertificate = n.GetObjectValue<global::AITGraph.Sdk.Models.IosCertificateProfile>(global::AITGraph.Sdk.Models.IosCertificateProfile.CreateFromDiscriminatorValue); } },
                { "smimeEncryptionCertificateUserOverrideEnabled", n => { SmimeEncryptionCertificateUserOverrideEnabled = n.GetBoolValue(); } },
                { "smimeSigningCertificate", n => { SmimeSigningCertificate = n.GetObjectValue<global::AITGraph.Sdk.Models.IosCertificateProfile>(global::AITGraph.Sdk.Models.IosCertificateProfile.CreateFromDiscriminatorValue); } },
                { "smimeSigningCertificateUserOverrideEnabled", n => { SmimeSigningCertificateUserOverrideEnabled = n.GetBoolValue(); } },
                { "smimeSigningEnabled", n => { SmimeSigningEnabled = n.GetBoolValue(); } },
                { "smimeSigningUserOverrideEnabled", n => { SmimeSigningUserOverrideEnabled = n.GetBoolValue(); } },
                { "useOAuth", n => { UseOAuth = n.GetBoolValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public override void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            base.Serialize(writer);
            writer.WriteStringValue("accountName", AccountName);
            writer.WriteEnumValue<global::AITGraph.Sdk.Models.EasAuthenticationMethod>("authenticationMethod", AuthenticationMethod);
            writer.WriteBoolValue("blockMovingMessagesToOtherEmailAccounts", BlockMovingMessagesToOtherEmailAccounts);
            writer.WriteBoolValue("blockSendingEmailFromThirdPartyApps", BlockSendingEmailFromThirdPartyApps);
            writer.WriteBoolValue("blockSyncingRecentlyUsedEmailAddresses", BlockSyncingRecentlyUsedEmailAddresses);
            writer.WriteObjectValue<global::AITGraph.Sdk.Models.DeviceManagementDerivedCredentialSettings>("derivedCredentialSettings", DerivedCredentialSettings);
            writer.WriteEnumValue<global::AITGraph.Sdk.Models.EmailSyncDuration>("durationOfEmailToSync", DurationOfEmailToSync);
            writer.WriteEnumValue<global::AITGraph.Sdk.Models.EasServices>("easServices", EasServices);
            writer.WriteBoolValue("easServicesUserOverrideEnabled", EasServicesUserOverrideEnabled);
            writer.WriteEnumValue<global::AITGraph.Sdk.Models.UserEmailSource>("emailAddressSource", EmailAddressSource);
            writer.WriteEnumValue<global::AITGraph.Sdk.Models.EmailCertificateType>("encryptionCertificateType", EncryptionCertificateType);
            writer.WriteStringValue("hostName", HostName);
            writer.WriteObjectValue<global::AITGraph.Sdk.Models.IosCertificateProfileBase>("identityCertificate", IdentityCertificate);
            writer.WriteStringValue("perAppVPNProfileId", PerAppVPNProfileId);
            writer.WriteBoolValue("requireSmime", RequireSmime);
            writer.WriteBoolValue("requireSsl", RequireSsl);
            writer.WriteEnumValue<global::AITGraph.Sdk.Models.EmailCertificateType>("signingCertificateType", SigningCertificateType);
            writer.WriteBoolValue("smimeEnablePerMessageSwitch", SmimeEnablePerMessageSwitch);
            writer.WriteBoolValue("smimeEncryptByDefaultEnabled", SmimeEncryptByDefaultEnabled);
            writer.WriteBoolValue("smimeEncryptByDefaultUserOverrideEnabled", SmimeEncryptByDefaultUserOverrideEnabled);
            writer.WriteObjectValue<global::AITGraph.Sdk.Models.IosCertificateProfile>("smimeEncryptionCertificate", SmimeEncryptionCertificate);
            writer.WriteBoolValue("smimeEncryptionCertificateUserOverrideEnabled", SmimeEncryptionCertificateUserOverrideEnabled);
            writer.WriteObjectValue<global::AITGraph.Sdk.Models.IosCertificateProfile>("smimeSigningCertificate", SmimeSigningCertificate);
            writer.WriteBoolValue("smimeSigningCertificateUserOverrideEnabled", SmimeSigningCertificateUserOverrideEnabled);
            writer.WriteBoolValue("smimeSigningEnabled", SmimeSigningEnabled);
            writer.WriteBoolValue("smimeSigningUserOverrideEnabled", SmimeSigningUserOverrideEnabled);
            writer.WriteBoolValue("useOAuth", UseOAuth);
        }
    }
}
#pragma warning restore CS0618
