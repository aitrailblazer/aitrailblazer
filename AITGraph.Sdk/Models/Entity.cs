// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace AITGraph.Sdk.Models {
    public class Entity : IAdditionalDataHolder, IParsable {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The unique identifier for an entity. Read-only.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Id { get; set; }
#nullable restore
#else
        public string Id { get; set; }
#endif
        /// <summary>The OdataType property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? OdataType { get; set; }
#nullable restore
#else
        public string OdataType { get; set; }
#endif
        /// <summary>
        /// Instantiates a new entity and sets the default values.
        /// </summary>
        public Entity() {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static Entity CreateFromDiscriminatorValue(IParseNode parseNode) {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            var mappingValue = parseNode.GetChildNode("@odata.type")?.GetStringValue();
            return mappingValue switch {
                "#microsoft.graph.attachment" => new Attachment(),
                "#microsoft.graph.calendar" => new Calendar(),
                "#microsoft.graph.calendarPermission" => new CalendarPermission(),
                "#microsoft.graph.calendarSharingMessage" => new CalendarSharingMessage(),
                "#microsoft.graph.contact" => new Contact(),
                "#microsoft.graph.educationalActivity" => new EducationalActivity(),
                "#microsoft.graph.event" => new Event(),
                "#microsoft.graph.eventMessage" => new EventMessage(),
                "#microsoft.graph.eventMessageRequest" => new EventMessageRequest(),
                "#microsoft.graph.eventMessageResponse" => new EventMessageResponse(),
                "#microsoft.graph.extension" => new Extension(),
                "#microsoft.graph.fileAttachment" => new FileAttachment(),
                "#microsoft.graph.itemAddress" => new ItemAddress(),
                "#microsoft.graph.itemAttachment" => new ItemAttachment(),
                "#microsoft.graph.itemEmail" => new ItemEmail(),
                "#microsoft.graph.itemFacet" => new ItemFacet(),
                "#microsoft.graph.itemPatent" => new ItemPatent(),
                "#microsoft.graph.itemPhone" => new ItemPhone(),
                "#microsoft.graph.itemPublication" => new ItemPublication(),
                "#microsoft.graph.languageProficiency" => new LanguageProficiency(),
                "#microsoft.graph.mailFolder" => new MailFolder(),
                "#microsoft.graph.mailSearchFolder" => new MailSearchFolder(),
                "#microsoft.graph.mention" => new Mention(),
                "#microsoft.graph.message" => new Message(),
                "#microsoft.graph.messageRule" => new MessageRule(),
                "#microsoft.graph.multiValueLegacyExtendedProperty" => new MultiValueLegacyExtendedProperty(),
                "#microsoft.graph.note" => new Note(),
                "#microsoft.graph.openTypeExtension" => new OpenTypeExtension(),
                "#microsoft.graph.outlookItem" => new OutlookItem(),
                "#microsoft.graph.outlookTask" => new OutlookTask(),
                "#microsoft.graph.personAnnotation" => new PersonAnnotation(),
                "#microsoft.graph.personAnnualEvent" => new PersonAnnualEvent(),
                "#microsoft.graph.personAward" => new PersonAward(),
                "#microsoft.graph.personCertification" => new PersonCertification(),
                "#microsoft.graph.personExtension" => new PersonExtension(),
                "#microsoft.graph.personInterest" => new PersonInterest(),
                "#microsoft.graph.personName" => new PersonName(),
                "#microsoft.graph.personWebsite" => new PersonWebsite(),
                "#microsoft.graph.post" => new Post(),
                "#microsoft.graph.profile" => new Profile(),
                "#microsoft.graph.profilePhoto" => new ProfilePhoto(),
                "#microsoft.graph.projectParticipation" => new ProjectParticipation(),
                "#microsoft.graph.referenceAttachment" => new ReferenceAttachment(),
                "#microsoft.graph.singleValueLegacyExtendedProperty" => new SingleValueLegacyExtendedProperty(),
                "#microsoft.graph.skillProficiency" => new SkillProficiency(),
                "#microsoft.graph.userAccountInformation" => new UserAccountInformation(),
                "#microsoft.graph.userConfiguration" => new UserConfiguration(),
                "#microsoft.graph.webAccount" => new WebAccount(),
                "#microsoft.graph.workPosition" => new WorkPosition(),
                _ => new Entity(),
            };
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers() {
            return new Dictionary<string, Action<IParseNode>> {
                {"id", n => { Id = n.GetStringValue(); } },
                {"@odata.type", n => { OdataType = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer) {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("id", Id);
            writer.WriteStringValue("@odata.type", OdataType);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
