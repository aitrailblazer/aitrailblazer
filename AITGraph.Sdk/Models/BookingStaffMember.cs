// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace AITGraph.Sdk.Models
{
    /// <summary>
    /// Represents a staff member who provides services in a business.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class BookingStaffMember : global::AITGraph.Sdk.Models.BookingPerson, IParsable
    {
        /// <summary>True means that if the staff member is a Microsoft 365 user, the Bookings API would verify the staff member&apos;s availability in their personal calendar in Microsoft 365, before making a booking.</summary>
        public bool? AvailabilityIsAffectedByPersonalCalendar { get; set; }
        /// <summary>Identifies a color to represent the staff member. The color corresponds to the color palette in the Staff details page in the Bookings app.</summary>
        public int? ColorIndex { get; set; }
        /// <summary>True indicates that a staff member will be notified via email when a booking assigned to them is created or changed.</summary>
        public bool? IsEmailNotificationEnabled { get; set; }
        /// <summary>The membershipStatus property</summary>
        public global::AITGraph.Sdk.Models.BookingStaffMembershipStatus? MembershipStatus { get; set; }
        /// <summary>The role property</summary>
        public global::AITGraph.Sdk.Models.BookingStaffRole? Role { get; set; }
        /// <summary>The time zone of the staff member. For a list of possible values, see dateTimeTimeZone.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? TimeZone { get; set; }
#nullable restore
#else
        public string TimeZone { get; set; }
#endif
        /// <summary>True means the staff member&apos;s availability is as specified in the businessHours property of the business. False means the availability is determined by the staff member&apos;s workingHours property setting.</summary>
        public bool? UseBusinessHours { get; set; }
        /// <summary>The range of hours each day of the week that the staff member is available for booking. By default, they are initialized to be the same as the businessHours property of the business.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::AITGraph.Sdk.Models.BookingWorkHours>? WorkingHours { get; set; }
#nullable restore
#else
        public List<global::AITGraph.Sdk.Models.BookingWorkHours> WorkingHours { get; set; }
#endif
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::AITGraph.Sdk.Models.BookingStaffMember"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static new global::AITGraph.Sdk.Models.BookingStaffMember CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::AITGraph.Sdk.Models.BookingStaffMember();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public override IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>(base.GetFieldDeserializers())
            {
                { "availabilityIsAffectedByPersonalCalendar", n => { AvailabilityIsAffectedByPersonalCalendar = n.GetBoolValue(); } },
                { "colorIndex", n => { ColorIndex = n.GetIntValue(); } },
                { "isEmailNotificationEnabled", n => { IsEmailNotificationEnabled = n.GetBoolValue(); } },
                { "membershipStatus", n => { MembershipStatus = n.GetEnumValue<global::AITGraph.Sdk.Models.BookingStaffMembershipStatus>(); } },
                { "role", n => { Role = n.GetEnumValue<global::AITGraph.Sdk.Models.BookingStaffRole>(); } },
                { "timeZone", n => { TimeZone = n.GetStringValue(); } },
                { "useBusinessHours", n => { UseBusinessHours = n.GetBoolValue(); } },
                { "workingHours", n => { WorkingHours = n.GetCollectionOfObjectValues<global::AITGraph.Sdk.Models.BookingWorkHours>(global::AITGraph.Sdk.Models.BookingWorkHours.CreateFromDiscriminatorValue)?.AsList(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public override void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            base.Serialize(writer);
            writer.WriteBoolValue("availabilityIsAffectedByPersonalCalendar", AvailabilityIsAffectedByPersonalCalendar);
            writer.WriteIntValue("colorIndex", ColorIndex);
            writer.WriteBoolValue("isEmailNotificationEnabled", IsEmailNotificationEnabled);
            writer.WriteEnumValue<global::AITGraph.Sdk.Models.BookingStaffMembershipStatus>("membershipStatus", MembershipStatus);
            writer.WriteEnumValue<global::AITGraph.Sdk.Models.BookingStaffRole>("role", Role);
            writer.WriteStringValue("timeZone", TimeZone);
            writer.WriteBoolValue("useBusinessHours", UseBusinessHours);
            writer.WriteCollectionOfObjectValues<global::AITGraph.Sdk.Models.BookingWorkHours>("workingHours", WorkingHours);
        }
    }
}
#pragma warning restore CS0618
