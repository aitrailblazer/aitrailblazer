// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace AITGraph.Sdk.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class SubjectRightsRequest : global::AITGraph.Sdk.Models.Entity, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Identity that the request is assigned to.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::AITGraph.Sdk.Models.Identity? AssignedTo { get; set; }
#nullable restore
#else
        public global::AITGraph.Sdk.Models.Identity AssignedTo { get; set; }
#endif
        /// <summary>The date and time when the request was closed. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.</summary>
        public DateTimeOffset? ClosedDateTime { get; set; }
        /// <summary>KQL based content query that should be used for search. This property is defined only for APIs accessed using the /security query path and not the /privacy query path.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ContentQuery { get; set; }
#nullable restore
#else
        public string ContentQuery { get; set; }
#endif
        /// <summary>Identity information for the entity that created the request.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::AITGraph.Sdk.Models.IdentitySet? CreatedBy { get; set; }
#nullable restore
#else
        public global::AITGraph.Sdk.Models.IdentitySet CreatedBy { get; set; }
#endif
        /// <summary>The date and time when the request was created. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.</summary>
        public DateTimeOffset? CreatedDateTime { get; set; }
        /// <summary>Information about the data subject.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::AITGraph.Sdk.Models.DataSubject? DataSubject { get; set; }
#nullable restore
#else
        public global::AITGraph.Sdk.Models.DataSubject DataSubject { get; set; }
#endif
        /// <summary>The type of the data subject. Possible values are: customer, currentEmployee, formerEmployee, prospectiveEmployee, student, teacher, faculty, other, unknownFutureValue.</summary>
        public global::AITGraph.Sdk.Models.DataSubjectType? DataSubjectType { get; set; }
        /// <summary>Description for the request.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Description { get; set; }
#nullable restore
#else
        public string Description { get; set; }
#endif
        /// <summary>The name of the request.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? DisplayName { get; set; }
#nullable restore
#else
        public string DisplayName { get; set; }
#endif
        /// <summary>The external ID for the request that is immutable after creation and is used for tracking the request for the external system. This property is defined only for APIs accessed using the /security query path and not the /privacy query path.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ExternalId { get; set; }
#nullable restore
#else
        public string ExternalId { get; set; }
#endif
        /// <summary>Collection of history change events.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::AITGraph.Sdk.Models.SubjectRightsRequestHistory>? History { get; set; }
#nullable restore
#else
        public List<global::AITGraph.Sdk.Models.SubjectRightsRequestHistory> History { get; set; }
#endif
        /// <summary>Include all versions of the documents. By default, the current copies of the documents will be returned. If SharePoint sites have versioning enabled, including all versions will include the historical copies of the documents. This property is defined only for APIs accessed using the /security query path and not the /privacy query path.</summary>
        public bool? IncludeAllVersions { get; set; }
        /// <summary>Include content authored by the data subject. This property is defined only for APIs accessed using the /security query path and not the /privacy query path.</summary>
        public bool? IncludeAuthoredContent { get; set; }
        /// <summary>Insight about the request.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::AITGraph.Sdk.Models.SubjectRightsRequestDetail? Insight { get; set; }
#nullable restore
#else
        public global::AITGraph.Sdk.Models.SubjectRightsRequestDetail Insight { get; set; }
#endif
        /// <summary>The date and time when the request is internally due. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.</summary>
        public DateTimeOffset? InternalDueDateTime { get; set; }
        /// <summary>Identity information for the entity that last modified the request.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::AITGraph.Sdk.Models.IdentitySet? LastModifiedBy { get; set; }
#nullable restore
#else
        public global::AITGraph.Sdk.Models.IdentitySet LastModifiedBy { get; set; }
#endif
        /// <summary>The date and time when the request was last modified. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.</summary>
        public DateTimeOffset? LastModifiedDateTime { get; set; }
        /// <summary>The mailboxlocations property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::AITGraph.Sdk.Models.SubjectRightsRequestMailboxLocation? Mailboxlocations { get; set; }
#nullable restore
#else
        public global::AITGraph.Sdk.Models.SubjectRightsRequestMailboxLocation Mailboxlocations { get; set; }
#endif
        /// <summary>List of notes associated with the request.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::AITGraph.Sdk.Models.AuthoredNote>? Notes { get; set; }
#nullable restore
#else
        public List<global::AITGraph.Sdk.Models.AuthoredNote> Notes { get; set; }
#endif
        /// <summary>Pause the request after estimate has finished. By default, the data estimate will run and then pause, allowing you to preview results and then select the option to retrieve data in the UI. You can set this property to false if you want it to perform the estimate and then automatically begin with the retrieval of the content. This property is defined only for APIs accessed using the /security query path and not the /privacy query path.</summary>
        public bool? PauseAfterEstimate { get; set; }
        /// <summary>List of regulations that this request will fulfill.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? Regulations { get; set; }
#nullable restore
#else
        public List<string> Regulations { get; set; }
#endif
        /// <summary>The sitelocations property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::AITGraph.Sdk.Models.SubjectRightsRequestSiteLocation? Sitelocations { get; set; }
#nullable restore
#else
        public global::AITGraph.Sdk.Models.SubjectRightsRequestSiteLocation Sitelocations { get; set; }
#endif
        /// <summary>Information about the different stages for the request.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::AITGraph.Sdk.Models.SubjectRightsRequestStageDetail>? Stages { get; set; }
#nullable restore
#else
        public List<global::AITGraph.Sdk.Models.SubjectRightsRequestStageDetail> Stages { get; set; }
#endif
        /// <summary>The status of the request. Possible values are: active, closed, unknownFutureValue.</summary>
        public global::AITGraph.Sdk.Models.SubjectRightsRequestStatus? Status { get; set; }
        /// <summary>Information about the Microsoft Teams team that was created for the request.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::AITGraph.Sdk.Models.Team? Team { get; set; }
#nullable restore
#else
        public global::AITGraph.Sdk.Models.Team Team { get; set; }
#endif
        /// <summary>The type of the request. Possible values are: export, delete, access, tagForAction, unknownFutureValue.</summary>
        public global::AITGraph.Sdk.Models.SubjectRightsRequestType? Type { get; set; }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::AITGraph.Sdk.Models.SubjectRightsRequest"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static new global::AITGraph.Sdk.Models.SubjectRightsRequest CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::AITGraph.Sdk.Models.SubjectRightsRequest();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public override IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>(base.GetFieldDeserializers())
            {
                { "assignedTo", n => { AssignedTo = n.GetObjectValue<global::AITGraph.Sdk.Models.Identity>(global::AITGraph.Sdk.Models.Identity.CreateFromDiscriminatorValue); } },
                { "closedDateTime", n => { ClosedDateTime = n.GetDateTimeOffsetValue(); } },
                { "contentQuery", n => { ContentQuery = n.GetStringValue(); } },
                { "createdBy", n => { CreatedBy = n.GetObjectValue<global::AITGraph.Sdk.Models.IdentitySet>(global::AITGraph.Sdk.Models.IdentitySet.CreateFromDiscriminatorValue); } },
                { "createdDateTime", n => { CreatedDateTime = n.GetDateTimeOffsetValue(); } },
                { "dataSubject", n => { DataSubject = n.GetObjectValue<global::AITGraph.Sdk.Models.DataSubject>(global::AITGraph.Sdk.Models.DataSubject.CreateFromDiscriminatorValue); } },
                { "dataSubjectType", n => { DataSubjectType = n.GetEnumValue<global::AITGraph.Sdk.Models.DataSubjectType>(); } },
                { "description", n => { Description = n.GetStringValue(); } },
                { "displayName", n => { DisplayName = n.GetStringValue(); } },
                { "externalId", n => { ExternalId = n.GetStringValue(); } },
                { "history", n => { History = n.GetCollectionOfObjectValues<global::AITGraph.Sdk.Models.SubjectRightsRequestHistory>(global::AITGraph.Sdk.Models.SubjectRightsRequestHistory.CreateFromDiscriminatorValue)?.AsList(); } },
                { "includeAllVersions", n => { IncludeAllVersions = n.GetBoolValue(); } },
                { "includeAuthoredContent", n => { IncludeAuthoredContent = n.GetBoolValue(); } },
                { "insight", n => { Insight = n.GetObjectValue<global::AITGraph.Sdk.Models.SubjectRightsRequestDetail>(global::AITGraph.Sdk.Models.SubjectRightsRequestDetail.CreateFromDiscriminatorValue); } },
                { "internalDueDateTime", n => { InternalDueDateTime = n.GetDateTimeOffsetValue(); } },
                { "lastModifiedBy", n => { LastModifiedBy = n.GetObjectValue<global::AITGraph.Sdk.Models.IdentitySet>(global::AITGraph.Sdk.Models.IdentitySet.CreateFromDiscriminatorValue); } },
                { "lastModifiedDateTime", n => { LastModifiedDateTime = n.GetDateTimeOffsetValue(); } },
                { "mailboxlocations", n => { Mailboxlocations = n.GetObjectValue<global::AITGraph.Sdk.Models.SubjectRightsRequestMailboxLocation>(global::AITGraph.Sdk.Models.SubjectRightsRequestMailboxLocation.CreateFromDiscriminatorValue); } },
                { "notes", n => { Notes = n.GetCollectionOfObjectValues<global::AITGraph.Sdk.Models.AuthoredNote>(global::AITGraph.Sdk.Models.AuthoredNote.CreateFromDiscriminatorValue)?.AsList(); } },
                { "pauseAfterEstimate", n => { PauseAfterEstimate = n.GetBoolValue(); } },
                { "regulations", n => { Regulations = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "sitelocations", n => { Sitelocations = n.GetObjectValue<global::AITGraph.Sdk.Models.SubjectRightsRequestSiteLocation>(global::AITGraph.Sdk.Models.SubjectRightsRequestSiteLocation.CreateFromDiscriminatorValue); } },
                { "stages", n => { Stages = n.GetCollectionOfObjectValues<global::AITGraph.Sdk.Models.SubjectRightsRequestStageDetail>(global::AITGraph.Sdk.Models.SubjectRightsRequestStageDetail.CreateFromDiscriminatorValue)?.AsList(); } },
                { "status", n => { Status = n.GetEnumValue<global::AITGraph.Sdk.Models.SubjectRightsRequestStatus>(); } },
                { "team", n => { Team = n.GetObjectValue<global::AITGraph.Sdk.Models.Team>(global::AITGraph.Sdk.Models.Team.CreateFromDiscriminatorValue); } },
                { "type", n => { Type = n.GetEnumValue<global::AITGraph.Sdk.Models.SubjectRightsRequestType>(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public override void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            base.Serialize(writer);
            writer.WriteObjectValue<global::AITGraph.Sdk.Models.Identity>("assignedTo", AssignedTo);
            writer.WriteDateTimeOffsetValue("closedDateTime", ClosedDateTime);
            writer.WriteStringValue("contentQuery", ContentQuery);
            writer.WriteObjectValue<global::AITGraph.Sdk.Models.IdentitySet>("createdBy", CreatedBy);
            writer.WriteDateTimeOffsetValue("createdDateTime", CreatedDateTime);
            writer.WriteObjectValue<global::AITGraph.Sdk.Models.DataSubject>("dataSubject", DataSubject);
            writer.WriteEnumValue<global::AITGraph.Sdk.Models.DataSubjectType>("dataSubjectType", DataSubjectType);
            writer.WriteStringValue("description", Description);
            writer.WriteStringValue("displayName", DisplayName);
            writer.WriteStringValue("externalId", ExternalId);
            writer.WriteCollectionOfObjectValues<global::AITGraph.Sdk.Models.SubjectRightsRequestHistory>("history", History);
            writer.WriteBoolValue("includeAllVersions", IncludeAllVersions);
            writer.WriteBoolValue("includeAuthoredContent", IncludeAuthoredContent);
            writer.WriteObjectValue<global::AITGraph.Sdk.Models.SubjectRightsRequestDetail>("insight", Insight);
            writer.WriteDateTimeOffsetValue("internalDueDateTime", InternalDueDateTime);
            writer.WriteObjectValue<global::AITGraph.Sdk.Models.IdentitySet>("lastModifiedBy", LastModifiedBy);
            writer.WriteDateTimeOffsetValue("lastModifiedDateTime", LastModifiedDateTime);
            writer.WriteObjectValue<global::AITGraph.Sdk.Models.SubjectRightsRequestMailboxLocation>("mailboxlocations", Mailboxlocations);
            writer.WriteCollectionOfObjectValues<global::AITGraph.Sdk.Models.AuthoredNote>("notes", Notes);
            writer.WriteBoolValue("pauseAfterEstimate", PauseAfterEstimate);
            writer.WriteCollectionOfPrimitiveValues<string>("regulations", Regulations);
            writer.WriteObjectValue<global::AITGraph.Sdk.Models.SubjectRightsRequestSiteLocation>("sitelocations", Sitelocations);
            writer.WriteCollectionOfObjectValues<global::AITGraph.Sdk.Models.SubjectRightsRequestStageDetail>("stages", Stages);
            writer.WriteEnumValue<global::AITGraph.Sdk.Models.SubjectRightsRequestStatus>("status", Status);
            writer.WriteObjectValue<global::AITGraph.Sdk.Models.Team>("team", Team);
            writer.WriteEnumValue<global::AITGraph.Sdk.Models.SubjectRightsRequestType>("type", Type);
        }
    }
}
#pragma warning restore CS0618
