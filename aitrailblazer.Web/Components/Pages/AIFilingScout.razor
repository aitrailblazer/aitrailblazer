@page "/"
@rendermode InteractiveServer


@using System.Text.RegularExpressions
@using System.Text.Json
@using Cosmos.Copilot.Services
@using AITrailblazer.net.Services
@using AITrailblazer.net.Models

@using Newtonsoft.Json;
@using Newtonsoft.Json.Linq;
@using System.Text;
@using System.Linq;
@using System.Collections.Generic;

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Authorization
@using Microsoft.Identity.Web
@using AITGraph.Sdk.Models
@using aitrailblazer.Web.Models
@using System.Diagnostics;
@using Newtonsoft.Json;
@using Newtonsoft.Json.Linq;
@using System.Text.RegularExpressions
@using Microsoft.AspNetCore.Components.Authorization
@using Azure.AI.OpenAI;
@using SmartComponents
@using System.ComponentModel.DataAnnotations
@using GraphMessage = AITGraph.Sdk.Models.Message
@using Markdig;
@using Microsoft.AspNetCore.Components.Web
@using VectorStoreRAG
@inject ILogger<AIFilingScout> Logger
@inject IJSRuntime JSRuntime
@inject ChatService ChatService
@inject SECEdgarWSAppService SECEdgarWSAppService
@inject GoSECEdgarWSAppService GoSECEdgarWSAppService

@inject GotenbergWSAppService GotenbergWSAppService

@inject PluginService PluginService
@inject NavigationManager NavigationManager
@inject AITGraphService graphService
@inject IJSRuntime jsRuntime
@inject AzureOpenAIHandler azureOpenAIHandler
@inject TimeFunctions _timeFunctions
@inject UserIDsService UserIDsService
@inject RAGChatService<string> RagChatService

<PageTitle>Filing Scout AI</PageTitle>

@if (currentUserIdentityID == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <FluentLayout Style="margin-top: 10px;">
        <FluentStack Orientation="Orientation.Horizontal" HorizontalAlignment="HorizontalAlignment.Left" VerticalGap="2">
            <FluentCard Width="900px" Height="100%" MinimalStyle="true">

                <FluentStack Orientation="Orientation.Vertical" VerticalGap="2"
                Style="padding: 20px; border: 1px solid var(--neutral-outline-rest); border-radius: 8px; background-color: var(--neutral-fill-rest); text-align: center;">

                    <FluentStack Orientation="Orientation.Horizontal" HorizontalAlignment="HorizontalAlignment.Left" VerticalGap="2">
                        <FluentIcon Value="@(new Icons.Regular.Size24.SearchSparkle())" Color="@Color.Accent" />
                        <FluentLabel Typo="Typography.H4" Style="color: #347687;">EDGAR Filing Search</FluentLabel>
                    </FluentStack>
                    <!-- Input Section -->
                    <FluentStack Orientation="Orientation.Vertical" VerticalGap="2"
                        Style="padding: 20px; border: 1px solid var(--neutral-outline-rest); border-radius: 8px; background-color: var(--neutral-fill-rest); text-align: center;">
                        <div class="textarea-container" style="width: 100%;">
                            <textarea @bind="Ticker" @oninput="HandleTickerInput" placeholder="Enter ticker symbol (e.g., AAPL, MSFT)"
                                maxlength="10" id="animatedTextarea"
                                style="width: 100%; padding: 12px; font-size: 16px; border: 1px solid #ccc; border-radius: 8px; transition: border-color 0.3s ease; resize: none;">
                            </textarea>
                        </div>

                        <!-- Display Results -->
                        @if (!string.IsNullOrEmpty(CIK))
                        {
                            <FluentStack Orientation="Orientation.Horizontal" HorizontalAlignment="HorizontalAlignment.Left"
                                VerticalGap="2">
                                <FluentLabel Typo="Typography.Body">@CompanyName |</FluentLabel>
                                <FluentLabel Typo="Typography.Body">@Ticker |</FluentLabel>
                                <FluentLabel Typo="Typography.Body">@Exchange |</FluentLabel>

                                <FluentLabel Typo="Typography.Body">CIK: @CIK</FluentLabel>
                            </FluentStack>
                        }
                        <!-- Loading State -->
                        @if (IsLoading)
                        {
                            <FluentProgress Style="width: 100%; max-width: 300px; margin: 20px auto;" />
                            <p>Loading... Please wait.</p>
                        }
                        @if (!IsButtonDisabled){
                            <FluentTabs @bind-ActiveTabId="@activeMainid"  OnTabChange="HandleOnMainTabChange" Class="top-tabs-font-size" Style="width: 800px;">
                                <FluentTab Id="LatestFilings-id" Icon="@(new Icons.Regular.Size20.Document())">
                                    <Header>
                                        Latest Filings
                                    </Header>
                                    <Content>
                                        <!-- Menu to Select Available Forms -->
                                        <FluentLabel Typo="Typography.Body" Style="font-size: 16px; color: #555;">@SelectedForm</FluentLabel>
                                            <FluentCard Width="200px" Height="300px" MinimalStyle="true">
                                                <div
                                                    style="max-height: 300px; overflow-y: auto; border: 1px solid var(--neutral-outline-rest); border-radius: 8px;">
                                                    <FluentMenu @bind-Open="formOpenListFilings" @onmenuchange="OnFormMenuChange" Width="100px" Height="300px">
                                                        @if (AvailableForms != null && AvailableForms.Any())
                                                        {
                                                            foreach (var form in AvailableForms)
                                                            {
                                                                <FluentMenuItem Value="@form">@form</FluentMenuItem>
                                                            }
                                                        }
                                                    </FluentMenu>
                                                </div>
                                            </FluentCard>
                                            <!-- Display HTML -->
                                            @if (!string.IsNullOrEmpty(HTMLContentListFilings))
                                            {
                                                <!-- Vectorize HTML 
                                                <FluentButton IconStart="@(new Icons.Filled.Size24.LayerDiagonalSparkle())"
                                                            Appearance="Appearance.Neutral" @onclick="FetchFilings" disabled="@IsButtonDisabled">
                                                    Vectorize
                                                </FluentButton>
                                                -->
                                                <div style="position: relative; width: 800px; height: 600px; margin: 0 auto;">
                                                    <!-- Toolbar positioned at the top right of the content container -->
                                                    <div style="position: absolute; top: 10px; right: 10px; z-index: 10; padding: 10px;">
                                                        <FluentToolbar id="toolbar-fluent-components-input" 
                                                                    style="width: 100%; display: flex; justify-content: flex-end;">
                                                            <!-- Copy to clipboard button -->
                                                            <FluentButton id="HTMLContentListFilingsToClipboard" 
                                                                        IconEnd="@(new Icons.Regular.Size20.Copy())" 
                                                                        Title="Copy to clipboard"
                                                                        Loading="@loadingInput2"
                                                                        OnClick="CopyHTMLContentListFilingsToClipboard"
                                                                        Style="min-width: 32px; text-transform: uppercase; font-weight: 500;">
                                                            </FluentButton>

                                                            <!-- Convert HTML to PDF and save button -->
                                                            <FluentButton IconStart="@(new Icons.Regular.Size24.DocumentPdf())" 
                                                                        Appearance="Appearance.Neutral" 
                                                                        Title="Save as PDF"
                                                                        @onclick="ConvertAndSavePdfContentListFilings"
                                                                        Loading="@loadingInput3"
                                                                        Style="min-width: 32px; text-transform: uppercase; font-weight: 500;">
                                                            </FluentButton>
                                                        </FluentToolbar>
                                                    </div>

                                                    <!-- Content Container -->
                                                    <div id="contentContainer" style="width: 100%; height: 100%; overflow: auto; padding-top: 60px;">
                                                        @((MarkupString)HTMLContentListFilings)
                                                    </div>
                                                </div>
                                            }

                                    </Content>
                                </FluentTab>
                                <FluentTab Id="AllFilings-id" Icon="@(new Icons.Regular.Size20.DocumentBulletListMultiple())">
                                    <Header>
                                        All Filings
                                    </Header>
                                    <Content>
                                        <!-- Display Filings
                                        <FluentButton IconStart="@(new Icons.Filled.Size24.DocumentOnePageMultiple())"
                                            Appearance="Appearance.Neutral" @onclick="FetchFilings" disabled="@IsButtonDisabled">
                                            All Filings
                                        </FluentButton>
                                         -->
                                         @if (AllFilings != null && AllFilings.Any())
                                         {
                                            <FluentCard Width="800px" Height="300px" MinimalStyle="true">
                                                <div
                                                    style="max-height: 300px; overflow-y: auto; border: 1px solid var(--neutral-outline-rest); border-radius: 8px;">
                                                    <FluentAccordion @bind-Expanded="@accordionOpenAllFilings">
                                                        @foreach (var group in AllFilings.GroupBy(f => f.Form))
                                                        {
                                                            <FluentAccordionItem Heading="@group.Key">
                                                                <FluentIcon Value="@(new Icons.Regular.Size20.DocumentOnePageSparkle())" Color="@Color.Neutral"
                                                                    Slot="start" />
                                                                <table style="width:100%; border-collapse: collapse; margin-top: 10px;">
                                                                    <thead>
                                                                        <tr style="background-color: var(--neutral-fill-hover);">
                                                                            <th style="padding: 10px; text-align:left;">Filing Date</th>
                                                                            <th style="padding: 10px; text-align:left;">Accession Number</th>
                                                                        </tr>
                                                                    </thead>
                                                                    <tbody>
                                                                        @foreach (var filing in group)
                                                                        {
                                                                            <tr style="border-bottom: solid thin var(--neutral-outline-rest);">
                                                                                <td style="padding:10px;">@filing.FilingDate</td>
                                                                                <td style="padding:10px;">
                                                                                    <a href="javascript:void(0);" @onclick="() => ShowPdfPreview(filing)" @onclick:preventDefault>
                                                                                        @filing.AccessionNumber
                                                                                    </a>
                                                                                </td>
                                                                            </tr>
                                                                        }
                                                                </tbody>
                                                            </table>
                                                        </FluentAccordionItem>
                                                        }
                                                    </FluentAccordion>
                                                </div>
                                            </FluentCard>                                            
                                         }
                                        @if (!string.IsNullOrEmpty(HtmlContentAllFilings))
                                        {
                                            <div style="position: relative; width: 800px; height: 600px; margin: 0 auto;">
                                                <!-- Toolbar positioned at the top right of the content container -->
                                                <div style="position: absolute; top: 10px; right: 0; z-index: 10; padding: 10px;">
                                                    <FluentToolbar id="toolbar-fluent-components-input" style="display: flex; justify-content: flex-end;">
                                                        <!-- Copy to clipboard button -->
                                                        <FluentButton id="HTMLContentAllFilingsToClipboard" 
                                                                    IconEnd="@(new Icons.Regular.Size20.Copy())" 
                                                                    Title="Copy to clipboard"
                                                                    Loading="@loadingInput7"
                                                                    OnClick="CopyHtmlContentAllFilingsToClipboard"
                                                                    Style="min-width: 32px; text-transform: uppercase; font-weight: 500;">
                                                        </FluentButton>

                                                        <!-- Convert HTML to PDF and save button -->
                                                        <FluentButton IconStart="@(new Icons.Regular.Size24.DocumentPdf())" 
                                                                    Appearance="Appearance.Neutral" 
                                                                    Title="Save as PDF"
                                                                    @onclick="ConvertAndSavePdfContentAllFilings"
                                                                    Loading="@loadingInput5"
                                                                    Style="min-width: 32px; text-transform: uppercase; font-weight: 500;">
                                                        </FluentButton>
                                                    </FluentToolbar>
                                                </div>

                                                <!-- Content Container -->
                                                <div id="contentContainer" style="width: 100%; height: 100%; overflow: auto; padding-top: 60px;">
                                                    @((MarkupString)HtmlContentAllFilings)
                                                </div>
                                            </div>
                                        }

                                    </Content>
                                </FluentTab>
                                <FluentTab Id="FinancialConcepts-id" Icon="@(new Icons.Regular.Size20.DocumentData())">
                                    <Header>
                                        Financial Concepts
                                    </Header>
                                    <Content>
                                            <!--
                                            @if (AvailableConceptsItems == null || !AvailableConceptsItems.Any())
                                            {
                                                <FluentButton IconStart="@(new Icons.Filled.Size24.DataFunnel())"
                                                            Appearance="Appearance.Neutral"
                                                            @onclick="FetchXBRLConceptsAsync"
                                                            disabled="@IsButtonDisabled">
                                                    Fetch Financial Concepts
                                                </FluentButton>
                                            }
                                            -->
                                            @if (AvailableConceptsItems != null && AvailableConceptsItems.Any())
                                            {
                                                <FluentTabs @bind-ActiveTabId="@activeid" Class="top-tabs-font-size" Style="width: 800px;">
                                                    <FluentTab Id="Statements-id" Icon="@(new Icons.Regular.Size20.DataFunnel())">
                                                        <Header>
                                                            Available Concepts
                                                        </Header>
                                                        <Content>
                                                            <FluentLabel Typo="Typography.H4">@SelectedAvailableConceptsItem?.Text</FluentLabel>
                                                            <FluentTreeView  
                                                                Items="@AvailableConceptsItems" 
                                                                @bind-SelectedItem="@SelectedAvailableConceptsItem" 
                                                                LazyLoadItems="false">
                                                                <ItemTemplate>
                                                                    @context.Text
                                                                </ItemTemplate>
                                                            </FluentTreeView>
                                                        </Content>
                                                    </FluentTab>
                                                    @if (!string.IsNullOrEmpty(PlotHtml) || !string.IsNullOrEmpty(PlotAnomaliesPngBase64) || !string.IsNullOrEmpty(formattedJson))
                                                    {
                                                        <!-- Plots Tab -->
                                                        @if (!string.IsNullOrEmpty(PlotHtml))
                                                        {
                                                            <FluentTab Id="Plots-id" Icon="@(new Icons.Regular.Size20.DataArea())">
                                                                <Header>
                                                                    Plots
                                                                </Header>
                                                                <Content>
                                                                    <FluentStack Orientation="Orientation.Vertical" VerticalGap="2"
                                                                                Style="padding: 20px; border: 1px solid var(--neutral-outline-rest); border-radius: 8px; background-color: var(--neutral-fill-rest); text-align: center;">
                                                                        <div id="chart-wrapper">
                                                                            @if (ShowChart && !string.IsNullOrEmpty(PlotHtml))
                                                                            {
                                                                                <FluentCard Width="800px" MinimalStyle="true">
                                                                                    <!-- Use a dynamic key so that when chartKey changes the container is re-rendered -->
                                                                                    <div id="plot-container" @key="chartKey">
                                                                                        @((MarkupString)PlotHtml)
                                                                                    </div>
                                                                                </FluentCard>
                                                                            }
                                                                        </div>
                                                                    </FluentStack>
                                                                </Content>
                                                            </FluentTab>
                                                        }

                                                        @if (!string.IsNullOrEmpty(formattedJson))
                                                        {
                                                            <FluentTab Id="Data-id" Icon="@(new Icons.Regular.Size20.DocumentData())">
                                                                <Header>
                                                                    Data
                                                                </Header>
                                                                <Content>
                                                                    <FluentToolbar id="toolbar-fluent-components-input" 
                                                                                style="width:100%; display: flex; justify-content: flex-start; align-items: center; gap: 1rem; padding: 0.5rem 1rem; background: var(--neutral-fill-subtle); border-radius: 8px; box-shadow: 0 1px 3px rgba(0,0,0,0.1);">
                                                                        @if (!string.IsNullOrEmpty(formattedJson))
                                                                        {
                                                                            <FluentButton id="CopyFormattedJsonToClipboard" 
                                                                                        IconEnd="@(new Icons.Regular.Size20.Copy())" 
                                                                                        Title="Copy formatted JSON to clipboard"
                                                                                        Loading="@loadingInput1"
                                                                                        OnClick="CopyFormattedJsonToClipboard"
                                                                                        Style="min-width: 150px; text-transform: uppercase; font-weight: 500;">
                                                                            </FluentButton>

                                                                            <FluentButton id="SaveCsvButton" 
                                                                                        IconEnd="@(new Icons.Regular.Size20.Save())" 
                                                                                        Title="Save as CSV"
                                                                                        OnClick="SaveCsv"
                                                                                        Style="min-width: 150px; text-transform: uppercase; font-weight: 500;">
                                                                            </FluentButton>
                                                                        }
                                                                    </FluentToolbar>
                                                                    <div style="display: flex; justify-content: center; align-items: center; padding: 16px;">
                                                                        <div style="
                                                                                max-height: 500px;
                                                                                overflow-y: auto;
                                                                                font-family: 'Courier New', monospace;
                                                                                white-space: pre-wrap;
                                                                                word-break: break-word;
                                                                                line-height: 1.5;
                                                                                text-align: left;
                                                                                padding: 16px;
                                                                                border: 1px solid var(--neutral-outline-rest);
                                                                                border-radius: 8px;
                                                                                background-color: #f9f9f9;
                                                                                box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
                                                                                ">
                                                                            <pre><code class="language-json">@((MarkupString)formattedJson)</code></pre>
                                                                        </div>
                                                                    </div>
                                                                </Content>
                                                            </FluentTab>
                                                        }
                                                    }
                                                </FluentTabs>

                                            }
                                    </Content>
                                </FluentTab>
                            </FluentTabs>
                        }
                     
                    </FluentStack>
                    <FluentStack Orientation="Orientation.Vertical" VerticalGap="2">
                    <!-- Error State -->
                    @if (HasError)
                    {
                        <FluentCard Style="padding: 15px; border-radius: 8px; background-color: var(--neutral-fill-rest);">
                            <strong style="color: red;">Error:</strong>
                            <p>@ErrorMessage</p>
                        </FluentCard>
                    }
                    </FluentStack>
                </FluentStack>
            </FluentCard>
            @if (AIAnalysis)
            {            
                <FluentCard Width="900px" MinimalStyle="true">

                <!-- Main container uses flex column layout -->
                    <!-- Scrollable content section -->
                    <div style="flex: 1 1 auto; overflow-y: auto; padding: 16px;">
                        <!-- Header & AI Insights Info -->
                        <FluentStack Orientation="Orientation.Vertical" HorizontalAlignment="HorizontalAlignment.Left" VerticalGap="2">
                            <FluentStack Orientation="Orientation.Horizontal" HorizontalAlignment="HorizontalAlignment.Left" VerticalGap="2">
                                <FluentIcon Value="@(new Icons.Regular.Size24.ChatSparkle())" Color="@Color.Accent" />
                                <FluentLabel Typo="Typography.H4" Style="color: #347687;">AI Insights</FluentLabel>
                            </FluentStack>
                            <FluentStack Orientation="Orientation.Vertical" HorizontalAlignment="HorizontalAlignment.Left" VerticalGap="2">
                                @if (!string.IsNullOrEmpty(Ticker))
                                {
                                    <FluentLabel Typo="Typography.Body">@CompanyName | @Ticker | @Exchange </FluentLabel>
                                }
                                
                                @if (!string.IsNullOrEmpty(SelectedConceptTitle))
                                {
                                    <FluentCard 
                                        Width="800px" 
                                        MinimalStyle="true" 
                                        >
                                        <FluentLabel Typo="Typography.H5" 
                                                    Style="display: block; margin-bottom: 12px; font-weight: bold; text-align: center;">
                                            Based on the Selected Financial Concept
                                        </FluentLabel>
                                        <FluentLabel Typo="Typography.Body" 
                                                    Style="display: block; margin-bottom: 8px;">
                                            Concept: @SelectedConceptTitle
                                        </FluentLabel>
                                        <FluentLabel Typo="Typography.Body" 
                                                    Style="display: block;">
                                            Description: @SelectedConceptDescription
                                        </FluentLabel>
                                    </FluentCard>
                                    @if (SubmittingFinancialConceptsQuestions)
                                    {
                                        <!-- Loading State for Questions -->
                                        <FluentStack Orientation="Orientation.Vertical" HorizontalAlignment="HorizontalAlignment.Left" VerticalGap="2">
                                            <FluentLabel Typo="Typography.Body" Style="font-size: 16px; color: #555;">Please wait...</FluentLabel>
                                            <FluentProgress Style="width: 100%; max-width: 300px; margin: 20px 0;" />
                                        </FluentStack>
                                    }
                                    
                                    <FluentButton 
                                        IconStart="@(new Icons.Filled.Size24.TextBulletListSquareSparkle())" 
                                        id="latestFilingsQuestionsButton"
                                        Appearance="Appearance.Neutral" 
                                        Style="white-space: normal; max-width: 200px; margin-top:10px;" 
                                        @onclick="GenerateQuestions">
                                        Generate Questions
                                    </FluentButton>
                                    <!-- Questions Accordion inside its own card -->
                                    @if (GroupedQuestions != null && GroupedQuestions.Any())
                                        {
                                            <FluentCard 
                                                Width="800px" Height="300px"
                                                MinimalStyle="true" 
                                                >
                                                <div style="max-height: 300px; overflow-y: auto; padding: 10px;">
                                                    <FluentAccordion>
                                                        @foreach (var group in GroupedQuestions)
                                                        {
                                                            <FluentAccordionItem Heading="@group.Title">
                                                                <FluentIcon Value="@(new Icons.Regular.Size20.DocumentOnePageSparkle())" 
                                                                            Color="@Color.Neutral" Slot="start" />
                                                                @foreach (var content in group.ContentLines)
                                                                {
                                                                    <div style="margin-bottom: 15px; padding: 10px; display: flex; align-items: center;
                                                                                border: 1px solid var(--neutral-outline-hover);
                                                                                border-radius: 8px; background-color: var(--neutral-fill-rest);
                                                                                box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05); font-size: 14px; 
                                                                                line-height: 1.5; text-align: left;">
                                                                        <div style="flex: 1;">
                                                                            @(new MarkupString(ParseLineToStyledHtml(content)))
                                                                        </div>
                                                                    </div>
                                                                    <FluentButton IconStart="@(new Icons.Filled.Size20.ArrowCircleUp())" 
                                                                    Title="Selecting this question will trigger GPT AI"
                                                                    @onclick="() => SelectQuestion(group.Title, content)"
                                                                    Style="margin-left: 10px; min-width: 100px; text-transform: uppercase; font-weight: 500;" >
                                                                    </FluentButton>
                                                                }
                                                            </FluentAccordionItem>
                                                        }
                                                    </FluentAccordion>
                                                </div>
                                            </FluentCard>
                                        }
                                    }
                    
                                    <!-- Fixed Input Section (always visible at the bottom) -->
                                    <div style="flex: 0 0 auto; padding: 20px; border-top: 1px">
                                        <FluentStack Orientation="Orientation.Vertical" VerticalGap="2" Style="text-align: center;">
                                            @if (Submitting)
                                            {
                                                <!-- Loading State for Completion -->
                                                <FluentStack Orientation="Orientation.Vertical" HorizontalAlignment="HorizontalAlignment.Left" VerticalGap="2">
                                                    <FluentLabel Typo="Typography.Body" Style="font-size: 16px; color: #555;">Please wait...</FluentLabel>
                                                    <FluentProgress Style="width: 100%; max-width: 300px; margin: 20px 0;" />
                                                    <div id="currentLineContainer"
                                                        style="margin-top: 20px; padding: 15px; border: 1px solid var(--neutral-outline-rest); 
                                                                background-color: var(--neutral-fill-rest); font-size: 16px; border-radius: 8px;">
                                                        <strong style="color: #0078D4;">@CurrentLine</strong>
                                                    </div>
                                                </FluentStack>
                                            }
                                                                                         <!-- Question Information -->
                                                    @if (!string.IsNullOrEmpty(SelectedConceptQuestionTitle))
                                                    {
                                                        <div style="margin-bottom: 16px; text-align: left;">
                                                            <FluentButton IconStart="@(new Icons.Filled.Size20.Delete())"
                                                                        Title="Clear selected question"
                                                                        @onclick="ClearSelectedQuestion"
                                                                        Style="margin-top: 8px; text-transform: uppercase; font-weight: 500;">
                                                                Clear
                                                            </FluentButton>
                                                            <FluentLabel Typo="Typography.H4" 
                                                                        Style="display: block; margin-bottom: 8px; font-weight: bold;">
                                                                Question: @SelectedConceptQuestionTitle
                                                            </FluentLabel>
                                                            <FluentLabel Typo="Typography.Body" 
                                                                        Style="display: block; margin-bottom: 16px;">
                                                                Description: @SelectedConceptQuestionDescription
                                                            </FluentLabel>


                                                        </div>
                                                    }
                                                    <FluentStack Orientation="Orientation.Horizontal" VerticalGap="2"
                                                            Style="padding: 20px; border: 1px solid var(--neutral-outline-rest); border-radius: 8px; background-color: var(--neutral-fill-rest); text-align: center;">

                                                        <!-- Textarea for Prompt Input -->
                                                        <div class="textarea-container" style="width: 100%;">
                                                            <textarea @bind="PromptTextFinancialConcepts" 
                                                                    @oninput="HandleInput" 
                                                                    placeholder="Ask the AI for insights, summaries, key metrics, specific data points, and more." 
                                                                    maxlength="2500"
                                                                    id="animatedTextarea"
                                                                    style="width: 700px; height: 150px; padding: 16px; font-size: 18px; 
                                                                            border: 1px solid #ccc; border-radius: 8px; resize: vertical; 
                                                                            transition: border-color 0.3s ease;">
                                                            </textarea>
                                                            <div class="char-counter" 
                                                                style="text-align: right; font-size: 16px; color: #555; margin-top: 8px;">
                                                                @($"{PromptTextFinancialConcepts.Length}/2500 characters")
                                                            </div>
                                                            <!-- Submit Button -->
                                                            <FluentButton IconStart="@(new Icons.Filled.Size32.ArrowCircleUp())" 
                                                                        Appearance="Appearance.Neutral"
                                                                        @onclick="FetchCompletion" 
                                                                        disabled="@IsPromptButtonDisabled"
                                                                        Style="display: block; margin: 0 auto; min-width: 200px; text-transform: uppercase; font-weight: bold; padding: 12px 24px;">
                                                            </FluentButton>                  
                                                        </div>
                                                    </FluentStack>

                                        </FluentStack>
                                    </div>
                                        @if (!string.IsNullOrEmpty(HtmlContentCompletion))
                                        {
                                            <div style="position: relative; width: 800px; height: 600px; margin: 0 auto;">
                                                <!-- Toolbar positioned at the top right of the content container -->
                                                <div style="position: absolute; top: 10px; right: 10px; z-index: 10; padding: 10px;">
                                                    <FluentToolbar id="toolbar-fluent-components-input" 
                                                                style="width: auto; display: flex; justify-content: flex-end;">
                                                        <!-- Copy to clipboard button -->
                                                        <FluentButton id="CopyHtmlContentCompletionToClipboard" 
                                                                    IconEnd="@(new Icons.Regular.Size20.Copy())" 
                                                                    Title="Copy to clipboard"
                                                                    Loading="@loadingInput2"
                                                                    OnClick="CopyHtmlContentCompletionToClipboard"
                                                                    Style="min-width: 32px; text-transform: uppercase; font-weight: 500;">
                                                        </FluentButton>

                                                        <!-- Convert HTML to PDF and save button -->
                                                        <FluentButton id="ConvertAndSavePdfHtmlContentCompletion" IconStart="@(new Icons.Regular.Size24.DocumentPdf())" 
                                                                    Appearance="Appearance.Neutral" 
                                                                    Title="Save as PDF"
                                                                    @onclick="ConvertAndSavePdfHtmlContentCompletion"
                                                                    Loading="@loadingInput9"
                                                                    Style="min-width: 32px; text-transform: uppercase; font-weight: 500;">
                                                        </FluentButton>
                                                    </FluentToolbar>
                                                </div>

                                                <!-- Content Container -->
                                                <div id="contentContainer" style="width: 100%; height: 100%; overflow: auto; padding-top: 60px;">
                                                    <div class="markdown-container" 
                                                        style="padding: 24px; border: 1px solid var(--neutral-outline-rest); border-radius: 12px; 
                                                                background-color: #ffffff; color: #2d3436; 
                                                                box-shadow: 0 6px 12px rgba(0, 0, 0, 0.1); 
                                                                font-family: 'Roboto', Arial, sans-serif; line-height: 1.8; 
                                                                transition: box-shadow 0.3s ease;">
                                                        <article style="font-size: 16px; color: #333; text-align: left; 
                                                                    white-space: normal; word-break: break-word; padding: 10px 0;">
                                                            @((MarkupString)HtmlContentCompletion)
                                                        </article>
                                                    </div>
                                                </div>
                                            </div>                                        }
                            </FluentStack>
                        </FluentStack>
                    </div>
                </FluentCard>
            }
        </FluentStack>

    </FluentLayout>
}
<FluentToastProvider />
<FluentDialogProvider />
<FluentTooltipProvider />
<FluentMessageBarProvider />
<FluentMenuProvider />
@code {
    private string TenantId = "1234";
    private string UserId = "5678";
    private string CategoryId = "Document";
    private double SimilarityScore = 0.7;

    private List<(string Title, List<string> ContentLines)> FinalizedGroups = new();
    private string CurrentLine = string.Empty;
    private bool Submitting = false;
    private string CurrentTitle = "Untitled";
    string? activeMainid = "";
    FluentTab? changedMainTabto;

    private async Task HandleOnMainTabChange(FluentTab tab)
    {
        // Save the current tab for later use if needed.
        changedMainTabto = tab;

        // Use a switch statement (or if/else) to handle different tab Ids.
        switch (tab.Id)
        {
            case "AllFilings-id":
                // Handle the "All Filings" case.
                Console.WriteLine("Switched to All Filings tab.");
                // For example, you might load all filings data or update the UI accordingly.
                @if (AllFilings == null || !AllFilings.Any())
                {
                    await FetchFilings();
                }
                break;

            case "FinancialConcepts-id":
                // Handle the "Financial Concepts" case.
                Console.WriteLine("Switched to Financial Concepts tab.");
                if (AvailableConceptsItems == null || !AvailableConceptsItems.Any())
                {
                    await FetchXBRLConceptsAsync();
                }
                break;

            default:
                // Handle any other cases if needed.
                Console.WriteLine($"Switched to an unknown tab: {tab.Id}");
                break;
        }

        // Optionally, update the UI.
        StateHasChanged();
    }


    string? activeid = "Plots-id";
    string? activeidPlotData = "Statements-id";
    private string HtmlContentLatestFilings = string.Empty;
    private string HtmlContentAllFilings = string.Empty;
    private string HtmlContentCompletion = string.Empty;
    private string HTMLContentListFilings = string.Empty;

    private bool IsPromptButtonDisabled => string.IsNullOrEmpty(PromptTextFinancialConcepts) || PromptTextFinancialConcepts.Length < 10;

    protected override void OnInitialized()
    {
        ChatService.StatusUpdated += async (message) => await OnStatusUpdated(message);
    }

    private async Task OnStatusUpdated(string message)
    {
        Logger.LogInformation($"OnStatusUpdated received message: {message}");

        if (message.StartsWith("Finalized Line:"))
        {
            // Extract the finalized line (e.g., content)
            var finalizedLine = message.Replace("Finalized Line:", "").Trim();

            // Check if the finalized line contains a new title
            if (finalizedLine.StartsWith("**Title**:"))
            {
                // Extract the new title
                var match = Regex.Match(finalizedLine, @"\*\*Title\*\*: (.*?)\n");
                if (match.Success)
                {
                    CurrentTitle = match.Groups[1].Value.Trim();

                    // Add a new group for the new title
                    FinalizedGroups.Add((CurrentTitle, new List<string>()));
                }
            }
            else
            {
                // Add the content line to the most recent group
                if (FinalizedGroups.Any())
                {
                    FinalizedGroups.Last().ContentLines.Add(finalizedLine);
                }
                else
                {
                    // If no group exists, create one with the default title
                    FinalizedGroups.Add((CurrentTitle, new List<string> { finalizedLine }));
                }
            }

            StateHasChanged();
            await JSRuntime.InvokeVoidAsync("scrollToBottom", "statusMessagesContainer");
        }
        else
        {
            // Handle streaming lines
            CurrentLine = message.Trim();
            StateHasChanged();
        }
    }

    private async Task FetchCompletion(MouseEventArgs e)
    {
        if (IsPromptButtonDisabled)
        {
            Logger.LogWarning("PromptTextFinancialConcepts is empty or too short.");
            return;
        }

        Submitting = true;
        FinalizedGroups.Clear();
        CurrentLine = string.Empty;
        PanelOutput = string.Empty;
        HtmlContentCompletion = string.Empty;

        try
        {
            //public async Task<string> GenerateAIClearNoteAsync(
            //string userInput,
            //string panelInput)

            PanelOutput = await azureOpenAIHandler.GenerateAIAletheiaFinancialConceptsInstructionsAsync(
                PromptTextFinancialConcepts, 
                "",
                Ticker + "|" + CompanyName,
                SelectedConceptTitle,
                SelectedConceptDescription,
                SelectedConceptQuestionTitle,
                SelectedConceptQuestionDescription,
                DataJson);
            HtmlContentCompletion = MarkdownRenderer.ConvertMarkdownToHtml(PanelOutput);     
            // Fetch completion and title from the service
            //var (completion, title) = await ChatService.GetKnowledgeBaseStreamingCompletionAsync(
            //TenantId, UserId, CategoryId, PromptText, SimilarityScore);

            // Add the final title and completion
            //FinalizedGroups.Add((title, new List<string> { completion }));
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error fetching completion");
            FinalizedGroups.Add(("Error", new List<string> { "An error occurred while fetching the completion." }));
        }
        finally
        {
            Submitting = false;
        }
    }
    private void ClearSelectedQuestion()
    {
        SelectedConceptQuestionTitle = string.Empty;
        SelectedConceptQuestionDescription = string.Empty;
        StateHasChanged();
    }
    private string ParseLineToStyledHtml(string line)
    {
        line = Regex.Replace(line, @"\*\*Title\*\*: (.*?)\n",
        @"<h4 style='color: #0078D4; font-size: 18px;'><strong>Title:</strong> $1</h4>");

        line = line.Replace("**Content Summary**:",
        "<h5 style='color: #555; font-size: 16px;'><strong>Content Summary:</strong></h5>")
        .Replace("Reference Link:",
        "<h5 style='color: #555; font-size: 16px;'><strong>Reference Link:</strong></h5>");

        line = Regex.Replace(line, @"\[(.*?)\]\((.*?)\)",
        @"<a href='$2' target='_blank' style='color: #0078D4;'>$1</a>");

        return line.Replace("\n", "<p style='margin: 5px 0;'>");
    }

    private async Task HandleInput(ChangeEventArgs e)
    {
        PromptTextFinancialConcepts = e.Value?.ToString() ?? string.Empty;
        await JSRuntime.InvokeVoidAsync("adjustTextAreaHeight", "animatedTextarea");
        StateHasChanged();
    }
    // Generates questions by calling the Azure OpenAI handler and then extracting and grouping them
    private async Task<string> GenerateQuestions()
    {
        SubmittingFinancialConceptsQuestions = true;
        // Call your Azure OpenAI Handler to generate the questions
        string FinancialConceptsQuestions = await azureOpenAIHandler.GenerateAIAletheiaFinancialConceptsQuestionsAsync(
                    PromptTextFinancialConcepts,
                    "",
                    Ticker,
                    SelectedConceptTitle,
                    SelectedConceptDescription);

        Console.WriteLine($"FinancialConceptsQuestions: {FinancialConceptsQuestions}");

        // Extract the questions from the generated output
        List<string> extractedQuestions = ExtractQuestions(FinancialConceptsQuestions);

        // Group the questions based on their titles
        GroupedQuestions = GroupQuestions(extractedQuestions);
        SubmittingFinancialConceptsQuestions = false;
        StateHasChanged(); // Force component to re-render with updated PDF data
        return FinancialConceptsQuestions;
    }

    // Extracts the content within each <question>...</question> tag and performs any placeholder replacements
    private List<string> ExtractQuestions(string financialConceptsQuestions)
    {
        List<string> questions = new List<string>();

        // Use Regex to find all content between <question> and </question> tags
        var matches = Regex.Matches(financialConceptsQuestions, @"<question>(.*?)</question>", RegexOptions.Singleline);
        foreach (Match match in matches)
        {
            string questionContent = match.Groups[1].Value
                .Replace("Accounts and Financing Receivable, after Allowance for Credit Loss", SelectedConceptTitle)
                .Replace("TSLA", Ticker);
            questions.Add(questionContent);
        }
        return questions;
    }

    // Groups questions into a list of QuestionGroup objects using the <title> and <questionText> tags from each question
    private List<QuestionGroup> GroupQuestions(List<string> questions)
    {
        var groups = new List<QuestionGroup>();

        foreach (var q in questions)
        {
            // Extract the title
            var titleMatch = Regex.Match(q, @"<title>(.*?)</title>", RegexOptions.Singleline);
            // Extract the question text
            var questionTextMatch = Regex.Match(q, @"<questionText>(.*?)</questionText>", RegexOptions.Singleline);

            if (titleMatch.Success && questionTextMatch.Success)
            {
                string title = titleMatch.Groups[1].Value.Trim();
                string questionText = questionTextMatch.Groups[1].Value.Trim();

                // Check if a group with this title already exists; if so, add the question text to it.
                var existingGroup = groups.FirstOrDefault(g => g.Title == title);
                if (existingGroup != null)
                {
                    existingGroup.ContentLines.Add(questionText);
                }
                else
                {
                    groups.Add(new QuestionGroup { Title = title, ContentLines = new List<string> { questionText } });
                }
            }
        }
        return groups;
    }
    private async Task HandleQuestionClick(string question)
    {
        PromptTextFinancialConcepts = question; // Set the prompt text to the question
        await HandleInput(new ChangeEventArgs { Value = question }); // Simulate input to adjust textarea
        await FetchCompletion(null); // Submit the form
    }
}
@code {
    private string error;

    private string Ticker = string.Empty;
    private bool IsLoading = false;
    private bool HasError = false;
    private string ErrorMessage = string.Empty;
    private List<Filing>? AllFilings = null;

    private string? CIK;
    private string? CompanyName;
    private string? Exchange;

    private string? FilingsJson;
    private string? PDFDataUrlContentListFilings;
    // Property to store the HTML content
    //private string? HTMLContent { get; set; }

    // Computed property to disable buttons
    private bool IsButtonDisabled => string.IsNullOrEmpty(Ticker) || Ticker.Length < 1;

    /// <summary>
    /// Handles input changes in the ticker input field.
    /// Dynamically updates the state of the buttons.
    /// </summary>
    private async Task HandleTickerInput(ChangeEventArgs e)
    {
        Ticker = e.Value?.ToString() ?? string.Empty;
        if (!string.IsNullOrEmpty(Ticker))
        {
            await FetchAvailableForms(); // Await the async call
        }
        StateHasChanged(); // Trigger UI update
    }

    /// <summary>
    /// Fetches the CIK for the given ticker.
    /// </summary>
    private async Task FetchCIK()
    {
        try
        {
            IsLoading = true;
            HasError = false;
            ErrorMessage = string.Empty;

            CIK = await SECEdgarWSAppService.GetCIKAsync(Ticker);
            CIK = CIK?.PadLeft(10, '0');
            FilingsJson = null; // Clear filings data when fetching new CIK
            AllFilings = null;
            PDFDataUrlContentListFilings = null; // Clear PDF preview when fetching new CIK
            HtmlContentLatestFilings = null; // Clear HTML preview when fetching new CIK
            HtmlContentAllFilings = null; // Clear HTML preview when fetching new CIK
            HtmlContentCompletion = null; // Clear HTML preview when fetching new CIK
            PlotAnomaliesPngBase64 = null;

        }
        catch (Exception ex)
        {
            HasError = true;
            ErrorMessage = $"An error occurred while fetching CIK for {Ticker}: {ex.Message}";
            CIK = null;
        }
        finally
        {
            IsLoading = false;
        }
    }
    /*
    private async Task ShowPdfPreview1(Filing filing)
    {
        try
        {
            IsLoading = true;
            string filingUrl = ConstructFilingUrl(CIK, filing.AccessionNumber, filing.PrimaryDocument);
            Console.WriteLine($"filingUrl: {filingUrl}");
            byte[] pdfBytes = await GotenbergWSAppService.ConvertUrlToPdfAsync(filingUrl, userEmail); // Assuming userEmail is available
            //filing.PdfDataUrl = $"data:application/pdf;base64,{Convert.ToBase64String(pdfBytes)}";
            PDFDataUrl = $"data:application/pdf;base64,{Convert.ToBase64String(pdfBytes)}";

            FilingsJson = null; // Clear filings data when fetching new CIK
            Filings = null;
            StateHasChanged(); // Force component to re-render with updated PDF data
        }
        catch (Exception ex)
        {
            // Handle the error (e.g., log it or show an error message to the user)
            Console.WriteLine($"Error converting URL to PDF: {ex.Message}");
            PDFDataUrl = null; // Clear PDF preview on error
        }
        finally
        {
            IsLoading = false;
        }
    }
    */
    //   https://www.sec.gov/Archives/edgar/data/0001318605/000177134025000001/xslF345X05/edgardoc.xml
    private async Task ShowPdfPreview(Filing filing)
    {
        try
        {
            IsLoading = true;
            //FilingsJson = null; // Clear previous filings data
            //Filings = null; // Clear previous filings

            // Log the start of the process
            Console.WriteLine("Starting PDF preview generation...");

            // Ensure the CIK is padded to 10 digits (SEC EDGAR requirement)
            //var paddedCik = CIK?.PadLeft(10, '0');
            if (string.IsNullOrWhiteSpace(CIK))
            {
                Console.WriteLine("Error: CIK is null or empty.");
                PDFDataUrlContentListFilings = null; // Clear PDF preview on error
                return;
            }

            // Validate filing data
            if (string.IsNullOrWhiteSpace(filing.AccessionNumber))
            {
                Console.WriteLine("Error: Accession number is null or empty.");
                PDFDataUrlContentListFilings = null; // Clear PDF preview on error
                return;
            }
            if (string.IsNullOrWhiteSpace(filing.PrimaryDocument))
            {
                Console.WriteLine("Error: Primary document is null or empty.");
                PDFDataUrlContentListFilings = null; // Clear PDF preview on error
                return;
            }
            FilingAccessionNumber = filing.AccessionNumber;
            FilingPrimaryDocument = filing.PrimaryDocument;

            Console.WriteLine($"Fetching HTML content for CIK: {CIK}, Accession Number: {FilingAccessionNumber}, Primary Document: {FilingPrimaryDocument}");
            string filingUrl = ConstructFilingUrl(CIK, FilingAccessionNumber, FilingPrimaryDocument);
            Console.WriteLine($"filingUrl: {filingUrl}");
            //var accessionNumberWithoutDashes = filing.AccessionNumber.Replace("-", "");

            // Fetch the HTML content
            var htmlContent = await SECEdgarWSAppService.DownloadHtmlContentAsync(CIK, FilingAccessionNumber, FilingPrimaryDocument);
            //Logger.LogInformation($"htmlContent: {htmlContent}");
            HtmlContentAllFilings = htmlContent;
            accordionOpenAllFilings = true;
            PDFDataUrlContentListFilings = null;
            //string filePath = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.Desktop), $"{Ticker}_{SelectedForm}_Test.html");
            //await File.WriteAllTextAsync(filePath, HtmlContentAllFilings);
            //Console.WriteLine($"HTML saved to: {filePath}");

            Console.WriteLine("Successfully fetched HTML content. Converting to PDF...");

            // Convert HTML to PDF and store as byte array
            //var pdfBytes = await GoSECEdgarWSAppService.ConvertHtmlToPdfAsync(htmlContent);
            //PDFDataUrl = $"data:application/pdf;base64,{Convert.ToBase64String(pdfBytes)}";

         }
        catch (Exception ex)
        {
            // Log unexpected errors and clear the PDF preview
            Console.WriteLine($"Unexpected error: {ex.Message}");
            PDFDataUrlContentListFilings = null;
        }
        finally
        {
            IsLoading = false;
            StateHasChanged(); // Force component to re-render with the updated state
            Console.WriteLine("PDF preview generation process completed.");
        }
    }
    /// <summary>
    /// Fetches the filing history for the given ticker.
    /// </summary>
    private async Task FetchFilings()
    {
        try
        {
            IsLoading = true;
            HasError = false;
            ErrorMessage = string.Empty;

            // Fetch the CIK for the provided ticker
            CIK = await SECEdgarWSAppService.GetCIKAsync(Ticker);
            CIK = CIK?.PadLeft(10, '0');

            if (string.IsNullOrWhiteSpace(CIK))
            {
                Console.WriteLine($"No CIK found for ticker {Ticker}. Skipping filings fetch.");
                AllFilings = new List<Filing>(); // Initialize with an empty list
                return;
            }

            // Fetch filings JSON from the service
            FilingsJson = await SECEdgarWSAppService.GetFilingsAsync(Ticker);
            //Console.WriteLine($"FilingsJson: {FilingsJson}");

            // Deserialize JSON into a list of Filing objects using Newtonsoft.Json
            if (!string.IsNullOrEmpty(FilingsJson))
            {
                try
                {
                    AllFilings = Newtonsoft.Json.JsonConvert.DeserializeObject<List<Filing>>(FilingsJson) ?? new List<Filing>();
                }
                catch (Newtonsoft.Json.JsonException jsonEx)
                {
                    Console.WriteLine($"Error deserializing FilingsJson: {jsonEx.Message}");
                    AllFilings = new List<Filing>(); // Fallback to an empty list if deserialization fails
                }
            }
            else
            {
                Console.WriteLine($"FilingsJson is empty or null for ticker {Ticker}.");
                AllFilings = new List<Filing>(); // Initialize with an empty list
            }
        }
        catch (HttpRequestException httpEx)
        {
            HasError = true;
            ErrorMessage = $"Network error while fetching filings for {Ticker}. Please try again later.";
            Console.WriteLine($"HTTP error: {httpEx.Message}");
        }
        catch (Exception ex)
        {
            HasError = true;
            ErrorMessage = $"An unexpected error occurred while fetching filings for {Ticker}: {ex.Message}";
            Console.WriteLine($"Unexpected error: {ex.Message}");
        }
        finally
        {
            IsLoading = false;
            StateHasChanged(); // Update the UI
        }
    }

    public class Filing
    {
        public string Form { get; set; } = string.Empty;
        public string FilingDate { get; set; } = string.Empty;
        public string AccessionNumber { get; set; } = string.Empty;
        public string CIK { get; set; } = string.Empty;
        public string PrimaryDocument { get; set; } = string.Empty;
        public string? PdfDataUrl { get; set; } // New property for PDF data URL
    }

    private string ConstructFilingUrl(string cik, string accessionNumber, string primaryDocument)
    {
        // Ensure the CIK is padded to 10 digits (SEC EDGAR requirement)
        //var paddedCik = cik.PadLeft(10, '0');

        // Remove dashes from the accession number
        var accessionNumberWithoutDashes = accessionNumber.Replace("-", "");

        // Construct the SEC EDGAR URL
        return $"https://www.sec.gov/Archives/edgar/data/{cik}/{accessionNumberWithoutDashes}/{primaryDocument}";
    }
}
@code {
    private bool isLoading = true;

    private bool isInitialized = false;
    private string timeZoneInfo;

    private string userTimeZone;
    private DateTime userLocalTime;
    private string currentUserTenantID;
    private string currentUserIdentityID;
    private Profile profile;
    private string? userPhotoBase64;


    private UserAccountInformation accountInfo;
    private string? displayName;
    private string? Tenant;

    private string userEmail = "konstantine@aitrailblazer.com";
    private string userFullName;
    private string userPhoneNumer;
    private string userLanguage;
    private string userAddress;

    private List<string> questionsList = new List<string>();


    protected override async Task OnInitializedAsync()
    {

        if (!isInitialized)
        {
            // helloMessage = await HelloWorldApiClient.GetHelloAsync();
            await LoadUserDataAsync();
            isInitialized = true;
        }
    }
        private async Task LoadUserDataAsync()
    {
        isLoading = true;  // Show loading state
        error = null;
        //emailsWithComputedProperties.Clear();  // Clear previous data

        try
        {
     
            // Trigger re-render to show the result
            profile = await graphService.GetCurrentUserProfileAsync();
            accountInfo = await graphService.GetUserAccountInformationAsync();
            
            var (userId, tenantId) = await UserIDsService.GetUserIDsAsync();
            currentUserIdentityID = userId;
            currentUserTenantID = tenantId;
            
            userTimeZone = await UserIDsService.GetTimeZoneAsync();
            //Console.WriteLine($"LoadUserDataAsync userTimeZone: {userTimeZone}");

            timeZoneInfo = _timeFunctions.GetUserTimeZone();
            //Console.WriteLine($"LoadUserDataAsync timeZoneInfo: {timeZoneInfo}");
            
            // Get the current UTC time
            DateTime utcNow = DateTime.UtcNow;

            // Convert to user's local time
            userLocalTime = await UserIDsService.ConvertToUserTimeZoneAsync(utcNow);
            
            userLanguage = GetUserLanguage();

            userEmail = GetUserEmail();
            userFullName = GetUserFullName();  
            //displayName = userFullName;

            //userPhoneNumer = GetUserPhoneNumber();

            //userLanguage = GetUserLanguage();

            //userAddress = GetUserAddress();

            
            // Fetch the user's profile photo
            var photoStream = await graphService.GetUserPhotoAsync();
            if (photoStream != null)
            {
                using (var memoryStream = new MemoryStream())
                {
                    await photoStream.CopyToAsync(memoryStream);
                    userPhotoBase64 = Convert.ToBase64String(memoryStream.ToArray());
                }
            }

  
            var mailboxSettings = await graphService.GetMailboxSettingsAsync();
            if (mailboxSettings != null)
            {
                //($"Time Zone: {mailboxSettings.TimeZone}");
                //Console.WriteLine($"Date Format: {mailboxSettings.DateFormat}");
                //Console.WriteLine($"Time Format: {mailboxSettings.TimeFormat}");
                
                // Accessing other properties
                //Console.WriteLine($"Archive Folder: {mailboxSettings.ArchiveFolder}");
                
                if (mailboxSettings.AutomaticRepliesSetting != null)
                {
                    //Console.WriteLine($"Automatic Replies Status: {mailboxSettings.AutomaticRepliesSetting.Status}");
                    //Console.WriteLine($"External Audience: {mailboxSettings.AutomaticRepliesSetting.ExternalAudience}");
                    // Add more properties as needed
                }
                
                if (mailboxSettings.Language != null)
                {
                    //Console.WriteLine($"Language Locale: {mailboxSettings.Language.Locale}");
                    //Console.WriteLine($"Language Display Name: {mailboxSettings.Language.DisplayName}");
                }
                
                if (mailboxSettings.WorkingHours != null)
                {
                    //Console.WriteLine($"Working Hours Start Time: {mailboxSettings.WorkingHours.StartTime}");
                    //Console.WriteLine($"Working Hours End Time: {mailboxSettings.WorkingHours.EndTime}");
                    //Console.WriteLine($"Working Days: {string.Join(", ", mailboxSettings.WorkingHours.DaysOfWeek)}");
                }
                
                //Console.WriteLine($"User Purpose: {mailboxSettings.UserPurpose}");
                //Console.WriteLine($"User Purpose V2: {mailboxSettings.UserPurposeV2}");
                //Console.WriteLine($"Delegate Meeting Message Delivery Options: {mailboxSettings.DelegateMeetingMessageDeliveryOptions}");
            }
        }
        catch (AuthenticationRequiredException)
        {
            RedirectToLogin();
        }
        catch (Exception ex)
        {
            error = $"Error loading user data: {ex.Message}";
        }
        finally
        {
            isLoading = false;  // Hide loading state
        }
    }
    private string GetUserLanguage()
    {
        // Try to get the user's primary language from the Languages list
        if (profile?.Languages != null && profile.Languages.Any())
        {
            var primaryLanguage = profile.Languages.FirstOrDefault();
            if (primaryLanguage != null)
            {
                string displayName = primaryLanguage.DisplayName ?? "";
                string tag = primaryLanguage.Tag ?? "";

                if (!string.IsNullOrWhiteSpace(displayName))
                {
                    return displayName;
                }
                else if (!string.IsNullOrWhiteSpace(tag))
                {
                    return tag;
                }
            }
        }

        // As a fallback, return a default message or an empty string
        return "Language not specified";
    }

     private string GetUserAddress()
    {
        // Try to get the user's current position from the Positions list
        if (profile?.Positions != null && profile.Positions.Any())
        {
            // Look for the current position where IsCurrent is true
            var currentPosition = profile.Positions.FirstOrDefault(position => position.IsCurrent == true);

            if (currentPosition != null && currentPosition.Detail?.Company?.Address != null)
            {
                var address = currentPosition.Detail.Company.Address;

                // Extract address components
                string street = address.Street ?? "";
                string city = address.City ?? "";
                string state = address.State ?? "";
                string postalCode = address.PostalCode ?? "";
                string countryOrRegion = address.CountryOrRegion ?? "";

                // Build the full address string
                var addressParts = new List<string> { street, city, state, postalCode, countryOrRegion };
                var fullAddress = string.Join(", ", addressParts.Where(part => !string.IsNullOrWhiteSpace(part)));

                if (!string.IsNullOrWhiteSpace(fullAddress))
                {
                    return fullAddress;
                }
            }
        }

        // As a fallback, return a default message or an empty string
        return "Address not specified";
    }
        private string GetUserEmail()
    {
        // Try to get the user's primary email from the Emails list
        if (profile?.Emails != null && profile.Emails.Any())
        {
            var primaryEmail = profile.Emails.FirstOrDefault();
            if (primaryEmail != null)
            {
                return primaryEmail.Address ?? accountInfo?.UserPrincipalName ?? "";
            }
        }
        // As a fallback, return accountInfo?.UserPrincipalName or an empty string
        return accountInfo?.UserPrincipalName ?? "";
    }
    
    private string GetUserFullName()
    {
        // Try to get the user's full name from the Names list
        if (profile?.Names != null && profile.Names.Any())
        {
            var primaryName = profile.Names.FirstOrDefault();
            if (primaryName != null)
            {
                string firstName = primaryName.First ?? "";
                string lastName = primaryName.Last ?? "";
                if (!string.IsNullOrWhiteSpace(firstName) || !string.IsNullOrWhiteSpace(lastName))
                {
                    return $"{firstName} {lastName}".Trim();
                }
                else if (!string.IsNullOrWhiteSpace(primaryName.DisplayName))
                {
                    return primaryName.DisplayName;
                }
            }
        }

        // As a fallback, return accountInfo?.UserPrincipalName or "User"
        return accountInfo?.UserPrincipalName ?? "User";
    }
      private string GetUserPhoneNumber()
    {
        // Try to get the user's primary phone number from the Phones list
        if (profile?.Phones != null && profile.Phones.Any())
        {
            // Look for the mobile phone number first
            var mobilePhone = profile.Phones.FirstOrDefault(phone => phone.Type == PhoneType.Mobile);
            if (mobilePhone != null && !string.IsNullOrWhiteSpace(mobilePhone.Number))
            {
                return mobilePhone.Number;
            }

            // If no mobile phone, get any available phone number
            var primaryPhone = profile.Phones.FirstOrDefault();
            if (primaryPhone != null && !string.IsNullOrWhiteSpace(primaryPhone.Number))
            {
                return primaryPhone.Number;
            }
        }

        // As a fallback, return an empty string or a default message
        return "";
    }

    private void RedirectToLogin()
    {
        var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
        var queryString = System.Web.HttpUtility.ParseQueryString(uri.Query);
        // Get the value of the "myParameter" query string parameter
        Tenant = queryString["Tenant"];
        //Console.WriteLine($"Tenant: {Tenant}");
   
        // Log the returnUrl for debugging purposes
        //Console.WriteLine($"uri: {uri}");

        // Navigate to the sign-in page with the encoded returnUrl
        NavigationManager.NavigateTo($"/MicrosoftIdentity/Account/SignIn?returnUrl={uri}", forceLoad: true);
    }
    private bool open = false;

    private async Task OnFinancialConceptMenuChange(string conceptName)
    {
        if (!string.IsNullOrEmpty(conceptName))
        {
            SelectedConcept = conceptName;
            var parts = conceptName.Split('|');
            if (parts.Length > 1)
            {
                SelectedConceptTitle = parts[1];  // Assuming the label (title) is the second part
            }
            else
            {
                SelectedConceptTitle = parts[0];  // Fallback to name if label isn't available
            }
            // InferredFreq
            
            Logger.LogInformation($"Selected concept: {SelectedConcept}, Title: {SelectedConceptTitle}");
                    
                    
            IsLoading = true;

            await GenerateQuestions();

            await FetchXBRLPlot();
                        
            IsLoading = false;

        }
        else
        {
            Logger.LogWarning("No valid concept was selected.");
        }
    }
}

@code {
    private bool AIAnalysis { get; set; } = true;

    //private string Concept { get; set; } = "AssetsCurrent";
    private string Unit { get; set; } = "USD";
    private string? PlotHtml { get; set; }
    private string? PlotAnomaliesPngBase64 { get; set; }
    private string? DataJson { get; set; } // Store JSON data
    private string? formattedJson { get; set; } // Store formatted JSON data
    private string? csvData { get; set; } // Store formatted JSON data
    private string? PanelOutput { get; set; } // Store JSON data
    public static class JsonToCsvConverter
    {
        /// <summary>
        /// Converts a JSON array (as a string) into a CSV formatted string.
        /// </summary>
        /// <param name="json">A JSON string representing an array of objects.</param>
        /// <returns>A CSV string with headers representing the union of all object keys.</returns>
        public static string ConvertJsonToCsv(string json)
        {
            // Parse the JSON string into a JArray.
            JArray jsonArray = JArray.Parse(json);
            if (jsonArray.Count == 0)
            {
                return string.Empty;
            }

            // Determine the union of all keys used in the objects.
            HashSet<string> columnSet = new HashSet<string>();
            foreach (JObject obj in jsonArray)
            {
                foreach (var prop in obj.Properties())
                {
                    columnSet.Add(prop.Name);
                }
            }

            // Convert the set to a list. Sorting here is optional—
            // it provides a consistent order but may not match the original JSON order.
            List<string> columns = columnSet.ToList();
            columns.Sort();

            // Build the CSV output.
            StringBuilder csvBuilder = new StringBuilder();

            // Write the header row.
            csvBuilder.AppendLine(string.Join(",", columns.Select(EscapeCsvValue)));

            // Write each row.
            foreach (JObject obj in jsonArray)
            {
                List<string> row = new List<string>();
                foreach (string column in columns)
                {
                    // Try to get the token; if the property doesn't exist, use an empty string.
                    JToken token;
                    string value = obj.TryGetValue(column, out token) && token != null ? token.ToString() : string.Empty;
                    row.Add(EscapeCsvValue(value));
                }
                csvBuilder.AppendLine(string.Join(",", row));
            }

            return csvBuilder.ToString();
        }

        /// <summary>
        /// Escapes a CSV value by wrapping it in quotes if necessary and doubling any quotes inside the value.
        /// </summary>
        private static string EscapeCsvValue(string value)
        {
            if (string.IsNullOrEmpty(value))
            {
                return "";
            }

            // Replace any quotes with double quotes.
            if (value.Contains("\""))
            {
                value = value.Replace("\"", "\"\"");
            }

            // If the value contains commas, newlines, or quotes, wrap it in quotes.
            if (value.Contains(",") || value.Contains("\n") || value.Contains("\r"))
            {
                value = $"\"{value}\"";
            }
            return value;
        }
    }
    private bool ShowChart = true;
    private Guid chartKey { get; set; } = Guid.NewGuid();

 
    private async Task FetchXBRLPlot()
    {
        try
        {
            // --- Clear any existing chart first ---
            await ClearExistingChartAsync();

            // --- Proceed with fetching new data ---
            IsLoading = true;
            HasError = false;
            ErrorMessage = string.Empty;
            Console.WriteLine($"Fetching full XBRL concept for Ticker: {Ticker}, Concept: {SelectedConcept}, Unit: {Unit}");

            var conceptFull = await GoSECEdgarWSAppService.GetXBRLConceptFullAsync(Ticker, SelectedConcept);
            if (conceptFull != null)
            {
                // Reset variables
                PlotHtml = string.Empty;
                DataJson = string.Empty;
                string unit = "USD";
                int horizon = 12;
                string inferred_freq = "Q";
                bool forecast = false;
                DataJson = JsonConvert.SerializeObject(conceptFull.Data);

                var forecastResult = await SECEdgarWSAppService.GetForecastPlotHtmlAsync(
                    Ticker,
                    CIK,
                    CompanyName,
                    Exchange,
                    SelectedConcept,
                    DataJson,
                    unit,
                    horizon,
                    inferred_freq,
                    forecast);

                if (forecastResult.IsSuccess && !string.IsNullOrWhiteSpace(forecastResult.PlotHtml))
                {
                    formattedJson = string.Empty;
                    PlotHtml = string.Empty;
                    DataJson = string.Empty;
                    await Task.Delay(1000);

                    try
                    {
                        // Remove outer JSON encoding.
                        string innerJson = JsonConvert.DeserializeObject<string>(forecastResult.CombinedDataJson);
                        var token = JToken.Parse(innerJson);
                        if (token is JArray array)
                        {
                            foreach (JObject obj in array.Children<JObject>())
                            {
                                obj.Remove("change_percent");
                                obj.Remove("forecast_comment");
                                obj.Remove("forecast_confidence");
                                obj.Remove("forecastedvalue");
                                obj.Remove("Reporting Period");
                                obj.Remove("trend");
                            }
                        }
                        formattedJson = token.ToString(Formatting.Indented);
                        csvData = JsonToCsvConverter.ConvertJsonToCsv(formattedJson);
                    }
                    catch (Exception ex)
                    {
                        Console.WriteLine($"Double decoding failed: {ex.Message}. Attempting direct parsing.");
                        try
                        {
                            var token = JToken.Parse(forecastResult.CombinedDataJson);
                            formattedJson = token.ToString(Formatting.Indented);
                        }
                        catch (Exception innerEx)
                        {
                            HasError = true;
                            ErrorMessage = $"Error parsing JSON: {innerEx.Message}";
                            Console.WriteLine($"Error parsing CombinedDataJson: {innerEx}");
                        }
                    }

                    // --- Set new chart HTML ---
                    PlotHtml = forecastResult.PlotHtml;

                    // --- Force Re-render: Re-add the container by updating the dynamic key and flag ---
                    chartKey = Guid.NewGuid(); // new key forces Blazor to re-create the DOM element
                    ShowChart = true;
                    StateHasChanged();

                    Console.WriteLine("Successfully fetched XBRL concept plot HTML.");
                }
                else
                {
                    HasError = true;
                    ErrorMessage = "Failed to fetch XBRL concept plot HTML.";
                    Console.WriteLine("Forecast plot HTML is empty or the service call was unsuccessful.");
                }
                await Task.Delay(1000);
                IsLoading = false;
                StateHasChanged();
            }
            else
            {
                HasError = true;
                ErrorMessage = "Failed to fetch full XBRL concept data.";
                Console.WriteLine("Concept full data retrieval returned null.");
            }
            IsLoading = false;
            StateHasChanged();
            Console.WriteLine("XBRL concept full data fetch completed.");
        }
        catch (Exception ex)
        {
            HasError = true;
            ErrorMessage = $"An error occurred while fetching the concept data: {ex.Message}";
            Console.WriteLine($"Error in FetchXBRLPlot: {ex}");
        }
        finally
        {
            IsLoading = false;
            StateHasChanged();
            Console.WriteLine("FetchXBRLPlot process completed.");
        }
    }
    private async Task ClearExistingChartAsync()
    {
        // Remove the chart by clearing the container and forcing a re-render.
        PlotHtml = "";
        chartKey = Guid.NewGuid();
        ShowChart = false;
        StateHasChanged();
        await Task.Delay(300); // Wait for the DOM to update

        // Call the JS cleanup function
        try
        {
            await JSRuntime.InvokeVoidAsync("destroyPlotlyInstanceDelayed", "chart-wrapper", "plot-container", 200);
        }
        catch (JSDisconnectedException jsex)
        {
            Console.WriteLine("JS interop call aborted: " + jsex.Message);
        }
        catch (Exception ex)
        {
            Console.WriteLine("Error during JS cleanup: " + ex.Message);
        }
    }
     private async Task FetchXBRLPlotForecast()
    {
        try
        {
            IsLoading = true;
            HasError = false;
            ErrorMessage = string.Empty;

            // Log the start of the fetch process.
            Console.WriteLine($"Fetching full XBRL concept for Ticker: {Ticker}, Concept: {SelectedConcept}, Unit: {Unit}");

            // Retrieve the full XBRL concept data.
            var conceptFull = await GoSECEdgarWSAppService.GetXBRLConceptFullAsync(Ticker, SelectedConcept);

            if (conceptFull != null)
            {
                // Define the required parameters for forecasting.
                string unit = "USD";
                int horizon = 12;
                string inferred_freq = "Q"; 
                bool forecast = true;
                
                // Serialize the conceptFull.Data (List<Dictionary<string, object>>) to a JSON string.
                DataJson = Newtonsoft.Json.JsonConvert.SerializeObject(conceptFull.Data);

                // Call the forecast plot service using all required parameters.
                var forecastResult = await SECEdgarWSAppService.GetForecastPlotHtmlAsync(
                    Ticker, 
                    CIK,
                    CompanyName,
                    Exchange,
                    SelectedConcept, 
                    DataJson, 
                    unit,
                    horizon,
                    inferred_freq,
                    forecast);

                // Check if the forecast plot HTML is non-empty.
                if (forecastResult.IsSuccess && !string.IsNullOrWhiteSpace(forecastResult.PlotHtml))
                {
                    formattedJson = string.Empty;
                    PlotHtml = string.Empty;
                    DataJson = string.Empty;
                    await Task.Delay(1000);

                    // Serialize the returned concept object to indented JSON for display.
                    DataJson = Newtonsoft.Json.JsonConvert.SerializeObject(
                        forecastResult.CombinedDataJson, 
                        Newtonsoft.Json.Formatting.Indented);

                    formattedJson = DataJson;

                    PlotHtml = forecastResult.PlotHtml;
                    //ForecastPlotHtml = forecastResult.ForecastPlotHtml;
                    Console.WriteLine("Successfully fetched XBRL concept plot HTML.");
                }
                else
                {
                    HasError = true;
                    ErrorMessage = "Failed to fetch XBRL concept plot HTML.";
                    Console.WriteLine("Forecast plot HTML is empty or the service call was unsuccessful.");
                }

                // Optionally, add a delay to show loading state.
                await Task.Delay(1000);
                IsLoading = false;
                StateHasChanged();
            }
            else
            {
                HasError = true;
                ErrorMessage = "Failed to fetch full XBRL concept data.";
                Console.WriteLine("Concept full data retrieval returned null.");
            }

            IsLoading = false;
            StateHasChanged();
            Console.WriteLine("XBRL concept full data fetch completed.");
        }
        catch (Exception ex)
        {
            HasError = true;
            ErrorMessage = $"An error occurred while fetching the concept data: {ex.Message}";
            Console.WriteLine($"Error in FetchXBRLPlotForecast: {ex}");
        }
        finally
        {
            IsLoading = false;
            StateHasChanged();
            Console.WriteLine("FetchXBRLPlotForecast process completed.");
        }
    }

    private void ClearPreviousData()
    {
        PlotHtml = null;
        //DataJson = null;
        formattedJson = null;
        PlotAnomaliesPngBase64 = null;
    }

    private void LogFetchResults()
    {
        if (string.IsNullOrEmpty(PlotHtml))
        {
            Console.WriteLine("Plot HTML is empty or null.");
        }
        else
        {
            Console.WriteLine($"PlotHtml successfully fetched with length: {PlotHtml.Length}");
        }

        if (string.IsNullOrEmpty(PlotAnomaliesPngBase64))
        {
            Console.WriteLine("Plot PNG Base64 is empty or null.");
        }
        else
        {
            Console.WriteLine($"PlotAnomaliesPngBase64 successfully fetched with length: {PlotAnomaliesPngBase64.Length}");
        }

        if (string.IsNullOrEmpty(DataJson))
        {
            Console.WriteLine("Data JSON is empty or null.");
        }
        else
        {
            Console.WriteLine($"DataJson successfully fetched with length: {DataJson.Length}");
        }
    }
}


@code {

    private List<string> AvailableForms { get; set; } = new List<string>();
    private string SelectedForm { get; set; } = string.Empty;
    private string FilingAccessionNumber { get; set; } = string.Empty;
    private string FilingPrimaryDocument { get; set; } = string.Empty;

    private bool accordionOpenAllFilings = true;
    private bool formOpenListFilings = true;

    private bool IsMenuButtonDisabled => string.IsNullOrEmpty(Ticker) || IsLoading;

    private static readonly Regex TickerRegex = new Regex(@"^[A-Za-z0-9]+$", RegexOptions.Compiled);

    private async Task FetchAvailableForms()
    {
        try
        {
            IsLoading = true;
            HasError = false;
            ErrorMessage = string.Empty;

            // Validate ticker format
            if (string.IsNullOrWhiteSpace(Ticker) || !TickerRegex.IsMatch(Ticker))
            {
                Logger.LogWarning("Invalid ticker format provided. Skipping processing.");
                return;
            }

            // Fetch the CIK for the ticker.
            CIK = await SECEdgarWSAppService.GetCIKAsync(Ticker);
            if (string.IsNullOrEmpty(CIK))
            {
                Logger.LogInformation($"No CIK found for ticker '{Ticker}'. Skipping further processing.");
                return;
            }
            CIK = CIK?.PadLeft(10, '0');

            // Fetch the company name.
            CompanyName = await SECEdgarWSAppService.GetNameAsync(Ticker);
            if (string.IsNullOrEmpty(CompanyName))
            {
                Logger.LogInformation($"No company name found for ticker '{Ticker}'. Skipping further processing.");
                return;
            }

            // Fetch the exchange.
            Exchange = await SECEdgarWSAppService.GetExchangeAsync(Ticker);
            if (string.IsNullOrEmpty(Exchange))
            {
                Logger.LogInformation($"No Exchange found for ticker '{Ticker}'. Skipping further processing.");
                return;
            }

            // Fetch available forms.
            var forms = await SECEdgarWSAppService.GetAvailableFormsAsync(Ticker);

            // Process, filter, and sort forms.
            AvailableForms = forms?
                .Select(f => f.Trim())
                .Where(f => !string.IsNullOrWhiteSpace(f))
                .Distinct()
                .OrderBy(f => f)
                .ToList() ?? new List<string>();

            if (AvailableForms.Any())
            {
                Logger.LogInformation($"Available forms for ticker '{Ticker}': {string.Join(", ", AvailableForms)}");
            }
            else
            {
                Logger.LogInformation($"No forms available for ticker '{Ticker}'. Forms list will remain empty.");
            }
        }
        catch (HttpRequestException httpEx)
        {
            Logger.LogWarning(httpEx, $"Network issue while fetching data for ticker '{Ticker}'. Skipping processing.");
        }
        catch (Exception ex)
        {
            Logger.LogWarning(ex, $"Unexpected issue occurred while fetching data for ticker '{Ticker}'. Skipping processing.");
        }
        finally
        {
            IsLoading = false;
            await InvokeAsync(StateHasChanged);
        }
    }
    /*The U.S. Securities and Exchange Commission (SEC) requires companies to submit various forms to ensure transparency
    and protect investors. Here's a summary of some common SEC forms:

    - **Form 10-K**: An annual report providing a comprehensive overview of a company's financial condition, including
    audited financial statements.

    - **Form 10-Q**: A quarterly report detailing a company's financial performance over three months, offering unaudited
    financial statements and updates on operations.

    - **Form 8-K**: A report filed to announce significant events that shareholders should know about, such as acquisitions,
    bankruptcies, or changes in executive leadership.

    - **Form 4**: Filed by insiders to disclose changes in their ownership of a company's securities, ensuring transparency
    in insider trading activities.

    - **Form 3**: The initial filing by an insider to report their ownership of company securities when they first become an
    insider.

    - **Form 5**: An annual report filed by insiders to disclose transactions that were not reported earlier on Forms 3 or
    4.

    - **Form S-3**: A simplified registration form for companies to register securities offerings, often used for secondary
    offerings.

    - **Form S-4**: Filed by companies to register securities issued in certain business combination transactions, such as
    mergers or acquisitions.

    - **Form S-8**: Used to register securities offered to employees through benefit or incentive plans.

    - **Schedule 13D**: Filed by anyone who acquires beneficial ownership of more than 5% of a voting class of a company's
    equity securities, detailing the purpose of the acquisition.

    - **Schedule 13G**: A shorter version of Schedule 13D, filed by certain passive investors owning more than 5% but
    without intent to influence control.

    - **Form DEF 14A**: A definitive proxy statement sent to shareholders, providing information on matters to be discussed
    at a shareholder meeting.

    - **Form 144**: Filed by affiliates intending to sell restricted or control securities, notifying the SEC of the
    proposed sale.

    - **Form SD**: Filed to disclose the use of conflict minerals originating in the Democratic Republic of the Congo or
    adjoining countries.

    These forms are essential tools for investors to assess a company's financial health, operations, and potential risks.
    For more detailed information, you can refer to the SEC's official guide on using EDGAR to research investments.
    */
    private async Task OnFormMenuChange(MenuChangeEventArgs args)
    {
        if (args?.Value is not null)
        {
            SelectedForm = args.Value;
            Logger.LogInformation($"OnFormMenuChange Selected form: {SelectedForm}");
            await DownloadSelectedFormPdf();
            formOpenListFilings = true;
        }
    }
    private async Task DownloadSelectedFormPdf()
    {
        try
        {
            IsLoading = true;
            HasError = false;
            ErrorMessage = string.Empty;

            // Fetch HTML content as a string
            var htmlContent = await SECEdgarWSAppService.DownloadLatestFilingHtmlAsync(Ticker, SelectedForm);
            //Logger.LogInformation($"htmlContent: {htmlContent}");
            HTMLContentListFilings = htmlContent;
            Logger.LogInformation($"DownloadSelectedFormPdf HTMLContentListFilings: {HTMLContentListFilings}");

            //string filePath = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.Desktop), $"{Ticker}_{SelectedForm}_Test.html");
            //await File.WriteAllTextAsync(filePath, HTMLContent);
            //Console.WriteLine($"HTML saved to: {filePath}");

            PDFDataUrlContentListFilings = null;
            // Convert HTML to PDF using the new method that expects Gotenberg to handle pagination
            //var pdfBytes = await GotenbergWSAppService.ConvertFullHtmlToPdfAsync(htmlContent);
            // Save PDF locally for testing
            //string filePath = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.Desktop), $"{Ticker}_{SelectedForm}_Test.pdf");
            //await File.WriteAllBytesAsync(filePath, pdfBytes);

            //Console.WriteLine($"PDF saved to: {filePath}");
            //PDFDataUrl = $"data:application/pdf;base64,{Convert.ToBase64String(pdfBytes)}";

            //Console.WriteLine("HTML successfully downloaded and converted to PDF.");
            //CIK = await SECEdgarWSAppService.GetCIKAsync(Ticker);

            FilingsJson = null; // Clear filings data when fetching new CIK
            AllFilings = null;
        }
        catch (Exception ex)
        {
            HasError = true;
            ErrorMessage = $"An error occurred while downloading and converting the HTML for {Ticker}: {ex.Message}";
            PDFDataUrlContentListFilings = null;
            PlotHtml = null;
        }
        finally
        {
            IsLoading = false;
        }
    }
    bool loadingInput3 = false;
    private async Task ConvertAndSavePdfContentListFilings()
    {
        if (!string.IsNullOrEmpty(HTMLContentListFilings))
        {
            loadingInput3 = true;
            
            // Convert the HTML to PDF bytes using your Gotenberg service.
            var pdfBytes = await GotenbergWSAppService.ConvertFullHtmlToPdfAsync(HTMLContentListFilings);
            
            // Create an informative filename using Ticker, SelectedForm, and current date/time.
            string fileName = $"{Ticker}_{SelectedForm}_{DateTime.Now:yyyyMMdd_HHmmss}.pdf";
            
            // (Optional) Save the PDF locally for testing.
            // string filePath = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.Desktop), fileName);
            // await File.WriteAllBytesAsync(filePath, pdfBytes);

            // Convert the PDF bytes to a Base64 string.
            string base64Pdf = Convert.ToBase64String(pdfBytes);
            
            // Use JS interop to trigger the file download.
            // The fourth parameter 'true' indicates the content is Base64 encoded.
            await jsRuntime.InvokeVoidAsync("downloadFileWithMime", fileName, base64Pdf, "application/pdf", true);
            
            loadingInput3 = false;
        }
    }
    bool loadingInput5 = false;
    private async Task ConvertAndSavePdfContentAllFilings()
    {
        if (!string.IsNullOrEmpty(HtmlContentAllFilings))
        {
            loadingInput5 = true;
            
            // Convert the HTML to PDF bytes using your Gotenberg service.
            var pdfBytes = await GotenbergWSAppService.ConvertFullHtmlToPdfAsync(HtmlContentAllFilings);
            
            // Create an informative filename using Ticker, SelectedForm, and current date/time.
            string fileName = $"{Ticker}_{FilingAccessionNumber}_{FilingPrimaryDocument}_{DateTime.Now:yyyyMMdd_HHmmss}.pdf";
            
            // (Optional) Save the PDF locally for testing.
            // string filePath = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.Desktop), fileName);
            // await File.WriteAllBytesAsync(filePath, pdfBytes);

            // Convert the PDF bytes to a Base64 string.
            string base64Pdf = Convert.ToBase64String(pdfBytes);
            
            // Use JS interop to trigger the file download.
            // The fourth parameter 'true' indicates the content is Base64 encoded.
            await jsRuntime.InvokeVoidAsync("downloadFileWithMime", fileName, base64Pdf, "application/pdf", true);
            
            loadingInput5 = false;
        }
    }
   bool loadingInput9 = false;
    private async Task ConvertAndSavePdfHtmlContentCompletion()
    {
        if (!string.IsNullOrEmpty(HtmlContentCompletion))
        {
            loadingInput9 = true;
            
            // Convert the HTML to PDF bytes using your Gotenberg service.
            var pdfBytes = await GotenbergWSAppService.ConvertFullHtmlToPdfAsync(HtmlContentCompletion);
            
            // Create an informative filename using Ticker, SelectedForm, and current date/time.
            string fileName = $"{Ticker}_{SelectedConceptTitle}_FilingScoutAI_{DateTime.Now:yyyyMMdd_HHmmss}.pdf";
            
            // (Optional) Save the PDF locally for testing.
            // string filePath = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.Desktop), fileName);
            // await File.WriteAllBytesAsync(filePath, pdfBytes);

            // Convert the PDF bytes to a Base64 string.
            string base64Pdf = Convert.ToBase64String(pdfBytes);
            
            // Use JS interop to trigger the file download.
            // The fourth parameter 'true' indicates the content is Base64 encoded.
            await jsRuntime.InvokeVoidAsync("downloadFileWithMime", fileName, base64Pdf, "application/pdf", true);
            
            loadingInput9 = false;
        }
    }
    private async Task<string> ConvertHtmlToPdfDataUrlAsync(string htmlContent)
    {
        // Call the service method to get the PDF as a byte array.
        var pdfBytes = await GotenbergWSAppService.ConvertFullHtmlToPdfAsync(htmlContent);
        
        // Convert the PDF bytes to a Base64 string and prepend the data URL header.
        string pdfDataUrl = $"data:application/pdf;base64,{Convert.ToBase64String(pdfBytes)}";
        
        return pdfDataUrl;
    }

}
@code
{
    Orientation orientation = Orientation.Horizontal;

    private void OnResizedHandler(SplitterResizedEventArgs args)
    {
    }
}

@code {
    private string helloMessage = string.Empty;


}
@code {
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("Prism.highlightAll");
        } else
        {
            // If JSON content has changed, re-highlight
            await JSRuntime.InvokeVoidAsync("highlightSyntax");
        }
        if (firstRender && 
            (!string.IsNullOrEmpty(HtmlContentCompletion) || 
            !string.IsNullOrEmpty(HtmlContentLatestFilings) || 
            !string.IsNullOrEmpty(HtmlContentAllFilings)))
        {
            await JSRuntime.InvokeVoidAsync("initializeAnchorNavigation", "contentContainer");
        }
        // await JSRuntime.InvokeVoidAsync("setImageFromBase64", "anomalyImage", PlotAnomaliesPngBase64);

    }
}

@code {
    private Dictionary<string, string> XBRLConceptCache = new(); // In-memory cache
    private List<XbrlConcept> AvailableConcepts { get; set; } = new();
    private List<XBRLConcept> AvailableConceptTree { get; set; } = new();
    private bool SubmittingFinancialConceptsQuestions = false;

    private bool conceptMenuOpen = false; // Default value is closed
    // Cached tree view items.
    private IEnumerable<ITreeViewItem>? _availableConceptsItems = null;
    public IEnumerable<ITreeViewItem>? AvailableConceptsItems
    {
        get
        {
            if (_availableConceptsItems == null && AvailableConceptsTree != null)
            {
                // Use AvailableConceptsTree (the fetched tree) to populate the dictionary.
                PopulateConceptDescriptions(AvailableConceptsTree);

                // Cache the converted tree item.
                _availableConceptsItems = new List<ITreeViewItem>
                {
                    ConvertXBRLNodeToTreeViewItem(AvailableConceptsTree)
                };
            }
            return _availableConceptsItems;
        }
    }
        // --- 2. Converting XBRL Nodes to TreeView Items ---
    private TreeViewItem ConvertXBRLNodeToTreeViewItem(XBRLNode node)
    {
        if (node == null)
            return null;

        bool hasConcept = node.Concept != null && !string.IsNullOrWhiteSpace(node.Concept.Label);
        string displayText;
        string id;

        if (hasConcept)
        {
            displayText = node.Concept.Label;
            id = node.Concept.Name;
        }
        else
        {
            string labelText = node.Label.Replace("[G]", "");
            if (labelText == "loc_StatementLineItems")
            {
                labelText = "Statement Items";
            }
            displayText = labelText;
            id = string.Empty;
        }

        StateHasChanged();

        var iconForConcept = new Icons.Regular.Size20.ChartMultiple(); // Replace with your desired icon.
        var treeItem = new TreeViewItem
        {
            Text = displayText,
            IconCollapsed = hasConcept ? iconForConcept : null,
            IconExpanded = hasConcept ? iconForConcept : null,
            Expanded = false,
            Items = (node.Children != null && node.Children.Any())
                        ? node.Children.ConvertAll(child => ConvertXBRLNodeToTreeViewItem(child))
                        : null
        };

        if (hasConcept)
        {
            treeItem.Id = id;
        }

        StateHasChanged();
        return treeItem;
    }
 // --- 3. Handling Selection Changes ---
    private async void OnSelectedAvailableConceptsItemChanged(ITreeViewItem value)
    {
        if (value == null)
        {
            Console.WriteLine("SelectedAvailableConceptsItem set to null.");
            SelectedConcept = string.Empty;
            SelectedConceptTitle = string.Empty;
            SelectedConceptDescription = string.Empty;
            GroupedQuestions = new List<QuestionGroup>();
        }
        else
        {
            Console.WriteLine($"SelectedAvailableConceptsItem updated: Id: {value.Id ?? "null"}, Text: {value.Text}");

            SelectedConcept = value.Id ?? string.Empty;
            SelectedConceptTitle = value.Text ?? string.Empty;

            if (!string.IsNullOrEmpty(SelectedConcept) &&
                _conceptDescriptions.TryGetValue(SelectedConcept, out var conceptDesc))
            {
                SelectedConceptDescription = conceptDesc;
            }
            else
            {
                SelectedConceptDescription = string.Empty;
            }

            Console.WriteLine($"SelectedConceptDescription: {SelectedConceptDescription}");
            StateHasChanged();

            await FetchXBRLPlot();
        }
    }

        // In-memory lookup: maps concept ID to description.
    private Dictionary<string, string> _conceptDescriptions = new Dictionary<string, string>();

    private XBRLNode _availableConceptsTree;
    public XBRLNode AvailableConceptsTree
    {
        get => _availableConceptsTree;
        set
        {
            if (_availableConceptsTree != value)
            {
                _availableConceptsTree = value;
                InvalidateTreeItems();
            }
        }
    }

    private void InvalidateTreeItems()
    {
        _availableConceptsItems = null;
        StateHasChanged();
    }

    // Model representing a group of questions
    public class QuestionGroup
    {
        public string Title { get; set; }
        public List<string> ContentLines { get; set; }
    }

    // This will hold our grouped questions for the accordion
    private List<QuestionGroup> GroupedQuestions { get; set; } = new List<QuestionGroup>();

     // Selected concept properties.
    public string SelectedConcept { get; set; } = string.Empty;
    public string SelectedConceptTitle { get; set; } = string.Empty;
    public string SelectedConceptDescription { get; set; } = string.Empty;
    
    public string SelectedConceptQuestionTitle { get; set; } = string.Empty;
    public string SelectedConceptQuestionDescription { get; set; } = string.Empty;
    private async Task SelectQuestion(string title, string content)
    {
        SelectedConceptQuestionTitle = title;
        SelectedConceptQuestionDescription = content;
        Submitting = true;
                   PanelOutput = await azureOpenAIHandler.GenerateAIAletheiaFinancialConceptsInstructionsAsync(
                PromptTextFinancialConcepts, 
                "",
                Ticker + "|" + CompanyName,
                SelectedConceptTitle,
                SelectedConceptDescription,
                SelectedConceptQuestionTitle,
                SelectedConceptQuestionDescription,
                DataJson);
            HtmlContentCompletion = MarkdownRenderer.ConvertMarkdownToHtml(PanelOutput);     
        Submitting = false;

        StateHasChanged();
    }
    public string PromptTextFinancialConcepts { get; set; } = "";

    private ITreeViewItem? _selectedAvailableConceptsItem = null;
    private ITreeViewItem? SelectedAvailableConceptsItem
    {
        get => _selectedAvailableConceptsItem;
        set
        {
            if (_selectedAvailableConceptsItem != value) // Detect changes.
            {
                _selectedAvailableConceptsItem = value;
                OnSelectedAvailableConceptsItemChanged(value);
            }
        }
    }
    // --- 1. Populating the Dictionary ---
    private void PopulateConceptDescriptions(XBRLNode node)
    {
        if (node == null)
            return;

        if (node.Matched && node.Concept != null && !string.IsNullOrWhiteSpace(node.Concept.Name))
        {
            _conceptDescriptions[node.Concept.Name] = node.Concept.Description;
        }

        if (node.Children != null)
        {
            foreach (var child in node.Children)
            {
                PopulateConceptDescriptions(child);
            }
        }
    }
    
    private bool IsFetchingStreamingData = false;
    private async Task FetchXBRLConceptsAsync()
    {
        try
        {
            IsLoading = true;
            HasError = false;
            ErrorMessage = string.Empty;
            //ClearPreviousPlotData();

            if (XBRLConceptCache.TryGetValue(Ticker, out var cachedResponse))
            {
                Console.WriteLine($"Using cached XBRL concepts for ticker {Ticker}.");
                var cachedTree = JsonConvert.DeserializeObject<XBRLNode>(cachedResponse);
                if (cachedTree != null)
                {
                    AvailableConceptsTree = cachedTree;
                }
                StateHasChanged();
                return;
            }

            int limit = 25;
            XBRLNode tree = await GoSECEdgarWSAppService.listXBRLConceptsAsJSON(Ticker, limit);
            if (tree != null)
            {
                AvailableConceptsTree = tree;
            }
            else
            {
                Console.WriteLine($"Received a null concept tree for ticker {Ticker}.");
            }

            XBRLConceptCache[Ticker] = JsonConvert.SerializeObject(AvailableConceptsTree);
            IsLoading = false;
            StateHasChanged();
        }
        catch (Exception ex)
        {
            HasError = true;
            ErrorMessage = "An error occurred while fetching XBRL concepts.";
            Console.WriteLine($"Error fetching XBRL concepts for ticker {Ticker}: {ex.Message}");
        }
        finally
        {
            IsLoading = false;
        }
    }
    /// <summary>
    /// Processes the XBRL concepts JSON and updates the AvailableConcepts list.
    /// </summary>
    /// <param name="jsonResponse">The JSON response string.</param>
    private void ProcessXBRLConceptsJson(string jsonResponse)
    {
        try
        {
            // Deserialize the JSON directly into a List<XbrlConcept>
            var concepts = JsonConvert.DeserializeObject<List<XbrlConcept>>(jsonResponse);

            if (concepts != null)
            {
                AvailableConcepts = concepts
                    .Where(c => !string.IsNullOrEmpty(c.Name))
                    .ToList(); // Filter out invalid concepts
                Logger.LogInformation($"Successfully processed {AvailableConcepts.Count} XBRL concepts.");
            }
            else
            {
                Logger.LogWarning("No XBRL concepts found in the response.");
                AvailableConcepts = new();
            }
        }
        catch (JsonSerializationException jsonEx)
        {
            Logger.LogError(jsonEx, "Failed to deserialize XBRL concepts JSON.");
            throw;
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Unexpected error processing XBRL concepts JSON.");
            throw;
        }
    }

    /// <summary>
    /// Retrieves the cached XBRL concepts JSON for a given ticker.
    /// </summary>
    /// <param name="ticker">The ticker symbol.</param>
    /// <returns>The cached JSON response, or null if not found.</returns>
    private string? GetCachedXBRLConcepts(string ticker)
    {
        return XBRLConceptCache.TryGetValue(ticker, out var cachedResponse) ? cachedResponse : null;
    }
}

@code {
    private string GetTruncatedLabel(string label)
    {
        const int maxLength = 800;
        if (!string.IsNullOrEmpty(label) && label.Length > maxLength)
        {
            return label.Substring(0, maxLength) + "...";
        }
        return label;
    }

        // Convert Markdown to HTML
    private string ConvertMarkdownToHtml(string markdown)
    {
        var html = Markdown.ToHtml(markdown);

        // Customize styles for markdown elements
        html = html.Replace("<strong>", "<strong style='font-weight:bold; color:#1a73e8;'>");
        html = html.Replace("<p>", "<p style='margin-bottom:1em;'>");
        html = html.Replace("<em>", "<em style='color:#95a5a6;'>");

        // Additional styling for blockquotes, code blocks, etc.
        // Example:
        html = html.Replace("<blockquote>", "<blockquote style='margin-left:20px; color:#555;'>");

        return html;
    }
    private async Task SaveCsv()
    {
        // Create an informative file name using Ticker, SelectedConcept, and the current date/time.
        string fileName = $"{Ticker}_{SelectedConcept}_{DateTime.Now:yyyyMMdd_HHmmss}.csv";
        
        // Convert the JSON to CSV using our helper.
        string csvData = JsonToCsvConverter.ConvertJsonToCsv(formattedJson);

        // Call the generic JavaScript function to download the file,
        // passing the CSV MIME type.
        await jsRuntime.InvokeVoidAsync("downloadFileWithMime", fileName, csvData, "text/csv;charset=utf-8;");
    }
    private bool loadingInput1 = false;

    private async Task CopyFormattedJsonToClipboard()
    {
        if (!string.IsNullOrEmpty(formattedJson))

        loadingInput1 = true;
        StateHasChanged(); // Notify Blazor to re-render the UI with the loading state

        await JSRuntime.InvokeVoidAsync("navigator.clipboard.writeText", formattedJson);

        // Wait for 2000 milliseconds (2 seconds)
        await Task.Delay(2000);

        loadingInput1 = false;
        StateHasChanged(); // Notify Blazor to re-render the UI after loading is complete
    }
    private bool loadingInput2 = false;

    private async Task CopyHTMLContentListFilingsToClipboard()
    {
        if (!string.IsNullOrEmpty(HTMLContentListFilings))

        loadingInput2 = true;
        StateHasChanged(); // Notify Blazor to re-render the UI with the loading state

        await JSRuntime.InvokeVoidAsync("navigator.clipboard.writeText", HTMLContentListFilings);

        // Wait for 2000 milliseconds (2 seconds)
        await Task.Delay(2000);

        loadingInput2 = false;
        StateHasChanged(); // Notify Blazor to re-render the UI after loading is complete
    }

    private bool loadingInput7 = false;

    private async Task CopyHtmlContentAllFilingsToClipboard()
    {
        if (!string.IsNullOrEmpty(HtmlContentAllFilings))

        loadingInput7 = true;
        StateHasChanged(); // Notify Blazor to re-render the UI with the loading state

        await JSRuntime.InvokeVoidAsync("navigator.clipboard.writeText", HtmlContentAllFilings);

        // Wait for 2000 milliseconds (2 seconds)
        await Task.Delay(2000);

        loadingInput7 = false;
        StateHasChanged(); // Notify Blazor to re-render the UI after loading is complete
    }


    private bool loadingInput8 = false;

    private async Task CopyHtmlContentCompletionToClipboard()
    {
        if (!string.IsNullOrEmpty(HtmlContentCompletion))

        loadingInput8 = true;
        StateHasChanged(); // Notify Blazor to re-render the UI with the loading state

        await JSRuntime.InvokeVoidAsync("navigator.clipboard.writeText", HtmlContentCompletion);

        // Wait for 2000 milliseconds (2 seconds)
        await Task.Delay(2000);

        loadingInput8 = false;
        StateHasChanged(); // Notify Blazor to re-render the UI after loading is complete
    }
}

