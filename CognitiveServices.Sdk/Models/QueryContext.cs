// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace CognitiveServices.Sdk.Models
{
    /// <summary>
    /// Defines the query context that Bing used for the request.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.19.0")]
    public partial class QueryContext : IAdditionalDataHolder, IParsable
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>A Boolean value that indicates whether the specified query has adult intent. The value is true if the query has adult intent; otherwise, false.</summary>
        public bool? AdultIntent { get; private set; }
        /// <summary>The query string to use to force Bing to use the original string. For example, if the query string is &quot;saling downwind&quot;, the override query string will be &quot;+saling downwind&quot;. Remember to encode the query string which results in &quot;%2Bsaling+downwind&quot;. This field is included only if the original query string contains a spelling mistake.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? AlterationOverrideQuery { get; private set; }
#nullable restore
#else
        public string AlterationOverrideQuery { get; private set; }
#endif
        /// <summary>The query string used by Bing to perform the query. Bing uses the altered query string if the original query string contained spelling mistakes. For example, if the query string is &quot;saling downwind&quot;, the altered query string will be &quot;sailing downwind&quot;. This field is included only if the original query string contains a spelling mistake.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? AlteredQuery { get; private set; }
#nullable restore
#else
        public string AlteredQuery { get; private set; }
#endif
        /// <summary>A Boolean value that indicates whether Bing requires the user&apos;s location to provide accurate results. If you specified the user&apos;s location by using the X-MSEdge-ClientIP and X-Search-Location headers, you can ignore this field. For location aware queries, such as &quot;today&apos;s weather&quot; or &quot;restaurants near me&quot; that need the user&apos;s location to provide accurate results, this field is set to true. For location aware queries that include the location (for example, &quot;Seattle weather&quot;), this field is set to false. This field is also set to false for queries that are not location aware, such as &quot;best sellers&quot;.</summary>
        public bool? AskUserForLocation { get; private set; }
        /// <summary>The query string as specified in the request.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? OriginalQuery { get; set; }
#nullable restore
#else
        public string OriginalQuery { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::CognitiveServices.Sdk.Models.QueryContext"/> and sets the default values.
        /// </summary>
        public QueryContext()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::CognitiveServices.Sdk.Models.QueryContext"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::CognitiveServices.Sdk.Models.QueryContext CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::CognitiveServices.Sdk.Models.QueryContext();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "adultIntent", n => { AdultIntent = n.GetBoolValue(); } },
                { "alterationOverrideQuery", n => { AlterationOverrideQuery = n.GetStringValue(); } },
                { "alteredQuery", n => { AlteredQuery = n.GetStringValue(); } },
                { "askUserForLocation", n => { AskUserForLocation = n.GetBoolValue(); } },
                { "originalQuery", n => { OriginalQuery = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("originalQuery", OriginalQuery);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
