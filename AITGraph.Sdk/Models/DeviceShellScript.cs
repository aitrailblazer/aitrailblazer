// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace AITGraph.Sdk.Models
{
    /// <summary>
    /// Intune will provide customer the ability to run their Shell scripts on the enrolled Mac OS devices. The script can be run once or periodically.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class DeviceShellScript : global::AITGraph.Sdk.Models.Entity, IParsable
    {
        /// <summary>The list of group assignments for the device management script.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::AITGraph.Sdk.Models.DeviceManagementScriptAssignment>? Assignments { get; set; }
#nullable restore
#else
        public List<global::AITGraph.Sdk.Models.DeviceManagementScriptAssignment> Assignments { get; set; }
#endif
        /// <summary>Does not notify the user a script is being executed</summary>
        public bool? BlockExecutionNotifications { get; set; }
        /// <summary>The date and time the device management script was created. This property is read-only.</summary>
        public DateTimeOffset? CreatedDateTime { get; private set; }
        /// <summary>Optional description for the device management script.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Description { get; set; }
#nullable restore
#else
        public string Description { get; set; }
#endif
        /// <summary>List of run states for this script across all devices.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::AITGraph.Sdk.Models.DeviceManagementScriptDeviceState>? DeviceRunStates { get; set; }
#nullable restore
#else
        public List<global::AITGraph.Sdk.Models.DeviceManagementScriptDeviceState> DeviceRunStates { get; set; }
#endif
        /// <summary>Name of the device management script.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? DisplayName { get; set; }
#nullable restore
#else
        public string DisplayName { get; set; }
#endif
        /// <summary>The interval for script to run. If not defined the script will run once</summary>
        public TimeSpan? ExecutionFrequency { get; set; }
        /// <summary>Script file name.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? FileName { get; set; }
#nullable restore
#else
        public string FileName { get; set; }
#endif
        /// <summary>The list of group assignments for the device management script.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::AITGraph.Sdk.Models.DeviceManagementScriptGroupAssignment>? GroupAssignments { get; set; }
#nullable restore
#else
        public List<global::AITGraph.Sdk.Models.DeviceManagementScriptGroupAssignment> GroupAssignments { get; set; }
#endif
        /// <summary>The date and time the device management script was last modified. This property is read-only.</summary>
        public DateTimeOffset? LastModifiedDateTime { get; private set; }
        /// <summary>Number of times for the script to be retried if it fails</summary>
        public int? RetryCount { get; set; }
        /// <summary>List of Scope Tag IDs for this PowerShellScript instance.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? RoleScopeTagIds { get; set; }
#nullable restore
#else
        public List<string> RoleScopeTagIds { get; set; }
#endif
        /// <summary>Indicates the type of execution context the app runs in.</summary>
        public global::AITGraph.Sdk.Models.RunAsAccountType? RunAsAccount { get; set; }
        /// <summary>Run summary for device management script.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::AITGraph.Sdk.Models.DeviceManagementScriptRunSummary? RunSummary { get; set; }
#nullable restore
#else
        public global::AITGraph.Sdk.Models.DeviceManagementScriptRunSummary RunSummary { get; set; }
#endif
        /// <summary>The script content.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public byte[]? ScriptContent { get; set; }
#nullable restore
#else
        public byte[] ScriptContent { get; set; }
#endif
        /// <summary>List of run states for this script across all users.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::AITGraph.Sdk.Models.DeviceManagementScriptUserState>? UserRunStates { get; set; }
#nullable restore
#else
        public List<global::AITGraph.Sdk.Models.DeviceManagementScriptUserState> UserRunStates { get; set; }
#endif
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::AITGraph.Sdk.Models.DeviceShellScript"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static new global::AITGraph.Sdk.Models.DeviceShellScript CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::AITGraph.Sdk.Models.DeviceShellScript();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public override IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>(base.GetFieldDeserializers())
            {
                { "assignments", n => { Assignments = n.GetCollectionOfObjectValues<global::AITGraph.Sdk.Models.DeviceManagementScriptAssignment>(global::AITGraph.Sdk.Models.DeviceManagementScriptAssignment.CreateFromDiscriminatorValue)?.AsList(); } },
                { "blockExecutionNotifications", n => { BlockExecutionNotifications = n.GetBoolValue(); } },
                { "createdDateTime", n => { CreatedDateTime = n.GetDateTimeOffsetValue(); } },
                { "description", n => { Description = n.GetStringValue(); } },
                { "deviceRunStates", n => { DeviceRunStates = n.GetCollectionOfObjectValues<global::AITGraph.Sdk.Models.DeviceManagementScriptDeviceState>(global::AITGraph.Sdk.Models.DeviceManagementScriptDeviceState.CreateFromDiscriminatorValue)?.AsList(); } },
                { "displayName", n => { DisplayName = n.GetStringValue(); } },
                { "executionFrequency", n => { ExecutionFrequency = n.GetTimeSpanValue(); } },
                { "fileName", n => { FileName = n.GetStringValue(); } },
                { "groupAssignments", n => { GroupAssignments = n.GetCollectionOfObjectValues<global::AITGraph.Sdk.Models.DeviceManagementScriptGroupAssignment>(global::AITGraph.Sdk.Models.DeviceManagementScriptGroupAssignment.CreateFromDiscriminatorValue)?.AsList(); } },
                { "lastModifiedDateTime", n => { LastModifiedDateTime = n.GetDateTimeOffsetValue(); } },
                { "retryCount", n => { RetryCount = n.GetIntValue(); } },
                { "roleScopeTagIds", n => { RoleScopeTagIds = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "runAsAccount", n => { RunAsAccount = n.GetEnumValue<global::AITGraph.Sdk.Models.RunAsAccountType>(); } },
                { "runSummary", n => { RunSummary = n.GetObjectValue<global::AITGraph.Sdk.Models.DeviceManagementScriptRunSummary>(global::AITGraph.Sdk.Models.DeviceManagementScriptRunSummary.CreateFromDiscriminatorValue); } },
                { "scriptContent", n => { ScriptContent = n.GetByteArrayValue(); } },
                { "userRunStates", n => { UserRunStates = n.GetCollectionOfObjectValues<global::AITGraph.Sdk.Models.DeviceManagementScriptUserState>(global::AITGraph.Sdk.Models.DeviceManagementScriptUserState.CreateFromDiscriminatorValue)?.AsList(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public override void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            base.Serialize(writer);
            writer.WriteCollectionOfObjectValues<global::AITGraph.Sdk.Models.DeviceManagementScriptAssignment>("assignments", Assignments);
            writer.WriteBoolValue("blockExecutionNotifications", BlockExecutionNotifications);
            writer.WriteStringValue("description", Description);
            writer.WriteCollectionOfObjectValues<global::AITGraph.Sdk.Models.DeviceManagementScriptDeviceState>("deviceRunStates", DeviceRunStates);
            writer.WriteStringValue("displayName", DisplayName);
            writer.WriteTimeSpanValue("executionFrequency", ExecutionFrequency);
            writer.WriteStringValue("fileName", FileName);
            writer.WriteCollectionOfObjectValues<global::AITGraph.Sdk.Models.DeviceManagementScriptGroupAssignment>("groupAssignments", GroupAssignments);
            writer.WriteIntValue("retryCount", RetryCount);
            writer.WriteCollectionOfPrimitiveValues<string>("roleScopeTagIds", RoleScopeTagIds);
            writer.WriteEnumValue<global::AITGraph.Sdk.Models.RunAsAccountType>("runAsAccount", RunAsAccount);
            writer.WriteObjectValue<global::AITGraph.Sdk.Models.DeviceManagementScriptRunSummary>("runSummary", RunSummary);
            writer.WriteByteArrayValue("scriptContent", ScriptContent);
            writer.WriteCollectionOfObjectValues<global::AITGraph.Sdk.Models.DeviceManagementScriptUserState>("userRunStates", UserRunStates);
        }
    }
}
#pragma warning restore CS0618
