// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace AITGraph.Sdk.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class AccessReviewHistoryDefinition : global::AITGraph.Sdk.Models.Entity, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>The createdBy property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::AITGraph.Sdk.Models.UserIdentity? CreatedBy { get; set; }
#nullable restore
#else
        public global::AITGraph.Sdk.Models.UserIdentity CreatedBy { get; set; }
#endif
        /// <summary>Timestamp when the access review definition was created.</summary>
        public DateTimeOffset? CreatedDateTime { get; set; }
        /// <summary>Determines which review decisions will be included in the fetched review history data if specified. Optional on create. All decisions will be included by default if no decisions are provided on create. Possible values are: approve, deny, dontKnow, notReviewed, and notNotified.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::AITGraph.Sdk.Models.AccessReviewHistoryDecisionFilter?>? Decisions { get; set; }
#nullable restore
#else
        public List<global::AITGraph.Sdk.Models.AccessReviewHistoryDecisionFilter?> Decisions { get; set; }
#endif
        /// <summary>Name for the access review history data collection. Required.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? DisplayName { get; set; }
#nullable restore
#else
        public string DisplayName { get; set; }
#endif
        /// <summary>The downloadUri property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? DownloadUri { get; set; }
#nullable restore
#else
        public string DownloadUri { get; set; }
#endif
        /// <summary>The fulfilledDateTime property</summary>
        public DateTimeOffset? FulfilledDateTime { get; set; }
        /// <summary>If the accessReviewHistoryDefinition is a recurring definition, instances represent each recurrence. A definition that does not recur will have exactly one instance.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::AITGraph.Sdk.Models.AccessReviewHistoryInstance>? Instances { get; set; }
#nullable restore
#else
        public List<global::AITGraph.Sdk.Models.AccessReviewHistoryInstance> Instances { get; set; }
#endif
        /// <summary>A timestamp. Reviews ending on or before this date will be included in the fetched history data. Only required if scheduleSettings is not defined.</summary>
        public DateTimeOffset? ReviewHistoryPeriodEndDateTime { get; set; }
        /// <summary>A timestamp. Reviews starting on or before this date will be included in the fetched history data. Only required if scheduleSettings is not defined.</summary>
        public DateTimeOffset? ReviewHistoryPeriodStartDateTime { get; set; }
        /// <summary>The settings for a recurring access review history definition series. Only required if reviewHistoryPeriodStartDateTime or reviewHistoryPeriodEndDateTime are not defined. Not supported yet.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::AITGraph.Sdk.Models.AccessReviewHistoryScheduleSettings? ScheduleSettings { get; set; }
#nullable restore
#else
        public global::AITGraph.Sdk.Models.AccessReviewHistoryScheduleSettings ScheduleSettings { get; set; }
#endif
        /// <summary>Used to scope what reviews are included in the fetched history data. Fetches reviews whose scope matches with this provided scope. Required.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::AITGraph.Sdk.Models.AccessReviewScope>? Scopes { get; set; }
#nullable restore
#else
        public List<global::AITGraph.Sdk.Models.AccessReviewScope> Scopes { get; set; }
#endif
        /// <summary>Represents the status of the review history data collection. The possible values are: done, inProgress, error, requested, unknownFutureValue.</summary>
        public global::AITGraph.Sdk.Models.AccessReviewHistoryStatus? Status { get; set; }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::AITGraph.Sdk.Models.AccessReviewHistoryDefinition"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static new global::AITGraph.Sdk.Models.AccessReviewHistoryDefinition CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::AITGraph.Sdk.Models.AccessReviewHistoryDefinition();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public override IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>(base.GetFieldDeserializers())
            {
                { "createdBy", n => { CreatedBy = n.GetObjectValue<global::AITGraph.Sdk.Models.UserIdentity>(global::AITGraph.Sdk.Models.UserIdentity.CreateFromDiscriminatorValue); } },
                { "createdDateTime", n => { CreatedDateTime = n.GetDateTimeOffsetValue(); } },
                { "decisions", n => { Decisions = n.GetCollectionOfEnumValues<global::AITGraph.Sdk.Models.AccessReviewHistoryDecisionFilter>()?.AsList(); } },
                { "displayName", n => { DisplayName = n.GetStringValue(); } },
                { "downloadUri", n => { DownloadUri = n.GetStringValue(); } },
                { "fulfilledDateTime", n => { FulfilledDateTime = n.GetDateTimeOffsetValue(); } },
                { "instances", n => { Instances = n.GetCollectionOfObjectValues<global::AITGraph.Sdk.Models.AccessReviewHistoryInstance>(global::AITGraph.Sdk.Models.AccessReviewHistoryInstance.CreateFromDiscriminatorValue)?.AsList(); } },
                { "reviewHistoryPeriodEndDateTime", n => { ReviewHistoryPeriodEndDateTime = n.GetDateTimeOffsetValue(); } },
                { "reviewHistoryPeriodStartDateTime", n => { ReviewHistoryPeriodStartDateTime = n.GetDateTimeOffsetValue(); } },
                { "scheduleSettings", n => { ScheduleSettings = n.GetObjectValue<global::AITGraph.Sdk.Models.AccessReviewHistoryScheduleSettings>(global::AITGraph.Sdk.Models.AccessReviewHistoryScheduleSettings.CreateFromDiscriminatorValue); } },
                { "scopes", n => { Scopes = n.GetCollectionOfObjectValues<global::AITGraph.Sdk.Models.AccessReviewScope>(global::AITGraph.Sdk.Models.AccessReviewScope.CreateFromDiscriminatorValue)?.AsList(); } },
                { "status", n => { Status = n.GetEnumValue<global::AITGraph.Sdk.Models.AccessReviewHistoryStatus>(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public override void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            base.Serialize(writer);
            writer.WriteObjectValue<global::AITGraph.Sdk.Models.UserIdentity>("createdBy", CreatedBy);
            writer.WriteDateTimeOffsetValue("createdDateTime", CreatedDateTime);
            writer.WriteCollectionOfEnumValues<global::AITGraph.Sdk.Models.AccessReviewHistoryDecisionFilter>("decisions", Decisions);
            writer.WriteStringValue("displayName", DisplayName);
            writer.WriteStringValue("downloadUri", DownloadUri);
            writer.WriteDateTimeOffsetValue("fulfilledDateTime", FulfilledDateTime);
            writer.WriteCollectionOfObjectValues<global::AITGraph.Sdk.Models.AccessReviewHistoryInstance>("instances", Instances);
            writer.WriteDateTimeOffsetValue("reviewHistoryPeriodEndDateTime", ReviewHistoryPeriodEndDateTime);
            writer.WriteDateTimeOffsetValue("reviewHistoryPeriodStartDateTime", ReviewHistoryPeriodStartDateTime);
            writer.WriteObjectValue<global::AITGraph.Sdk.Models.AccessReviewHistoryScheduleSettings>("scheduleSettings", ScheduleSettings);
            writer.WriteCollectionOfObjectValues<global::AITGraph.Sdk.Models.AccessReviewScope>("scopes", Scopes);
            writer.WriteEnumValue<global::AITGraph.Sdk.Models.AccessReviewHistoryStatus>("status", Status);
        }
    }
}
#pragma warning restore CS0618
