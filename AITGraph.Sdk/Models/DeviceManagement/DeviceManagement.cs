// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace AITGraph.Sdk.Models.DeviceManagement
{
    /// <summary>
    /// Singleton entity that acts as a container for all device management functionality.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class DeviceManagement : global::AITGraph.Sdk.Models.Entity, IParsable
    {
        /// <summary>The date &amp; time when tenant data moved between scaleunits.</summary>
        public DateTimeOffset? AccountMoveCompletionDateTime { get; set; }
        /// <summary>Admin consent information.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::AITGraph.Sdk.Models.AdminConsent? AdminConsent { get; set; }
#nullable restore
#else
        public global::AITGraph.Sdk.Models.AdminConsent AdminConsent { get; set; }
#endif
        /// <summary>The summary state of ATP onboarding state for this account.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::AITGraph.Sdk.Models.AdvancedThreatProtectionOnboardingStateSummary? AdvancedThreatProtectionOnboardingStateSummary { get; set; }
#nullable restore
#else
        public global::AITGraph.Sdk.Models.AdvancedThreatProtectionOnboardingStateSummary AdvancedThreatProtectionOnboardingStateSummary { get; set; }
#endif
        /// <summary>Android device owner enrollment profile entities.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::AITGraph.Sdk.Models.AndroidDeviceOwnerEnrollmentProfile>? AndroidDeviceOwnerEnrollmentProfiles { get; set; }
#nullable restore
#else
        public List<global::AITGraph.Sdk.Models.AndroidDeviceOwnerEnrollmentProfile> AndroidDeviceOwnerEnrollmentProfiles { get; set; }
#endif
        /// <summary>Android for Work app configuration schema entities.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::AITGraph.Sdk.Models.AndroidForWorkAppConfigurationSchema>? AndroidForWorkAppConfigurationSchemas { get; set; }
#nullable restore
#else
        public List<global::AITGraph.Sdk.Models.AndroidForWorkAppConfigurationSchema> AndroidForWorkAppConfigurationSchemas { get; set; }
#endif
        /// <summary>Android for Work enrollment profile entities.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::AITGraph.Sdk.Models.AndroidForWorkEnrollmentProfile>? AndroidForWorkEnrollmentProfiles { get; set; }
#nullable restore
#else
        public List<global::AITGraph.Sdk.Models.AndroidForWorkEnrollmentProfile> AndroidForWorkEnrollmentProfiles { get; set; }
#endif
        /// <summary>The singleton Android for Work settings entity.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::AITGraph.Sdk.Models.AndroidForWorkSettings? AndroidForWorkSettings { get; set; }
#nullable restore
#else
        public global::AITGraph.Sdk.Models.AndroidForWorkSettings AndroidForWorkSettings { get; set; }
#endif
        /// <summary>The singleton Android managed store account enterprise settings entity.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::AITGraph.Sdk.Models.AndroidManagedStoreAccountEnterpriseSettings? AndroidManagedStoreAccountEnterpriseSettings { get; set; }
#nullable restore
#else
        public global::AITGraph.Sdk.Models.AndroidManagedStoreAccountEnterpriseSettings AndroidManagedStoreAccountEnterpriseSettings { get; set; }
#endif
        /// <summary>Android Enterprise app configuration schema entities.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::AITGraph.Sdk.Models.AndroidManagedStoreAppConfigurationSchema>? AndroidManagedStoreAppConfigurationSchemas { get; set; }
#nullable restore
#else
        public List<global::AITGraph.Sdk.Models.AndroidManagedStoreAppConfigurationSchema> AndroidManagedStoreAppConfigurationSchemas { get; set; }
#endif
        /// <summary>Apple push notification certificate.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::AITGraph.Sdk.Models.ApplePushNotificationCertificate? ApplePushNotificationCertificate { get; set; }
#nullable restore
#else
        public global::AITGraph.Sdk.Models.ApplePushNotificationCertificate ApplePushNotificationCertificate { get; set; }
#endif
        /// <summary>Apple user initiated enrollment profiles</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::AITGraph.Sdk.Models.AppleUserInitiatedEnrollmentProfile>? AppleUserInitiatedEnrollmentProfiles { get; set; }
#nullable restore
#else
        public List<global::AITGraph.Sdk.Models.AppleUserInitiatedEnrollmentProfile> AppleUserInitiatedEnrollmentProfiles { get; set; }
#endif
        /// <summary>The list of assignment filters</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::AITGraph.Sdk.Models.DeviceAndAppManagementAssignmentFilter>? AssignmentFilters { get; set; }
#nullable restore
#else
        public List<global::AITGraph.Sdk.Models.DeviceAndAppManagementAssignmentFilter> AssignmentFilters { get; set; }
#endif
        /// <summary>The Audit Events</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::AITGraph.Sdk.Models.AuditEvent>? AuditEvents { get; set; }
#nullable restore
#else
        public List<global::AITGraph.Sdk.Models.AuditEvent> AuditEvents { get; set; }
#endif
        /// <summary>The list of autopilot events for the tenant.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::AITGraph.Sdk.Models.DeviceManagementAutopilotEvent>? AutopilotEvents { get; set; }
#nullable restore
#else
        public List<global::AITGraph.Sdk.Models.DeviceManagementAutopilotEvent> AutopilotEvents { get; set; }
#endif
        /// <summary>The Cart To Class Associations.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::AITGraph.Sdk.Models.CartToClassAssociation>? CartToClassAssociations { get; set; }
#nullable restore
#else
        public List<global::AITGraph.Sdk.Models.CartToClassAssociation> CartToClassAssociations { get; set; }
#endif
        /// <summary>The available categories</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::AITGraph.Sdk.Models.DeviceManagementSettingCategory>? Categories { get; set; }
#nullable restore
#else
        public List<global::AITGraph.Sdk.Models.DeviceManagementSettingCategory> Categories { get; set; }
#endif
        /// <summary>Collection of certificate connector details, each associated with a corresponding Intune Certificate Connector.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::AITGraph.Sdk.Models.CertificateConnectorDetails>? CertificateConnectorDetails { get; set; }
#nullable restore
#else
        public List<global::AITGraph.Sdk.Models.CertificateConnectorDetails> CertificateConnectorDetails { get; set; }
#endif
        /// <summary>Collection of ChromeOSOnboardingSettings settings associated with account.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::AITGraph.Sdk.Models.ChromeOSOnboardingSettings>? ChromeOSOnboardingSettings { get; set; }
#nullable restore
#else
        public List<global::AITGraph.Sdk.Models.ChromeOSOnboardingSettings> ChromeOSOnboardingSettings { get; set; }
#endif
        /// <summary>The list of CloudPC Connectivity Issue.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::AITGraph.Sdk.Models.CloudPCConnectivityIssue>? CloudPCConnectivityIssues { get; set; }
#nullable restore
#else
        public List<global::AITGraph.Sdk.Models.CloudPCConnectivityIssue> CloudPCConnectivityIssues { get; set; }
#endif
        /// <summary>The list of co-managed devices report</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::AITGraph.Sdk.Models.ManagedDevice>? ComanagedDevices { get; set; }
#nullable restore
#else
        public List<global::AITGraph.Sdk.Models.ManagedDevice> ComanagedDevices { get; set; }
#endif
        /// <summary>The list of co-management eligible devices report</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::AITGraph.Sdk.Models.ComanagementEligibleDevice>? ComanagementEligibleDevices { get; set; }
#nullable restore
#else
        public List<global::AITGraph.Sdk.Models.ComanagementEligibleDevice> ComanagementEligibleDevices { get; set; }
#endif
        /// <summary>List of all compliance categories</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::AITGraph.Sdk.Models.DeviceManagementConfigurationCategory>? ComplianceCategories { get; set; }
#nullable restore
#else
        public List<global::AITGraph.Sdk.Models.DeviceManagementConfigurationCategory> ComplianceCategories { get; set; }
#endif
        /// <summary>The list of Compliance Management Partners configured by the tenant.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::AITGraph.Sdk.Models.ComplianceManagementPartner>? ComplianceManagementPartners { get; set; }
#nullable restore
#else
        public List<global::AITGraph.Sdk.Models.ComplianceManagementPartner> ComplianceManagementPartners { get; set; }
#endif
        /// <summary>List of all compliance policies</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::AITGraph.Sdk.Models.DeviceManagementCompliancePolicy>? CompliancePolicies { get; set; }
#nullable restore
#else
        public List<global::AITGraph.Sdk.Models.DeviceManagementCompliancePolicy> CompliancePolicies { get; set; }
#endif
        /// <summary>List of all ComplianceSettings</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::AITGraph.Sdk.Models.DeviceManagementConfigurationSettingDefinition>? ComplianceSettings { get; set; }
#nullable restore
#else
        public List<global::AITGraph.Sdk.Models.DeviceManagementConfigurationSettingDefinition> ComplianceSettings { get; set; }
#endif
        /// <summary>The Exchange on premises conditional access settings. On premises conditional access will require devices to be both enrolled and compliant for mail access</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::AITGraph.Sdk.Models.OnPremisesConditionalAccessSettings? ConditionalAccessSettings { get; set; }
#nullable restore
#else
        public global::AITGraph.Sdk.Models.OnPremisesConditionalAccessSettings ConditionalAccessSettings { get; set; }
#endif
        /// <summary>A list of ConfigManagerCollection</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::AITGraph.Sdk.Models.ConfigManagerCollection>? ConfigManagerCollections { get; set; }
#nullable restore
#else
        public List<global::AITGraph.Sdk.Models.ConfigManagerCollection> ConfigManagerCollections { get; set; }
#endif
        /// <summary>List of all Configuration Categories</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::AITGraph.Sdk.Models.DeviceManagementConfigurationCategory>? ConfigurationCategories { get; set; }
#nullable restore
#else
        public List<global::AITGraph.Sdk.Models.DeviceManagementConfigurationCategory> ConfigurationCategories { get; set; }
#endif
        /// <summary>List of all Configuration policies</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::AITGraph.Sdk.Models.DeviceManagementConfigurationPolicy>? ConfigurationPolicies { get; set; }
#nullable restore
#else
        public List<global::AITGraph.Sdk.Models.DeviceManagementConfigurationPolicy> ConfigurationPolicies { get; set; }
#endif
        /// <summary>List of all templates</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::AITGraph.Sdk.Models.DeviceManagementConfigurationPolicyTemplate>? ConfigurationPolicyTemplates { get; set; }
#nullable restore
#else
        public List<global::AITGraph.Sdk.Models.DeviceManagementConfigurationPolicyTemplate> ConfigurationPolicyTemplates { get; set; }
#endif
        /// <summary>List of all ConfigurationSettings</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::AITGraph.Sdk.Models.DeviceManagementConfigurationSettingDefinition>? ConfigurationSettings { get; set; }
#nullable restore
#else
        public List<global::AITGraph.Sdk.Models.DeviceManagementConfigurationSettingDefinition> ConfigurationSettings { get; set; }
#endif
        /// <summary>The list of connector status for the tenant.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::AITGraph.Sdk.Models.ConnectorStatusDetails>? ConnectorStatus { get; set; }
#nullable restore
#else
        public List<global::AITGraph.Sdk.Models.ConnectorStatusDetails> ConnectorStatus { get; set; }
#endif
        /// <summary>A configuration entity for MEM features that utilize Data Processor Service for Windows (DPSW) data.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::AITGraph.Sdk.Models.DataProcessorServiceForWindowsFeaturesOnboarding? DataProcessorServiceForWindowsFeaturesOnboarding { get; set; }
#nullable restore
#else
        public global::AITGraph.Sdk.Models.DataProcessorServiceForWindowsFeaturesOnboarding DataProcessorServiceForWindowsFeaturesOnboarding { get; set; }
#endif
        /// <summary>Data sharing consents.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::AITGraph.Sdk.Models.DataSharingConsent>? DataSharingConsents { get; set; }
#nullable restore
#else
        public List<global::AITGraph.Sdk.Models.DataSharingConsent> DataSharingConsents { get; set; }
#endif
        /// <summary>This collections of multiple DEP tokens per-tenant.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::AITGraph.Sdk.Models.DepOnboardingSetting>? DepOnboardingSettings { get; set; }
#nullable restore
#else
        public List<global::AITGraph.Sdk.Models.DepOnboardingSetting> DepOnboardingSettings { get; set; }
#endif
        /// <summary>Collection of Derived credential settings associated with account.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::AITGraph.Sdk.Models.DeviceManagementDerivedCredentialSettings>? DerivedCredentials { get; set; }
#nullable restore
#else
        public List<global::AITGraph.Sdk.Models.DeviceManagementDerivedCredentialSettings> DerivedCredentials { get; set; }
#endif
        /// <summary>The list of detected apps associated with a device.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::AITGraph.Sdk.Models.DetectedApp>? DetectedApps { get; set; }
#nullable restore
#else
        public List<global::AITGraph.Sdk.Models.DetectedApp> DetectedApps { get; set; }
#endif
        /// <summary>The list of device categories with the tenant.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::AITGraph.Sdk.Models.DeviceCategory>? DeviceCategories { get; set; }
#nullable restore
#else
        public List<global::AITGraph.Sdk.Models.DeviceCategory> DeviceCategories { get; set; }
#endif
        /// <summary>The device compliance policies.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::AITGraph.Sdk.Models.DeviceCompliancePolicy>? DeviceCompliancePolicies { get; set; }
#nullable restore
#else
        public List<global::AITGraph.Sdk.Models.DeviceCompliancePolicy> DeviceCompliancePolicies { get; set; }
#endif
        /// <summary>The device compliance state summary for this account.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::AITGraph.Sdk.Models.DeviceCompliancePolicyDeviceStateSummary? DeviceCompliancePolicyDeviceStateSummary { get; set; }
#nullable restore
#else
        public global::AITGraph.Sdk.Models.DeviceCompliancePolicyDeviceStateSummary DeviceCompliancePolicyDeviceStateSummary { get; set; }
#endif
        /// <summary>The summary states of compliance policy settings for this account.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::AITGraph.Sdk.Models.DeviceCompliancePolicySettingStateSummary>? DeviceCompliancePolicySettingStateSummaries { get; set; }
#nullable restore
#else
        public List<global::AITGraph.Sdk.Models.DeviceCompliancePolicySettingStateSummary> DeviceCompliancePolicySettingStateSummaries { get; set; }
#endif
        /// <summary>The last requested time of device compliance reporting for this account. This property is read-only.</summary>
        public DateTimeOffset? DeviceComplianceReportSummarizationDateTime { get; private set; }
        /// <summary>The list of device compliance scripts associated with the tenant.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::AITGraph.Sdk.Models.DeviceComplianceScript>? DeviceComplianceScripts { get; set; }
#nullable restore
#else
        public List<global::AITGraph.Sdk.Models.DeviceComplianceScript> DeviceComplianceScripts { get; set; }
#endif
        /// <summary>Summary of policies in conflict state for this account.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::AITGraph.Sdk.Models.DeviceConfigurationConflictSummary>? DeviceConfigurationConflictSummary { get; set; }
#nullable restore
#else
        public List<global::AITGraph.Sdk.Models.DeviceConfigurationConflictSummary> DeviceConfigurationConflictSummary { get; set; }
#endif
        /// <summary>The device configuration device state summary for this account.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::AITGraph.Sdk.Models.DeviceConfigurationDeviceStateSummary? DeviceConfigurationDeviceStateSummaries { get; set; }
#nullable restore
#else
        public global::AITGraph.Sdk.Models.DeviceConfigurationDeviceStateSummary DeviceConfigurationDeviceStateSummaries { get; set; }
#endif
        /// <summary>Restricted apps violations for this account.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::AITGraph.Sdk.Models.RestrictedAppsViolation>? DeviceConfigurationRestrictedAppsViolations { get; set; }
#nullable restore
#else
        public List<global::AITGraph.Sdk.Models.RestrictedAppsViolation> DeviceConfigurationRestrictedAppsViolations { get; set; }
#endif
        /// <summary>The device configurations.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::AITGraph.Sdk.Models.DeviceConfiguration>? DeviceConfigurations { get; set; }
#nullable restore
#else
        public List<global::AITGraph.Sdk.Models.DeviceConfiguration> DeviceConfigurations { get; set; }
#endif
        /// <summary>Summary of all certificates for all devices.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::AITGraph.Sdk.Models.ManagedAllDeviceCertificateState>? DeviceConfigurationsAllManagedDeviceCertificateStates { get; set; }
#nullable restore
#else
        public List<global::AITGraph.Sdk.Models.ManagedAllDeviceCertificateState> DeviceConfigurationsAllManagedDeviceCertificateStates { get; set; }
#endif
        /// <summary>The device configuration user state summary for this account.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::AITGraph.Sdk.Models.DeviceConfigurationUserStateSummary? DeviceConfigurationUserStateSummaries { get; set; }
#nullable restore
#else
        public global::AITGraph.Sdk.Models.DeviceConfigurationUserStateSummary DeviceConfigurationUserStateSummaries { get; set; }
#endif
        /// <summary>The list of device custom attribute shell scripts associated with the tenant.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::AITGraph.Sdk.Models.DeviceCustomAttributeShellScript>? DeviceCustomAttributeShellScripts { get; set; }
#nullable restore
#else
        public List<global::AITGraph.Sdk.Models.DeviceCustomAttributeShellScript> DeviceCustomAttributeShellScripts { get; set; }
#endif
        /// <summary>The list of device enrollment configurations</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::AITGraph.Sdk.Models.DeviceEnrollmentConfiguration>? DeviceEnrollmentConfigurations { get; set; }
#nullable restore
#else
        public List<global::AITGraph.Sdk.Models.DeviceEnrollmentConfiguration> DeviceEnrollmentConfigurations { get; set; }
#endif
        /// <summary>The list of device health scripts associated with the tenant.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::AITGraph.Sdk.Models.DeviceHealthScript>? DeviceHealthScripts { get; set; }
#nullable restore
#else
        public List<global::AITGraph.Sdk.Models.DeviceHealthScript> DeviceHealthScripts { get; set; }
#endif
        /// <summary>The list of Device Management Partners configured by the tenant.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::AITGraph.Sdk.Models.DeviceManagementPartner>? DeviceManagementPartners { get; set; }
#nullable restore
#else
        public List<global::AITGraph.Sdk.Models.DeviceManagementPartner> DeviceManagementPartners { get; set; }
#endif
        /// <summary>The list of device management scripts associated with the tenant.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::AITGraph.Sdk.Models.DeviceManagementScript>? DeviceManagementScripts { get; set; }
#nullable restore
#else
        public List<global::AITGraph.Sdk.Models.DeviceManagementScript> DeviceManagementScripts { get; set; }
#endif
        /// <summary>Device protection overview.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::AITGraph.Sdk.Models.DeviceProtectionOverview? DeviceProtectionOverview { get; set; }
#nullable restore
#else
        public global::AITGraph.Sdk.Models.DeviceProtectionOverview DeviceProtectionOverview { get; set; }
#endif
        /// <summary>The list of device shell scripts associated with the tenant.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::AITGraph.Sdk.Models.DeviceShellScript>? DeviceShellScripts { get; set; }
#nullable restore
#else
        public List<global::AITGraph.Sdk.Models.DeviceShellScript> DeviceShellScripts { get; set; }
#endif
        /// <summary>A list of connector objects.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::AITGraph.Sdk.Models.DeviceManagementDomainJoinConnector>? DomainJoinConnectors { get; set; }
#nullable restore
#else
        public List<global::AITGraph.Sdk.Models.DeviceManagementDomainJoinConnector> DomainJoinConnectors { get; set; }
#endif
        /// <summary>The embedded SIM activation code pools created by this account.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::AITGraph.Sdk.Models.EmbeddedSIMActivationCodePool>? EmbeddedSIMActivationCodePools { get; set; }
#nullable restore
#else
        public List<global::AITGraph.Sdk.Models.EmbeddedSIMActivationCodePool> EmbeddedSIMActivationCodePools { get; set; }
#endif
        /// <summary>The list of Exchange Connectors configured by the tenant.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::AITGraph.Sdk.Models.DeviceManagementExchangeConnector>? ExchangeConnectors { get; set; }
#nullable restore
#else
        public List<global::AITGraph.Sdk.Models.DeviceManagementExchangeConnector> ExchangeConnectors { get; set; }
#endif
        /// <summary>The list of Exchange On Premisis policies configured by the tenant.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::AITGraph.Sdk.Models.DeviceManagementExchangeOnPremisesPolicy>? ExchangeOnPremisesPolicies { get; set; }
#nullable restore
#else
        public List<global::AITGraph.Sdk.Models.DeviceManagementExchangeOnPremisesPolicy> ExchangeOnPremisesPolicies { get; set; }
#endif
        /// <summary>The policy which controls mobile device access to Exchange On Premises</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::AITGraph.Sdk.Models.DeviceManagementExchangeOnPremisesPolicy? ExchangeOnPremisesPolicy { get; set; }
#nullable restore
#else
        public global::AITGraph.Sdk.Models.DeviceManagementExchangeOnPremisesPolicy ExchangeOnPremisesPolicy { get; set; }
#endif
        /// <summary>The available group policy categories for this account.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::AITGraph.Sdk.Models.GroupPolicyCategory>? GroupPolicyCategories { get; set; }
#nullable restore
#else
        public List<global::AITGraph.Sdk.Models.GroupPolicyCategory> GroupPolicyCategories { get; set; }
#endif
        /// <summary>The group policy configurations created by this account.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::AITGraph.Sdk.Models.GroupPolicyConfiguration>? GroupPolicyConfigurations { get; set; }
#nullable restore
#else
        public List<global::AITGraph.Sdk.Models.GroupPolicyConfiguration> GroupPolicyConfigurations { get; set; }
#endif
        /// <summary>The available group policy definition files for this account.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::AITGraph.Sdk.Models.GroupPolicyDefinitionFile>? GroupPolicyDefinitionFiles { get; set; }
#nullable restore
#else
        public List<global::AITGraph.Sdk.Models.GroupPolicyDefinitionFile> GroupPolicyDefinitionFiles { get; set; }
#endif
        /// <summary>The available group policy definitions for this account.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::AITGraph.Sdk.Models.GroupPolicyDefinition>? GroupPolicyDefinitions { get; set; }
#nullable restore
#else
        public List<global::AITGraph.Sdk.Models.GroupPolicyDefinition> GroupPolicyDefinitions { get; set; }
#endif
        /// <summary>A list of Group Policy migration reports.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::AITGraph.Sdk.Models.GroupPolicyMigrationReport>? GroupPolicyMigrationReports { get; set; }
#nullable restore
#else
        public List<global::AITGraph.Sdk.Models.GroupPolicyMigrationReport> GroupPolicyMigrationReports { get; set; }
#endif
        /// <summary>A list of Group Policy Object files uploaded.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::AITGraph.Sdk.Models.GroupPolicyObjectFile>? GroupPolicyObjectFiles { get; set; }
#nullable restore
#else
        public List<global::AITGraph.Sdk.Models.GroupPolicyObjectFile> GroupPolicyObjectFiles { get; set; }
#endif
        /// <summary>The available group policy uploaded definition files for this account.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::AITGraph.Sdk.Models.GroupPolicyUploadedDefinitionFile>? GroupPolicyUploadedDefinitionFiles { get; set; }
#nullable restore
#else
        public List<global::AITGraph.Sdk.Models.GroupPolicyUploadedDefinitionFile> GroupPolicyUploadedDefinitionFiles { get; set; }
#endif
        /// <summary>The imported device identities.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::AITGraph.Sdk.Models.ImportedDeviceIdentity>? ImportedDeviceIdentities { get; set; }
#nullable restore
#else
        public List<global::AITGraph.Sdk.Models.ImportedDeviceIdentity> ImportedDeviceIdentities { get; set; }
#endif
        /// <summary>Collection of imported Windows autopilot devices.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::AITGraph.Sdk.Models.ImportedWindowsAutopilotDeviceIdentity>? ImportedWindowsAutopilotDeviceIdentities { get; set; }
#nullable restore
#else
        public List<global::AITGraph.Sdk.Models.ImportedWindowsAutopilotDeviceIdentity> ImportedWindowsAutopilotDeviceIdentities { get; set; }
#endif
        /// <summary>The device management intents</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::AITGraph.Sdk.Models.DeviceManagementIntent>? Intents { get; set; }
#nullable restore
#else
        public List<global::AITGraph.Sdk.Models.DeviceManagementIntent> Intents { get; set; }
#endif
        /// <summary>Intune Account ID for given tenant</summary>
        public Guid? IntuneAccountId { get; set; }
        /// <summary>intuneBrand contains data which is used in customizing the appearance of the Company Portal applications as well as the end user web portal.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::AITGraph.Sdk.Models.IntuneBrand? IntuneBrand { get; set; }
#nullable restore
#else
        public global::AITGraph.Sdk.Models.IntuneBrand IntuneBrand { get; set; }
#endif
        /// <summary>Intune branding profiles targeted to AAD groups</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::AITGraph.Sdk.Models.IntuneBrandingProfile>? IntuneBrandingProfiles { get; set; }
#nullable restore
#else
        public List<global::AITGraph.Sdk.Models.IntuneBrandingProfile> IntuneBrandingProfiles { get; set; }
#endif
        /// <summary>The IOS software update installation statuses for this account.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::AITGraph.Sdk.Models.IosUpdateDeviceStatus>? IosUpdateStatuses { get; set; }
#nullable restore
#else
        public List<global::AITGraph.Sdk.Models.IosUpdateDeviceStatus> IosUpdateStatuses { get; set; }
#endif
        /// <summary>The last modified time of reporting for this account. This property is read-only.</summary>
        public DateTimeOffset? LastReportAggregationDateTime { get; private set; }
        /// <summary>The property to enable Non-MDM managed legacy PC management for this account. This property is read-only.</summary>
        public bool? LegacyPcManangementEnabled { get; private set; }
        /// <summary>The MacOS software update account summaries for this account.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::AITGraph.Sdk.Models.MacOSSoftwareUpdateAccountSummary>? MacOSSoftwareUpdateAccountSummaries { get; set; }
#nullable restore
#else
        public List<global::AITGraph.Sdk.Models.MacOSSoftwareUpdateAccountSummary> MacOSSoftwareUpdateAccountSummaries { get; set; }
#endif
        /// <summary>Device cleanup rule</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::AITGraph.Sdk.Models.ManagedDeviceCleanupSettings? ManagedDeviceCleanupSettings { get; set; }
#nullable restore
#else
        public global::AITGraph.Sdk.Models.ManagedDeviceCleanupSettings ManagedDeviceCleanupSettings { get; set; }
#endif
        /// <summary>Encryption report for devices in this account</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::AITGraph.Sdk.Models.ManagedDeviceEncryptionState>? ManagedDeviceEncryptionStates { get; set; }
#nullable restore
#else
        public List<global::AITGraph.Sdk.Models.ManagedDeviceEncryptionState> ManagedDeviceEncryptionStates { get; set; }
#endif
        /// <summary>Device overview</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::AITGraph.Sdk.Models.ManagedDeviceOverview? ManagedDeviceOverview { get; set; }
#nullable restore
#else
        public global::AITGraph.Sdk.Models.ManagedDeviceOverview ManagedDeviceOverview { get; set; }
#endif
        /// <summary>The list of managed devices.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::AITGraph.Sdk.Models.ManagedDevice>? ManagedDevices { get; set; }
#nullable restore
#else
        public List<global::AITGraph.Sdk.Models.ManagedDevice> ManagedDevices { get; set; }
#endif
        /// <summary>Maximum number of DEP tokens allowed per-tenant.</summary>
        public int? MaximumDepTokens { get; set; }
        /// <summary>Collection of MicrosoftTunnelConfiguration settings associated with account.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::AITGraph.Sdk.Models.MicrosoftTunnelConfiguration>? MicrosoftTunnelConfigurations { get; set; }
#nullable restore
#else
        public List<global::AITGraph.Sdk.Models.MicrosoftTunnelConfiguration> MicrosoftTunnelConfigurations { get; set; }
#endif
        /// <summary>Collection of MicrosoftTunnelHealthThreshold settings associated with account.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::AITGraph.Sdk.Models.MicrosoftTunnelHealthThreshold>? MicrosoftTunnelHealthThresholds { get; set; }
#nullable restore
#else
        public List<global::AITGraph.Sdk.Models.MicrosoftTunnelHealthThreshold> MicrosoftTunnelHealthThresholds { get; set; }
#endif
        /// <summary>Collection of MicrosoftTunnelServerLogCollectionResponse settings associated with account.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::AITGraph.Sdk.Models.MicrosoftTunnelServerLogCollectionResponse>? MicrosoftTunnelServerLogCollectionResponses { get; set; }
#nullable restore
#else
        public List<global::AITGraph.Sdk.Models.MicrosoftTunnelServerLogCollectionResponse> MicrosoftTunnelServerLogCollectionResponses { get; set; }
#endif
        /// <summary>Collection of MicrosoftTunnelSite settings associated with account.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::AITGraph.Sdk.Models.MicrosoftTunnelSite>? MicrosoftTunnelSites { get; set; }
#nullable restore
#else
        public List<global::AITGraph.Sdk.Models.MicrosoftTunnelSite> MicrosoftTunnelSites { get; set; }
#endif
        /// <summary>The collection property of MobileAppTroubleshootingEvent.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::AITGraph.Sdk.Models.MobileAppTroubleshootingEvent>? MobileAppTroubleshootingEvents { get; set; }
#nullable restore
#else
        public List<global::AITGraph.Sdk.Models.MobileAppTroubleshootingEvent> MobileAppTroubleshootingEvents { get; set; }
#endif
        /// <summary>The list of Mobile threat Defense connectors configured by the tenant.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::AITGraph.Sdk.Models.MobileThreatDefenseConnector>? MobileThreatDefenseConnectors { get; set; }
#nullable restore
#else
        public List<global::AITGraph.Sdk.Models.MobileThreatDefenseConnector> MobileThreatDefenseConnectors { get; set; }
#endif
        /// <summary>The monitoring property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::AITGraph.Sdk.Models.DeviceManagement.Monitoring? Monitoring { get; set; }
#nullable restore
#else
        public global::AITGraph.Sdk.Models.DeviceManagement.Monitoring Monitoring { get; set; }
#endif
        /// <summary>The collection of Ndes connectors for this account.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::AITGraph.Sdk.Models.NdesConnector>? NdesConnectors { get; set; }
#nullable restore
#else
        public List<global::AITGraph.Sdk.Models.NdesConnector> NdesConnectors { get; set; }
#endif
        /// <summary>The Notification Message Templates.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::AITGraph.Sdk.Models.NotificationMessageTemplate>? NotificationMessageTemplates { get; set; }
#nullable restore
#else
        public List<global::AITGraph.Sdk.Models.NotificationMessageTemplate> NotificationMessageTemplates { get; set; }
#endif
        /// <summary>List of OEM Warranty Statuses</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::AITGraph.Sdk.Models.OemWarrantyInformationOnboarding>? OemWarrantyInformationOnboarding { get; set; }
#nullable restore
#else
        public List<global::AITGraph.Sdk.Models.OemWarrantyInformationOnboarding> OemWarrantyInformationOnboarding { get; set; }
#endif
        /// <summary>The list of device remote action audits with the tenant.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::AITGraph.Sdk.Models.RemoteActionAudit>? RemoteActionAudits { get; set; }
#nullable restore
#else
        public List<global::AITGraph.Sdk.Models.RemoteActionAudit> RemoteActionAudits { get; set; }
#endif
        /// <summary>The remote assist partners.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::AITGraph.Sdk.Models.RemoteAssistancePartner>? RemoteAssistancePartners { get; set; }
#nullable restore
#else
        public List<global::AITGraph.Sdk.Models.RemoteAssistancePartner> RemoteAssistancePartners { get; set; }
#endif
        /// <summary>The remote assistance settings singleton</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::AITGraph.Sdk.Models.RemoteAssistanceSettings? RemoteAssistanceSettings { get; set; }
#nullable restore
#else
        public global::AITGraph.Sdk.Models.RemoteAssistanceSettings RemoteAssistanceSettings { get; set; }
#endif
        /// <summary>Reports singleton</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::AITGraph.Sdk.Models.DeviceManagementReports? Reports { get; set; }
#nullable restore
#else
        public global::AITGraph.Sdk.Models.DeviceManagementReports Reports { get; set; }
#endif
        /// <summary>Collection of resource access settings associated with account.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::AITGraph.Sdk.Models.DeviceManagementResourceAccessProfileBase>? ResourceAccessProfiles { get; set; }
#nullable restore
#else
        public List<global::AITGraph.Sdk.Models.DeviceManagementResourceAccessProfileBase> ResourceAccessProfiles { get; set; }
#endif
        /// <summary>The Resource Operations.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::AITGraph.Sdk.Models.ResourceOperation>? ResourceOperations { get; set; }
#nullable restore
#else
        public List<global::AITGraph.Sdk.Models.ResourceOperation> ResourceOperations { get; set; }
#endif
        /// <summary>List of all reusable settings that can be referred in a policy</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::AITGraph.Sdk.Models.DeviceManagementReusablePolicySetting>? ReusablePolicySettings { get; set; }
#nullable restore
#else
        public List<global::AITGraph.Sdk.Models.DeviceManagementReusablePolicySetting> ReusablePolicySettings { get; set; }
#endif
        /// <summary>List of all reusable settings</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::AITGraph.Sdk.Models.DeviceManagementConfigurationSettingDefinition>? ReusableSettings { get; set; }
#nullable restore
#else
        public List<global::AITGraph.Sdk.Models.DeviceManagementConfigurationSettingDefinition> ReusableSettings { get; set; }
#endif
        /// <summary>The Role Assignments.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::AITGraph.Sdk.Models.DeviceAndAppManagementRoleAssignment>? RoleAssignments { get; set; }
#nullable restore
#else
        public List<global::AITGraph.Sdk.Models.DeviceAndAppManagementRoleAssignment> RoleAssignments { get; set; }
#endif
        /// <summary>The Role Definitions.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::AITGraph.Sdk.Models.RoleDefinition>? RoleDefinitions { get; set; }
#nullable restore
#else
        public List<global::AITGraph.Sdk.Models.RoleDefinition> RoleDefinitions { get; set; }
#endif
        /// <summary>The Role Scope Tags.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::AITGraph.Sdk.Models.RoleScopeTag>? RoleScopeTags { get; set; }
#nullable restore
#else
        public List<global::AITGraph.Sdk.Models.RoleScopeTag> RoleScopeTags { get; set; }
#endif
        /// <summary>A list of ServiceNowConnections</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::AITGraph.Sdk.Models.ServiceNowConnection>? ServiceNowConnections { get; set; }
#nullable restore
#else
        public List<global::AITGraph.Sdk.Models.ServiceNowConnection> ServiceNowConnections { get; set; }
#endif
        /// <summary>The device management intent setting definitions</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::AITGraph.Sdk.Models.DeviceManagementSettingDefinition>? SettingDefinitions { get; set; }
#nullable restore
#else
        public List<global::AITGraph.Sdk.Models.DeviceManagementSettingDefinition> SettingDefinitions { get; set; }
#endif
        /// <summary>Account level settings.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::AITGraph.Sdk.Models.DeviceManagementSettings? Settings { get; set; }
#nullable restore
#else
        public global::AITGraph.Sdk.Models.DeviceManagementSettings Settings { get; set; }
#endif
        /// <summary>The software update status summary.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::AITGraph.Sdk.Models.SoftwareUpdateStatusSummary? SoftwareUpdateStatusSummary { get; set; }
#nullable restore
#else
        public global::AITGraph.Sdk.Models.SoftwareUpdateStatusSummary SoftwareUpdateStatusSummary { get; set; }
#endif
        /// <summary>Tenant mobile device management subscriptions.</summary>
        public global::AITGraph.Sdk.Models.DeviceManagementSubscriptions? Subscriptions { get; set; }
        /// <summary>Tenant mobile device management subscription state.</summary>
        public global::AITGraph.Sdk.Models.DeviceManagementSubscriptionState? SubscriptionState { get; set; }
        /// <summary>The telecom expense management partners.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::AITGraph.Sdk.Models.TelecomExpenseManagementPartner>? TelecomExpenseManagementPartners { get; set; }
#nullable restore
#else
        public List<global::AITGraph.Sdk.Models.TelecomExpenseManagementPartner> TelecomExpenseManagementPartners { get; set; }
#endif
        /// <summary>The available templates</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::AITGraph.Sdk.Models.DeviceManagementTemplate>? Templates { get; set; }
#nullable restore
#else
        public List<global::AITGraph.Sdk.Models.DeviceManagementTemplate> Templates { get; set; }
#endif
        /// <summary>List of all TemplateSettings</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::AITGraph.Sdk.Models.DeviceManagementConfigurationSettingTemplate>? TemplateSettings { get; set; }
#nullable restore
#else
        public List<global::AITGraph.Sdk.Models.DeviceManagementConfigurationSettingTemplate> TemplateSettings { get; set; }
#endif
        /// <summary>TenantAttach RBAC Enablement</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::AITGraph.Sdk.Models.TenantAttachRBAC? TenantAttachRBAC { get; set; }
#nullable restore
#else
        public global::AITGraph.Sdk.Models.TenantAttachRBAC TenantAttachRBAC { get; set; }
#endif
        /// <summary>The terms and conditions associated with device management of the company.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::AITGraph.Sdk.Models.TermsAndConditions>? TermsAndConditions { get; set; }
#nullable restore
#else
        public List<global::AITGraph.Sdk.Models.TermsAndConditions> TermsAndConditions { get; set; }
#endif
        /// <summary>The list of troubleshooting events for the tenant.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::AITGraph.Sdk.Models.DeviceManagementTroubleshootingEvent>? TroubleshootingEvents { get; set; }
#nullable restore
#else
        public List<global::AITGraph.Sdk.Models.DeviceManagementTroubleshootingEvent> TroubleshootingEvents { get; set; }
#endif
        /// <summary>When enabled, users assigned as administrators via Role Assignment Memberships do not require an assigned Intune license. Prior to this, only Intune licensed users were granted permissions with an Intune role unless they were assigned a role via Azure Active Directory. You are limited to 350 unlicensed direct members for each AAD security group in a role assignment, but you can assign multiple AAD security groups to a role if you need to support more than 350 unlicensed administrators. Licensed administrators are unaffected, do not have to be direct members, nor does the 350 member limit apply. This property is read-only.</summary>
        public bool? UnlicensedAdminstratorsEnabled { get; private set; }
        /// <summary>The user experience analytics anomaly entity contains anomaly details.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::AITGraph.Sdk.Models.UserExperienceAnalyticsAnomaly>? UserExperienceAnalyticsAnomaly { get; set; }
#nullable restore
#else
        public List<global::AITGraph.Sdk.Models.UserExperienceAnalyticsAnomaly> UserExperienceAnalyticsAnomaly { get; set; }
#endif
        /// <summary>The user experience analytics anomaly entity contains device details.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::AITGraph.Sdk.Models.UserExperienceAnalyticsAnomalyDevice>? UserExperienceAnalyticsAnomalyDevice { get; set; }
#nullable restore
#else
        public List<global::AITGraph.Sdk.Models.UserExperienceAnalyticsAnomalyDevice> UserExperienceAnalyticsAnomalyDevice { get; set; }
#endif
        /// <summary>The user experience analytics anomaly severity overview entity contains the count information for each severity of anomaly.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::AITGraph.Sdk.Models.UserExperienceAnalyticsAnomalySeverityOverview? UserExperienceAnalyticsAnomalySeverityOverview { get; set; }
#nullable restore
#else
        public global::AITGraph.Sdk.Models.UserExperienceAnalyticsAnomalySeverityOverview UserExperienceAnalyticsAnomalySeverityOverview { get; set; }
#endif
        /// <summary>User experience analytics appHealth Application Performance</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::AITGraph.Sdk.Models.UserExperienceAnalyticsAppHealthApplicationPerformance>? UserExperienceAnalyticsAppHealthApplicationPerformance { get; set; }
#nullable restore
#else
        public List<global::AITGraph.Sdk.Models.UserExperienceAnalyticsAppHealthApplicationPerformance> UserExperienceAnalyticsAppHealthApplicationPerformance { get; set; }
#endif
        /// <summary>User experience analytics appHealth Application Performance by App Version</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::AITGraph.Sdk.Models.UserExperienceAnalyticsAppHealthAppPerformanceByAppVersion>? UserExperienceAnalyticsAppHealthApplicationPerformanceByAppVersion { get; set; }
#nullable restore
#else
        public List<global::AITGraph.Sdk.Models.UserExperienceAnalyticsAppHealthAppPerformanceByAppVersion> UserExperienceAnalyticsAppHealthApplicationPerformanceByAppVersion { get; set; }
#endif
        /// <summary>User experience analytics appHealth Application Performance by App Version details</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::AITGraph.Sdk.Models.UserExperienceAnalyticsAppHealthAppPerformanceByAppVersionDetails>? UserExperienceAnalyticsAppHealthApplicationPerformanceByAppVersionDetails { get; set; }
#nullable restore
#else
        public List<global::AITGraph.Sdk.Models.UserExperienceAnalyticsAppHealthAppPerformanceByAppVersionDetails> UserExperienceAnalyticsAppHealthApplicationPerformanceByAppVersionDetails { get; set; }
#endif
        /// <summary>User experience analytics appHealth Application Performance by App Version Device Id</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::AITGraph.Sdk.Models.UserExperienceAnalyticsAppHealthAppPerformanceByAppVersionDeviceId>? UserExperienceAnalyticsAppHealthApplicationPerformanceByAppVersionDeviceId { get; set; }
#nullable restore
#else
        public List<global::AITGraph.Sdk.Models.UserExperienceAnalyticsAppHealthAppPerformanceByAppVersionDeviceId> UserExperienceAnalyticsAppHealthApplicationPerformanceByAppVersionDeviceId { get; set; }
#endif
        /// <summary>User experience analytics appHealth Application Performance by OS Version</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::AITGraph.Sdk.Models.UserExperienceAnalyticsAppHealthAppPerformanceByOSVersion>? UserExperienceAnalyticsAppHealthApplicationPerformanceByOSVersion { get; set; }
#nullable restore
#else
        public List<global::AITGraph.Sdk.Models.UserExperienceAnalyticsAppHealthAppPerformanceByOSVersion> UserExperienceAnalyticsAppHealthApplicationPerformanceByOSVersion { get; set; }
#endif
        /// <summary>User experience analytics appHealth Model Performance</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::AITGraph.Sdk.Models.UserExperienceAnalyticsAppHealthDeviceModelPerformance>? UserExperienceAnalyticsAppHealthDeviceModelPerformance { get; set; }
#nullable restore
#else
        public List<global::AITGraph.Sdk.Models.UserExperienceAnalyticsAppHealthDeviceModelPerformance> UserExperienceAnalyticsAppHealthDeviceModelPerformance { get; set; }
#endif
        /// <summary>User experience analytics appHealth Device Performance</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::AITGraph.Sdk.Models.UserExperienceAnalyticsAppHealthDevicePerformance>? UserExperienceAnalyticsAppHealthDevicePerformance { get; set; }
#nullable restore
#else
        public List<global::AITGraph.Sdk.Models.UserExperienceAnalyticsAppHealthDevicePerformance> UserExperienceAnalyticsAppHealthDevicePerformance { get; set; }
#endif
        /// <summary>User experience analytics device performance details</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::AITGraph.Sdk.Models.UserExperienceAnalyticsAppHealthDevicePerformanceDetails>? UserExperienceAnalyticsAppHealthDevicePerformanceDetails { get; set; }
#nullable restore
#else
        public List<global::AITGraph.Sdk.Models.UserExperienceAnalyticsAppHealthDevicePerformanceDetails> UserExperienceAnalyticsAppHealthDevicePerformanceDetails { get; set; }
#endif
        /// <summary>User experience analytics appHealth OS version Performance</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::AITGraph.Sdk.Models.UserExperienceAnalyticsAppHealthOSVersionPerformance>? UserExperienceAnalyticsAppHealthOSVersionPerformance { get; set; }
#nullable restore
#else
        public List<global::AITGraph.Sdk.Models.UserExperienceAnalyticsAppHealthOSVersionPerformance> UserExperienceAnalyticsAppHealthOSVersionPerformance { get; set; }
#endif
        /// <summary>User experience analytics appHealth overview</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::AITGraph.Sdk.Models.UserExperienceAnalyticsCategory? UserExperienceAnalyticsAppHealthOverview { get; set; }
#nullable restore
#else
        public global::AITGraph.Sdk.Models.UserExperienceAnalyticsCategory UserExperienceAnalyticsAppHealthOverview { get; set; }
#endif
        /// <summary>User experience analytics baselines</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::AITGraph.Sdk.Models.UserExperienceAnalyticsBaseline>? UserExperienceAnalyticsBaselines { get; set; }
#nullable restore
#else
        public List<global::AITGraph.Sdk.Models.UserExperienceAnalyticsBaseline> UserExperienceAnalyticsBaselines { get; set; }
#endif
        /// <summary>User Experience Analytics Battery Health App Impact</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::AITGraph.Sdk.Models.UserExperienceAnalyticsBatteryHealthAppImpact>? UserExperienceAnalyticsBatteryHealthAppImpact { get; set; }
#nullable restore
#else
        public List<global::AITGraph.Sdk.Models.UserExperienceAnalyticsBatteryHealthAppImpact> UserExperienceAnalyticsBatteryHealthAppImpact { get; set; }
#endif
        /// <summary>User Experience Analytics Battery Health Capacity Details</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::AITGraph.Sdk.Models.UserExperienceAnalyticsBatteryHealthCapacityDetails? UserExperienceAnalyticsBatteryHealthCapacityDetails { get; set; }
#nullable restore
#else
        public global::AITGraph.Sdk.Models.UserExperienceAnalyticsBatteryHealthCapacityDetails UserExperienceAnalyticsBatteryHealthCapacityDetails { get; set; }
#endif
        /// <summary>User Experience Analytics Battery Health Device App Impact</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::AITGraph.Sdk.Models.UserExperienceAnalyticsBatteryHealthDeviceAppImpact>? UserExperienceAnalyticsBatteryHealthDeviceAppImpact { get; set; }
#nullable restore
#else
        public List<global::AITGraph.Sdk.Models.UserExperienceAnalyticsBatteryHealthDeviceAppImpact> UserExperienceAnalyticsBatteryHealthDeviceAppImpact { get; set; }
#endif
        /// <summary>User Experience Analytics Battery Health Device Performance</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::AITGraph.Sdk.Models.UserExperienceAnalyticsBatteryHealthDevicePerformance>? UserExperienceAnalyticsBatteryHealthDevicePerformance { get; set; }
#nullable restore
#else
        public List<global::AITGraph.Sdk.Models.UserExperienceAnalyticsBatteryHealthDevicePerformance> UserExperienceAnalyticsBatteryHealthDevicePerformance { get; set; }
#endif
        /// <summary>User Experience Analytics Battery Health Device Runtime History</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::AITGraph.Sdk.Models.UserExperienceAnalyticsBatteryHealthDeviceRuntimeHistory>? UserExperienceAnalyticsBatteryHealthDeviceRuntimeHistory { get; set; }
#nullable restore
#else
        public List<global::AITGraph.Sdk.Models.UserExperienceAnalyticsBatteryHealthDeviceRuntimeHistory> UserExperienceAnalyticsBatteryHealthDeviceRuntimeHistory { get; set; }
#endif
        /// <summary>User Experience Analytics Battery Health Model Performance</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::AITGraph.Sdk.Models.UserExperienceAnalyticsBatteryHealthModelPerformance>? UserExperienceAnalyticsBatteryHealthModelPerformance { get; set; }
#nullable restore
#else
        public List<global::AITGraph.Sdk.Models.UserExperienceAnalyticsBatteryHealthModelPerformance> UserExperienceAnalyticsBatteryHealthModelPerformance { get; set; }
#endif
        /// <summary>User Experience Analytics Battery Health Os Performance</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::AITGraph.Sdk.Models.UserExperienceAnalyticsBatteryHealthOsPerformance>? UserExperienceAnalyticsBatteryHealthOsPerformance { get; set; }
#nullable restore
#else
        public List<global::AITGraph.Sdk.Models.UserExperienceAnalyticsBatteryHealthOsPerformance> UserExperienceAnalyticsBatteryHealthOsPerformance { get; set; }
#endif
        /// <summary>User Experience Analytics Battery Health Runtime Details</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::AITGraph.Sdk.Models.UserExperienceAnalyticsBatteryHealthRuntimeDetails? UserExperienceAnalyticsBatteryHealthRuntimeDetails { get; set; }
#nullable restore
#else
        public global::AITGraph.Sdk.Models.UserExperienceAnalyticsBatteryHealthRuntimeDetails UserExperienceAnalyticsBatteryHealthRuntimeDetails { get; set; }
#endif
        /// <summary>User experience analytics categories</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::AITGraph.Sdk.Models.UserExperienceAnalyticsCategory>? UserExperienceAnalyticsCategories { get; set; }
#nullable restore
#else
        public List<global::AITGraph.Sdk.Models.UserExperienceAnalyticsCategory> UserExperienceAnalyticsCategories { get; set; }
#endif
        /// <summary>User experience analytics device metric history</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::AITGraph.Sdk.Models.UserExperienceAnalyticsMetricHistory>? UserExperienceAnalyticsDeviceMetricHistory { get; set; }
#nullable restore
#else
        public List<global::AITGraph.Sdk.Models.UserExperienceAnalyticsMetricHistory> UserExperienceAnalyticsDeviceMetricHistory { get; set; }
#endif
        /// <summary>User experience analytics device performance</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::AITGraph.Sdk.Models.UserExperienceAnalyticsDevicePerformance>? UserExperienceAnalyticsDevicePerformance { get; set; }
#nullable restore
#else
        public List<global::AITGraph.Sdk.Models.UserExperienceAnalyticsDevicePerformance> UserExperienceAnalyticsDevicePerformance { get; set; }
#endif
        /// <summary>The user experience analytics device scope entity endpoint to trigger on the service to either START or STOP computing metrics data based on a device scope configuration.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::AITGraph.Sdk.Models.UserExperienceAnalyticsDeviceScope? UserExperienceAnalyticsDeviceScope { get; set; }
#nullable restore
#else
        public global::AITGraph.Sdk.Models.UserExperienceAnalyticsDeviceScope UserExperienceAnalyticsDeviceScope { get; set; }
#endif
        /// <summary>The user experience analytics device scope entity contains device scope configuration use to apply filtering on the endpoint analytics reports.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::AITGraph.Sdk.Models.UserExperienceAnalyticsDeviceScope>? UserExperienceAnalyticsDeviceScopes { get; set; }
#nullable restore
#else
        public List<global::AITGraph.Sdk.Models.UserExperienceAnalyticsDeviceScope> UserExperienceAnalyticsDeviceScopes { get; set; }
#endif
        /// <summary>User experience analytics device scores</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::AITGraph.Sdk.Models.UserExperienceAnalyticsDeviceScores>? UserExperienceAnalyticsDeviceScores { get; set; }
#nullable restore
#else
        public List<global::AITGraph.Sdk.Models.UserExperienceAnalyticsDeviceScores> UserExperienceAnalyticsDeviceScores { get; set; }
#endif
        /// <summary>User experience analytics device Startup History</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::AITGraph.Sdk.Models.UserExperienceAnalyticsDeviceStartupHistory>? UserExperienceAnalyticsDeviceStartupHistory { get; set; }
#nullable restore
#else
        public List<global::AITGraph.Sdk.Models.UserExperienceAnalyticsDeviceStartupHistory> UserExperienceAnalyticsDeviceStartupHistory { get; set; }
#endif
        /// <summary>User experience analytics device Startup Processes</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::AITGraph.Sdk.Models.UserExperienceAnalyticsDeviceStartupProcess>? UserExperienceAnalyticsDeviceStartupProcesses { get; set; }
#nullable restore
#else
        public List<global::AITGraph.Sdk.Models.UserExperienceAnalyticsDeviceStartupProcess> UserExperienceAnalyticsDeviceStartupProcesses { get; set; }
#endif
        /// <summary>User experience analytics device Startup Process Performance</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::AITGraph.Sdk.Models.UserExperienceAnalyticsDeviceStartupProcessPerformance>? UserExperienceAnalyticsDeviceStartupProcessPerformance { get; set; }
#nullable restore
#else
        public List<global::AITGraph.Sdk.Models.UserExperienceAnalyticsDeviceStartupProcessPerformance> UserExperienceAnalyticsDeviceStartupProcessPerformance { get; set; }
#endif
        /// <summary>User experience analytics devices without cloud identity.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::AITGraph.Sdk.Models.UserExperienceAnalyticsDeviceWithoutCloudIdentity>? UserExperienceAnalyticsDevicesWithoutCloudIdentity { get; set; }
#nullable restore
#else
        public List<global::AITGraph.Sdk.Models.UserExperienceAnalyticsDeviceWithoutCloudIdentity> UserExperienceAnalyticsDevicesWithoutCloudIdentity { get; set; }
#endif
        /// <summary>The user experience analytics device events entity contains NRT device timeline event details.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::AITGraph.Sdk.Models.UserExperienceAnalyticsDeviceTimelineEvent>? UserExperienceAnalyticsDeviceTimelineEvent { get; set; }
#nullable restore
#else
        public List<global::AITGraph.Sdk.Models.UserExperienceAnalyticsDeviceTimelineEvent> UserExperienceAnalyticsDeviceTimelineEvent { get; set; }
#endif
        /// <summary>User experience analytics impacting process</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::AITGraph.Sdk.Models.UserExperienceAnalyticsImpactingProcess>? UserExperienceAnalyticsImpactingProcess { get; set; }
#nullable restore
#else
        public List<global::AITGraph.Sdk.Models.UserExperienceAnalyticsImpactingProcess> UserExperienceAnalyticsImpactingProcess { get; set; }
#endif
        /// <summary>User experience analytics metric history</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::AITGraph.Sdk.Models.UserExperienceAnalyticsMetricHistory>? UserExperienceAnalyticsMetricHistory { get; set; }
#nullable restore
#else
        public List<global::AITGraph.Sdk.Models.UserExperienceAnalyticsMetricHistory> UserExperienceAnalyticsMetricHistory { get; set; }
#endif
        /// <summary>User experience analytics model scores</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::AITGraph.Sdk.Models.UserExperienceAnalyticsModelScores>? UserExperienceAnalyticsModelScores { get; set; }
#nullable restore
#else
        public List<global::AITGraph.Sdk.Models.UserExperienceAnalyticsModelScores> UserExperienceAnalyticsModelScores { get; set; }
#endif
        /// <summary>User experience analytics devices not Windows Autopilot ready.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::AITGraph.Sdk.Models.UserExperienceAnalyticsNotAutopilotReadyDevice>? UserExperienceAnalyticsNotAutopilotReadyDevice { get; set; }
#nullable restore
#else
        public List<global::AITGraph.Sdk.Models.UserExperienceAnalyticsNotAutopilotReadyDevice> UserExperienceAnalyticsNotAutopilotReadyDevice { get; set; }
#endif
        /// <summary>User experience analytics overview</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::AITGraph.Sdk.Models.UserExperienceAnalyticsOverview? UserExperienceAnalyticsOverview { get; set; }
#nullable restore
#else
        public global::AITGraph.Sdk.Models.UserExperienceAnalyticsOverview UserExperienceAnalyticsOverview { get; set; }
#endif
        /// <summary>User experience analytics remote connection</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::AITGraph.Sdk.Models.UserExperienceAnalyticsRemoteConnection>? UserExperienceAnalyticsRemoteConnection { get; set; }
#nullable restore
#else
        public List<global::AITGraph.Sdk.Models.UserExperienceAnalyticsRemoteConnection> UserExperienceAnalyticsRemoteConnection { get; set; }
#endif
        /// <summary>User experience analytics resource performance</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::AITGraph.Sdk.Models.UserExperienceAnalyticsResourcePerformance>? UserExperienceAnalyticsResourcePerformance { get; set; }
#nullable restore
#else
        public List<global::AITGraph.Sdk.Models.UserExperienceAnalyticsResourcePerformance> UserExperienceAnalyticsResourcePerformance { get; set; }
#endif
        /// <summary>User experience analytics device Startup Score History</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::AITGraph.Sdk.Models.UserExperienceAnalyticsScoreHistory>? UserExperienceAnalyticsScoreHistory { get; set; }
#nullable restore
#else
        public List<global::AITGraph.Sdk.Models.UserExperienceAnalyticsScoreHistory> UserExperienceAnalyticsScoreHistory { get; set; }
#endif
        /// <summary>User experience analytics device settings</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::AITGraph.Sdk.Models.UserExperienceAnalyticsSettings? UserExperienceAnalyticsSettings { get; set; }
#nullable restore
#else
        public global::AITGraph.Sdk.Models.UserExperienceAnalyticsSettings UserExperienceAnalyticsSettings { get; set; }
#endif
        /// <summary>User experience analytics work from anywhere hardware readiness metrics.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::AITGraph.Sdk.Models.UserExperienceAnalyticsWorkFromAnywhereHardwareReadinessMetric? UserExperienceAnalyticsWorkFromAnywhereHardwareReadinessMetric { get; set; }
#nullable restore
#else
        public global::AITGraph.Sdk.Models.UserExperienceAnalyticsWorkFromAnywhereHardwareReadinessMetric UserExperienceAnalyticsWorkFromAnywhereHardwareReadinessMetric { get; set; }
#endif
        /// <summary>User experience analytics work from anywhere metrics.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::AITGraph.Sdk.Models.UserExperienceAnalyticsWorkFromAnywhereMetric>? UserExperienceAnalyticsWorkFromAnywhereMetrics { get; set; }
#nullable restore
#else
        public List<global::AITGraph.Sdk.Models.UserExperienceAnalyticsWorkFromAnywhereMetric> UserExperienceAnalyticsWorkFromAnywhereMetrics { get; set; }
#endif
        /// <summary>The user experience analytics work from anywhere model performance</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::AITGraph.Sdk.Models.UserExperienceAnalyticsWorkFromAnywhereModelPerformance>? UserExperienceAnalyticsWorkFromAnywhereModelPerformance { get; set; }
#nullable restore
#else
        public List<global::AITGraph.Sdk.Models.UserExperienceAnalyticsWorkFromAnywhereModelPerformance> UserExperienceAnalyticsWorkFromAnywhereModelPerformance { get; set; }
#endif
        /// <summary>Collection of PFX certificates associated with a user.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::AITGraph.Sdk.Models.UserPFXCertificate>? UserPfxCertificates { get; set; }
#nullable restore
#else
        public List<global::AITGraph.Sdk.Models.UserPFXCertificate> UserPfxCertificates { get; set; }
#endif
        /// <summary>The virtualEndpoint property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::AITGraph.Sdk.Models.VirtualEndpoint? VirtualEndpoint { get; set; }
#nullable restore
#else
        public global::AITGraph.Sdk.Models.VirtualEndpoint VirtualEndpoint { get; set; }
#endif
        /// <summary>Windows auto pilot deployment profiles</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::AITGraph.Sdk.Models.WindowsAutopilotDeploymentProfile>? WindowsAutopilotDeploymentProfiles { get; set; }
#nullable restore
#else
        public List<global::AITGraph.Sdk.Models.WindowsAutopilotDeploymentProfile> WindowsAutopilotDeploymentProfiles { get; set; }
#endif
        /// <summary>The Windows autopilot device identities contained collection.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::AITGraph.Sdk.Models.WindowsAutopilotDeviceIdentity>? WindowsAutopilotDeviceIdentities { get; set; }
#nullable restore
#else
        public List<global::AITGraph.Sdk.Models.WindowsAutopilotDeviceIdentity> WindowsAutopilotDeviceIdentities { get; set; }
#endif
        /// <summary>The Windows autopilot account settings.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::AITGraph.Sdk.Models.WindowsAutopilotSettings? WindowsAutopilotSettings { get; set; }
#nullable restore
#else
        public global::AITGraph.Sdk.Models.WindowsAutopilotSettings WindowsAutopilotSettings { get; set; }
#endif
        /// <summary>A collection of windows driver update profiles</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::AITGraph.Sdk.Models.WindowsDriverUpdateProfile>? WindowsDriverUpdateProfiles { get; set; }
#nullable restore
#else
        public List<global::AITGraph.Sdk.Models.WindowsDriverUpdateProfile> WindowsDriverUpdateProfiles { get; set; }
#endif
        /// <summary>A collection of windows feature update profiles</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::AITGraph.Sdk.Models.WindowsFeatureUpdateProfile>? WindowsFeatureUpdateProfiles { get; set; }
#nullable restore
#else
        public List<global::AITGraph.Sdk.Models.WindowsFeatureUpdateProfile> WindowsFeatureUpdateProfiles { get; set; }
#endif
        /// <summary>The windows information protection app learning summaries.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::AITGraph.Sdk.Models.WindowsInformationProtectionAppLearningSummary>? WindowsInformationProtectionAppLearningSummaries { get; set; }
#nullable restore
#else
        public List<global::AITGraph.Sdk.Models.WindowsInformationProtectionAppLearningSummary> WindowsInformationProtectionAppLearningSummaries { get; set; }
#endif
        /// <summary>The windows information protection network learning summaries.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::AITGraph.Sdk.Models.WindowsInformationProtectionNetworkLearningSummary>? WindowsInformationProtectionNetworkLearningSummaries { get; set; }
#nullable restore
#else
        public List<global::AITGraph.Sdk.Models.WindowsInformationProtectionNetworkLearningSummary> WindowsInformationProtectionNetworkLearningSummaries { get; set; }
#endif
        /// <summary>The list of affected malware in the tenant.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::AITGraph.Sdk.Models.WindowsMalwareInformation>? WindowsMalwareInformation { get; set; }
#nullable restore
#else
        public List<global::AITGraph.Sdk.Models.WindowsMalwareInformation> WindowsMalwareInformation { get; set; }
#endif
        /// <summary>Malware overview for windows devices.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::AITGraph.Sdk.Models.WindowsMalwareOverview? WindowsMalwareOverview { get; set; }
#nullable restore
#else
        public global::AITGraph.Sdk.Models.WindowsMalwareOverview WindowsMalwareOverview { get; set; }
#endif
        /// <summary>A collection of windows quality update profiles</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::AITGraph.Sdk.Models.WindowsQualityUpdateProfile>? WindowsQualityUpdateProfiles { get; set; }
#nullable restore
#else
        public List<global::AITGraph.Sdk.Models.WindowsQualityUpdateProfile> WindowsQualityUpdateProfiles { get; set; }
#endif
        /// <summary>A collection of windows update catalog items (fetaure updates item , quality updates item)</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::AITGraph.Sdk.Models.WindowsUpdateCatalogItem>? WindowsUpdateCatalogItems { get; set; }
#nullable restore
#else
        public List<global::AITGraph.Sdk.Models.WindowsUpdateCatalogItem> WindowsUpdateCatalogItems { get; set; }
#endif
        /// <summary>The Collection of ZebraFotaArtifacts.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::AITGraph.Sdk.Models.ZebraFotaArtifact>? ZebraFotaArtifacts { get; set; }
#nullable restore
#else
        public List<global::AITGraph.Sdk.Models.ZebraFotaArtifact> ZebraFotaArtifacts { get; set; }
#endif
        /// <summary>The singleton ZebraFotaConnector associated with account.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::AITGraph.Sdk.Models.ZebraFotaConnector? ZebraFotaConnector { get; set; }
#nullable restore
#else
        public global::AITGraph.Sdk.Models.ZebraFotaConnector ZebraFotaConnector { get; set; }
#endif
        /// <summary>Collection of ZebraFotaDeployments associated with account.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::AITGraph.Sdk.Models.ZebraFotaDeployment>? ZebraFotaDeployments { get; set; }
#nullable restore
#else
        public List<global::AITGraph.Sdk.Models.ZebraFotaDeployment> ZebraFotaDeployments { get; set; }
#endif
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::AITGraph.Sdk.Models.DeviceManagement.DeviceManagement"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static new global::AITGraph.Sdk.Models.DeviceManagement.DeviceManagement CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::AITGraph.Sdk.Models.DeviceManagement.DeviceManagement();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public override IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>(base.GetFieldDeserializers())
            {
                { "accountMoveCompletionDateTime", n => { AccountMoveCompletionDateTime = n.GetDateTimeOffsetValue(); } },
                { "adminConsent", n => { AdminConsent = n.GetObjectValue<global::AITGraph.Sdk.Models.AdminConsent>(global::AITGraph.Sdk.Models.AdminConsent.CreateFromDiscriminatorValue); } },
                { "advancedThreatProtectionOnboardingStateSummary", n => { AdvancedThreatProtectionOnboardingStateSummary = n.GetObjectValue<global::AITGraph.Sdk.Models.AdvancedThreatProtectionOnboardingStateSummary>(global::AITGraph.Sdk.Models.AdvancedThreatProtectionOnboardingStateSummary.CreateFromDiscriminatorValue); } },
                { "androidDeviceOwnerEnrollmentProfiles", n => { AndroidDeviceOwnerEnrollmentProfiles = n.GetCollectionOfObjectValues<global::AITGraph.Sdk.Models.AndroidDeviceOwnerEnrollmentProfile>(global::AITGraph.Sdk.Models.AndroidDeviceOwnerEnrollmentProfile.CreateFromDiscriminatorValue)?.AsList(); } },
                { "androidForWorkAppConfigurationSchemas", n => { AndroidForWorkAppConfigurationSchemas = n.GetCollectionOfObjectValues<global::AITGraph.Sdk.Models.AndroidForWorkAppConfigurationSchema>(global::AITGraph.Sdk.Models.AndroidForWorkAppConfigurationSchema.CreateFromDiscriminatorValue)?.AsList(); } },
                { "androidForWorkEnrollmentProfiles", n => { AndroidForWorkEnrollmentProfiles = n.GetCollectionOfObjectValues<global::AITGraph.Sdk.Models.AndroidForWorkEnrollmentProfile>(global::AITGraph.Sdk.Models.AndroidForWorkEnrollmentProfile.CreateFromDiscriminatorValue)?.AsList(); } },
                { "androidForWorkSettings", n => { AndroidForWorkSettings = n.GetObjectValue<global::AITGraph.Sdk.Models.AndroidForWorkSettings>(global::AITGraph.Sdk.Models.AndroidForWorkSettings.CreateFromDiscriminatorValue); } },
                { "androidManagedStoreAccountEnterpriseSettings", n => { AndroidManagedStoreAccountEnterpriseSettings = n.GetObjectValue<global::AITGraph.Sdk.Models.AndroidManagedStoreAccountEnterpriseSettings>(global::AITGraph.Sdk.Models.AndroidManagedStoreAccountEnterpriseSettings.CreateFromDiscriminatorValue); } },
                { "androidManagedStoreAppConfigurationSchemas", n => { AndroidManagedStoreAppConfigurationSchemas = n.GetCollectionOfObjectValues<global::AITGraph.Sdk.Models.AndroidManagedStoreAppConfigurationSchema>(global::AITGraph.Sdk.Models.AndroidManagedStoreAppConfigurationSchema.CreateFromDiscriminatorValue)?.AsList(); } },
                { "applePushNotificationCertificate", n => { ApplePushNotificationCertificate = n.GetObjectValue<global::AITGraph.Sdk.Models.ApplePushNotificationCertificate>(global::AITGraph.Sdk.Models.ApplePushNotificationCertificate.CreateFromDiscriminatorValue); } },
                { "appleUserInitiatedEnrollmentProfiles", n => { AppleUserInitiatedEnrollmentProfiles = n.GetCollectionOfObjectValues<global::AITGraph.Sdk.Models.AppleUserInitiatedEnrollmentProfile>(global::AITGraph.Sdk.Models.AppleUserInitiatedEnrollmentProfile.CreateFromDiscriminatorValue)?.AsList(); } },
                { "assignmentFilters", n => { AssignmentFilters = n.GetCollectionOfObjectValues<global::AITGraph.Sdk.Models.DeviceAndAppManagementAssignmentFilter>(global::AITGraph.Sdk.Models.DeviceAndAppManagementAssignmentFilter.CreateFromDiscriminatorValue)?.AsList(); } },
                { "auditEvents", n => { AuditEvents = n.GetCollectionOfObjectValues<global::AITGraph.Sdk.Models.AuditEvent>(global::AITGraph.Sdk.Models.AuditEvent.CreateFromDiscriminatorValue)?.AsList(); } },
                { "autopilotEvents", n => { AutopilotEvents = n.GetCollectionOfObjectValues<global::AITGraph.Sdk.Models.DeviceManagementAutopilotEvent>(global::AITGraph.Sdk.Models.DeviceManagementAutopilotEvent.CreateFromDiscriminatorValue)?.AsList(); } },
                { "cartToClassAssociations", n => { CartToClassAssociations = n.GetCollectionOfObjectValues<global::AITGraph.Sdk.Models.CartToClassAssociation>(global::AITGraph.Sdk.Models.CartToClassAssociation.CreateFromDiscriminatorValue)?.AsList(); } },
                { "categories", n => { Categories = n.GetCollectionOfObjectValues<global::AITGraph.Sdk.Models.DeviceManagementSettingCategory>(global::AITGraph.Sdk.Models.DeviceManagementSettingCategory.CreateFromDiscriminatorValue)?.AsList(); } },
                { "certificateConnectorDetails", n => { CertificateConnectorDetails = n.GetCollectionOfObjectValues<global::AITGraph.Sdk.Models.CertificateConnectorDetails>(global::AITGraph.Sdk.Models.CertificateConnectorDetails.CreateFromDiscriminatorValue)?.AsList(); } },
                { "chromeOSOnboardingSettings", n => { ChromeOSOnboardingSettings = n.GetCollectionOfObjectValues<global::AITGraph.Sdk.Models.ChromeOSOnboardingSettings>(global::AITGraph.Sdk.Models.ChromeOSOnboardingSettings.CreateFromDiscriminatorValue)?.AsList(); } },
                { "cloudPCConnectivityIssues", n => { CloudPCConnectivityIssues = n.GetCollectionOfObjectValues<global::AITGraph.Sdk.Models.CloudPCConnectivityIssue>(global::AITGraph.Sdk.Models.CloudPCConnectivityIssue.CreateFromDiscriminatorValue)?.AsList(); } },
                { "comanagedDevices", n => { ComanagedDevices = n.GetCollectionOfObjectValues<global::AITGraph.Sdk.Models.ManagedDevice>(global::AITGraph.Sdk.Models.ManagedDevice.CreateFromDiscriminatorValue)?.AsList(); } },
                { "comanagementEligibleDevices", n => { ComanagementEligibleDevices = n.GetCollectionOfObjectValues<global::AITGraph.Sdk.Models.ComanagementEligibleDevice>(global::AITGraph.Sdk.Models.ComanagementEligibleDevice.CreateFromDiscriminatorValue)?.AsList(); } },
                { "complianceCategories", n => { ComplianceCategories = n.GetCollectionOfObjectValues<global::AITGraph.Sdk.Models.DeviceManagementConfigurationCategory>(global::AITGraph.Sdk.Models.DeviceManagementConfigurationCategory.CreateFromDiscriminatorValue)?.AsList(); } },
                { "complianceManagementPartners", n => { ComplianceManagementPartners = n.GetCollectionOfObjectValues<global::AITGraph.Sdk.Models.ComplianceManagementPartner>(global::AITGraph.Sdk.Models.ComplianceManagementPartner.CreateFromDiscriminatorValue)?.AsList(); } },
                { "compliancePolicies", n => { CompliancePolicies = n.GetCollectionOfObjectValues<global::AITGraph.Sdk.Models.DeviceManagementCompliancePolicy>(global::AITGraph.Sdk.Models.DeviceManagementCompliancePolicy.CreateFromDiscriminatorValue)?.AsList(); } },
                { "complianceSettings", n => { ComplianceSettings = n.GetCollectionOfObjectValues<global::AITGraph.Sdk.Models.DeviceManagementConfigurationSettingDefinition>(global::AITGraph.Sdk.Models.DeviceManagementConfigurationSettingDefinition.CreateFromDiscriminatorValue)?.AsList(); } },
                { "conditionalAccessSettings", n => { ConditionalAccessSettings = n.GetObjectValue<global::AITGraph.Sdk.Models.OnPremisesConditionalAccessSettings>(global::AITGraph.Sdk.Models.OnPremisesConditionalAccessSettings.CreateFromDiscriminatorValue); } },
                { "configManagerCollections", n => { ConfigManagerCollections = n.GetCollectionOfObjectValues<global::AITGraph.Sdk.Models.ConfigManagerCollection>(global::AITGraph.Sdk.Models.ConfigManagerCollection.CreateFromDiscriminatorValue)?.AsList(); } },
                { "configurationCategories", n => { ConfigurationCategories = n.GetCollectionOfObjectValues<global::AITGraph.Sdk.Models.DeviceManagementConfigurationCategory>(global::AITGraph.Sdk.Models.DeviceManagementConfigurationCategory.CreateFromDiscriminatorValue)?.AsList(); } },
                { "configurationPolicies", n => { ConfigurationPolicies = n.GetCollectionOfObjectValues<global::AITGraph.Sdk.Models.DeviceManagementConfigurationPolicy>(global::AITGraph.Sdk.Models.DeviceManagementConfigurationPolicy.CreateFromDiscriminatorValue)?.AsList(); } },
                { "configurationPolicyTemplates", n => { ConfigurationPolicyTemplates = n.GetCollectionOfObjectValues<global::AITGraph.Sdk.Models.DeviceManagementConfigurationPolicyTemplate>(global::AITGraph.Sdk.Models.DeviceManagementConfigurationPolicyTemplate.CreateFromDiscriminatorValue)?.AsList(); } },
                { "configurationSettings", n => { ConfigurationSettings = n.GetCollectionOfObjectValues<global::AITGraph.Sdk.Models.DeviceManagementConfigurationSettingDefinition>(global::AITGraph.Sdk.Models.DeviceManagementConfigurationSettingDefinition.CreateFromDiscriminatorValue)?.AsList(); } },
                { "connectorStatus", n => { ConnectorStatus = n.GetCollectionOfObjectValues<global::AITGraph.Sdk.Models.ConnectorStatusDetails>(global::AITGraph.Sdk.Models.ConnectorStatusDetails.CreateFromDiscriminatorValue)?.AsList(); } },
                { "dataProcessorServiceForWindowsFeaturesOnboarding", n => { DataProcessorServiceForWindowsFeaturesOnboarding = n.GetObjectValue<global::AITGraph.Sdk.Models.DataProcessorServiceForWindowsFeaturesOnboarding>(global::AITGraph.Sdk.Models.DataProcessorServiceForWindowsFeaturesOnboarding.CreateFromDiscriminatorValue); } },
                { "dataSharingConsents", n => { DataSharingConsents = n.GetCollectionOfObjectValues<global::AITGraph.Sdk.Models.DataSharingConsent>(global::AITGraph.Sdk.Models.DataSharingConsent.CreateFromDiscriminatorValue)?.AsList(); } },
                { "depOnboardingSettings", n => { DepOnboardingSettings = n.GetCollectionOfObjectValues<global::AITGraph.Sdk.Models.DepOnboardingSetting>(global::AITGraph.Sdk.Models.DepOnboardingSetting.CreateFromDiscriminatorValue)?.AsList(); } },
                { "derivedCredentials", n => { DerivedCredentials = n.GetCollectionOfObjectValues<global::AITGraph.Sdk.Models.DeviceManagementDerivedCredentialSettings>(global::AITGraph.Sdk.Models.DeviceManagementDerivedCredentialSettings.CreateFromDiscriminatorValue)?.AsList(); } },
                { "detectedApps", n => { DetectedApps = n.GetCollectionOfObjectValues<global::AITGraph.Sdk.Models.DetectedApp>(global::AITGraph.Sdk.Models.DetectedApp.CreateFromDiscriminatorValue)?.AsList(); } },
                { "deviceCategories", n => { DeviceCategories = n.GetCollectionOfObjectValues<global::AITGraph.Sdk.Models.DeviceCategory>(global::AITGraph.Sdk.Models.DeviceCategory.CreateFromDiscriminatorValue)?.AsList(); } },
                { "deviceCompliancePolicies", n => { DeviceCompliancePolicies = n.GetCollectionOfObjectValues<global::AITGraph.Sdk.Models.DeviceCompliancePolicy>(global::AITGraph.Sdk.Models.DeviceCompliancePolicy.CreateFromDiscriminatorValue)?.AsList(); } },
                { "deviceCompliancePolicyDeviceStateSummary", n => { DeviceCompliancePolicyDeviceStateSummary = n.GetObjectValue<global::AITGraph.Sdk.Models.DeviceCompliancePolicyDeviceStateSummary>(global::AITGraph.Sdk.Models.DeviceCompliancePolicyDeviceStateSummary.CreateFromDiscriminatorValue); } },
                { "deviceCompliancePolicySettingStateSummaries", n => { DeviceCompliancePolicySettingStateSummaries = n.GetCollectionOfObjectValues<global::AITGraph.Sdk.Models.DeviceCompliancePolicySettingStateSummary>(global::AITGraph.Sdk.Models.DeviceCompliancePolicySettingStateSummary.CreateFromDiscriminatorValue)?.AsList(); } },
                { "deviceComplianceReportSummarizationDateTime", n => { DeviceComplianceReportSummarizationDateTime = n.GetDateTimeOffsetValue(); } },
                { "deviceComplianceScripts", n => { DeviceComplianceScripts = n.GetCollectionOfObjectValues<global::AITGraph.Sdk.Models.DeviceComplianceScript>(global::AITGraph.Sdk.Models.DeviceComplianceScript.CreateFromDiscriminatorValue)?.AsList(); } },
                { "deviceConfigurationConflictSummary", n => { DeviceConfigurationConflictSummary = n.GetCollectionOfObjectValues<global::AITGraph.Sdk.Models.DeviceConfigurationConflictSummary>(global::AITGraph.Sdk.Models.DeviceConfigurationConflictSummary.CreateFromDiscriminatorValue)?.AsList(); } },
                { "deviceConfigurationDeviceStateSummaries", n => { DeviceConfigurationDeviceStateSummaries = n.GetObjectValue<global::AITGraph.Sdk.Models.DeviceConfigurationDeviceStateSummary>(global::AITGraph.Sdk.Models.DeviceConfigurationDeviceStateSummary.CreateFromDiscriminatorValue); } },
                { "deviceConfigurationRestrictedAppsViolations", n => { DeviceConfigurationRestrictedAppsViolations = n.GetCollectionOfObjectValues<global::AITGraph.Sdk.Models.RestrictedAppsViolation>(global::AITGraph.Sdk.Models.RestrictedAppsViolation.CreateFromDiscriminatorValue)?.AsList(); } },
                { "deviceConfigurationUserStateSummaries", n => { DeviceConfigurationUserStateSummaries = n.GetObjectValue<global::AITGraph.Sdk.Models.DeviceConfigurationUserStateSummary>(global::AITGraph.Sdk.Models.DeviceConfigurationUserStateSummary.CreateFromDiscriminatorValue); } },
                { "deviceConfigurations", n => { DeviceConfigurations = n.GetCollectionOfObjectValues<global::AITGraph.Sdk.Models.DeviceConfiguration>(global::AITGraph.Sdk.Models.DeviceConfiguration.CreateFromDiscriminatorValue)?.AsList(); } },
                { "deviceConfigurationsAllManagedDeviceCertificateStates", n => { DeviceConfigurationsAllManagedDeviceCertificateStates = n.GetCollectionOfObjectValues<global::AITGraph.Sdk.Models.ManagedAllDeviceCertificateState>(global::AITGraph.Sdk.Models.ManagedAllDeviceCertificateState.CreateFromDiscriminatorValue)?.AsList(); } },
                { "deviceCustomAttributeShellScripts", n => { DeviceCustomAttributeShellScripts = n.GetCollectionOfObjectValues<global::AITGraph.Sdk.Models.DeviceCustomAttributeShellScript>(global::AITGraph.Sdk.Models.DeviceCustomAttributeShellScript.CreateFromDiscriminatorValue)?.AsList(); } },
                { "deviceEnrollmentConfigurations", n => { DeviceEnrollmentConfigurations = n.GetCollectionOfObjectValues<global::AITGraph.Sdk.Models.DeviceEnrollmentConfiguration>(global::AITGraph.Sdk.Models.DeviceEnrollmentConfiguration.CreateFromDiscriminatorValue)?.AsList(); } },
                { "deviceHealthScripts", n => { DeviceHealthScripts = n.GetCollectionOfObjectValues<global::AITGraph.Sdk.Models.DeviceHealthScript>(global::AITGraph.Sdk.Models.DeviceHealthScript.CreateFromDiscriminatorValue)?.AsList(); } },
                { "deviceManagementPartners", n => { DeviceManagementPartners = n.GetCollectionOfObjectValues<global::AITGraph.Sdk.Models.DeviceManagementPartner>(global::AITGraph.Sdk.Models.DeviceManagementPartner.CreateFromDiscriminatorValue)?.AsList(); } },
                { "deviceManagementScripts", n => { DeviceManagementScripts = n.GetCollectionOfObjectValues<global::AITGraph.Sdk.Models.DeviceManagementScript>(global::AITGraph.Sdk.Models.DeviceManagementScript.CreateFromDiscriminatorValue)?.AsList(); } },
                { "deviceProtectionOverview", n => { DeviceProtectionOverview = n.GetObjectValue<global::AITGraph.Sdk.Models.DeviceProtectionOverview>(global::AITGraph.Sdk.Models.DeviceProtectionOverview.CreateFromDiscriminatorValue); } },
                { "deviceShellScripts", n => { DeviceShellScripts = n.GetCollectionOfObjectValues<global::AITGraph.Sdk.Models.DeviceShellScript>(global::AITGraph.Sdk.Models.DeviceShellScript.CreateFromDiscriminatorValue)?.AsList(); } },
                { "domainJoinConnectors", n => { DomainJoinConnectors = n.GetCollectionOfObjectValues<global::AITGraph.Sdk.Models.DeviceManagementDomainJoinConnector>(global::AITGraph.Sdk.Models.DeviceManagementDomainJoinConnector.CreateFromDiscriminatorValue)?.AsList(); } },
                { "embeddedSIMActivationCodePools", n => { EmbeddedSIMActivationCodePools = n.GetCollectionOfObjectValues<global::AITGraph.Sdk.Models.EmbeddedSIMActivationCodePool>(global::AITGraph.Sdk.Models.EmbeddedSIMActivationCodePool.CreateFromDiscriminatorValue)?.AsList(); } },
                { "exchangeConnectors", n => { ExchangeConnectors = n.GetCollectionOfObjectValues<global::AITGraph.Sdk.Models.DeviceManagementExchangeConnector>(global::AITGraph.Sdk.Models.DeviceManagementExchangeConnector.CreateFromDiscriminatorValue)?.AsList(); } },
                { "exchangeOnPremisesPolicies", n => { ExchangeOnPremisesPolicies = n.GetCollectionOfObjectValues<global::AITGraph.Sdk.Models.DeviceManagementExchangeOnPremisesPolicy>(global::AITGraph.Sdk.Models.DeviceManagementExchangeOnPremisesPolicy.CreateFromDiscriminatorValue)?.AsList(); } },
                { "exchangeOnPremisesPolicy", n => { ExchangeOnPremisesPolicy = n.GetObjectValue<global::AITGraph.Sdk.Models.DeviceManagementExchangeOnPremisesPolicy>(global::AITGraph.Sdk.Models.DeviceManagementExchangeOnPremisesPolicy.CreateFromDiscriminatorValue); } },
                { "groupPolicyCategories", n => { GroupPolicyCategories = n.GetCollectionOfObjectValues<global::AITGraph.Sdk.Models.GroupPolicyCategory>(global::AITGraph.Sdk.Models.GroupPolicyCategory.CreateFromDiscriminatorValue)?.AsList(); } },
                { "groupPolicyConfigurations", n => { GroupPolicyConfigurations = n.GetCollectionOfObjectValues<global::AITGraph.Sdk.Models.GroupPolicyConfiguration>(global::AITGraph.Sdk.Models.GroupPolicyConfiguration.CreateFromDiscriminatorValue)?.AsList(); } },
                { "groupPolicyDefinitionFiles", n => { GroupPolicyDefinitionFiles = n.GetCollectionOfObjectValues<global::AITGraph.Sdk.Models.GroupPolicyDefinitionFile>(global::AITGraph.Sdk.Models.GroupPolicyDefinitionFile.CreateFromDiscriminatorValue)?.AsList(); } },
                { "groupPolicyDefinitions", n => { GroupPolicyDefinitions = n.GetCollectionOfObjectValues<global::AITGraph.Sdk.Models.GroupPolicyDefinition>(global::AITGraph.Sdk.Models.GroupPolicyDefinition.CreateFromDiscriminatorValue)?.AsList(); } },
                { "groupPolicyMigrationReports", n => { GroupPolicyMigrationReports = n.GetCollectionOfObjectValues<global::AITGraph.Sdk.Models.GroupPolicyMigrationReport>(global::AITGraph.Sdk.Models.GroupPolicyMigrationReport.CreateFromDiscriminatorValue)?.AsList(); } },
                { "groupPolicyObjectFiles", n => { GroupPolicyObjectFiles = n.GetCollectionOfObjectValues<global::AITGraph.Sdk.Models.GroupPolicyObjectFile>(global::AITGraph.Sdk.Models.GroupPolicyObjectFile.CreateFromDiscriminatorValue)?.AsList(); } },
                { "groupPolicyUploadedDefinitionFiles", n => { GroupPolicyUploadedDefinitionFiles = n.GetCollectionOfObjectValues<global::AITGraph.Sdk.Models.GroupPolicyUploadedDefinitionFile>(global::AITGraph.Sdk.Models.GroupPolicyUploadedDefinitionFile.CreateFromDiscriminatorValue)?.AsList(); } },
                { "importedDeviceIdentities", n => { ImportedDeviceIdentities = n.GetCollectionOfObjectValues<global::AITGraph.Sdk.Models.ImportedDeviceIdentity>(global::AITGraph.Sdk.Models.ImportedDeviceIdentity.CreateFromDiscriminatorValue)?.AsList(); } },
                { "importedWindowsAutopilotDeviceIdentities", n => { ImportedWindowsAutopilotDeviceIdentities = n.GetCollectionOfObjectValues<global::AITGraph.Sdk.Models.ImportedWindowsAutopilotDeviceIdentity>(global::AITGraph.Sdk.Models.ImportedWindowsAutopilotDeviceIdentity.CreateFromDiscriminatorValue)?.AsList(); } },
                { "intents", n => { Intents = n.GetCollectionOfObjectValues<global::AITGraph.Sdk.Models.DeviceManagementIntent>(global::AITGraph.Sdk.Models.DeviceManagementIntent.CreateFromDiscriminatorValue)?.AsList(); } },
                { "intuneAccountId", n => { IntuneAccountId = n.GetGuidValue(); } },
                { "intuneBrand", n => { IntuneBrand = n.GetObjectValue<global::AITGraph.Sdk.Models.IntuneBrand>(global::AITGraph.Sdk.Models.IntuneBrand.CreateFromDiscriminatorValue); } },
                { "intuneBrandingProfiles", n => { IntuneBrandingProfiles = n.GetCollectionOfObjectValues<global::AITGraph.Sdk.Models.IntuneBrandingProfile>(global::AITGraph.Sdk.Models.IntuneBrandingProfile.CreateFromDiscriminatorValue)?.AsList(); } },
                { "iosUpdateStatuses", n => { IosUpdateStatuses = n.GetCollectionOfObjectValues<global::AITGraph.Sdk.Models.IosUpdateDeviceStatus>(global::AITGraph.Sdk.Models.IosUpdateDeviceStatus.CreateFromDiscriminatorValue)?.AsList(); } },
                { "lastReportAggregationDateTime", n => { LastReportAggregationDateTime = n.GetDateTimeOffsetValue(); } },
                { "legacyPcManangementEnabled", n => { LegacyPcManangementEnabled = n.GetBoolValue(); } },
                { "macOSSoftwareUpdateAccountSummaries", n => { MacOSSoftwareUpdateAccountSummaries = n.GetCollectionOfObjectValues<global::AITGraph.Sdk.Models.MacOSSoftwareUpdateAccountSummary>(global::AITGraph.Sdk.Models.MacOSSoftwareUpdateAccountSummary.CreateFromDiscriminatorValue)?.AsList(); } },
                { "managedDeviceCleanupSettings", n => { ManagedDeviceCleanupSettings = n.GetObjectValue<global::AITGraph.Sdk.Models.ManagedDeviceCleanupSettings>(global::AITGraph.Sdk.Models.ManagedDeviceCleanupSettings.CreateFromDiscriminatorValue); } },
                { "managedDeviceEncryptionStates", n => { ManagedDeviceEncryptionStates = n.GetCollectionOfObjectValues<global::AITGraph.Sdk.Models.ManagedDeviceEncryptionState>(global::AITGraph.Sdk.Models.ManagedDeviceEncryptionState.CreateFromDiscriminatorValue)?.AsList(); } },
                { "managedDeviceOverview", n => { ManagedDeviceOverview = n.GetObjectValue<global::AITGraph.Sdk.Models.ManagedDeviceOverview>(global::AITGraph.Sdk.Models.ManagedDeviceOverview.CreateFromDiscriminatorValue); } },
                { "managedDevices", n => { ManagedDevices = n.GetCollectionOfObjectValues<global::AITGraph.Sdk.Models.ManagedDevice>(global::AITGraph.Sdk.Models.ManagedDevice.CreateFromDiscriminatorValue)?.AsList(); } },
                { "maximumDepTokens", n => { MaximumDepTokens = n.GetIntValue(); } },
                { "microsoftTunnelConfigurations", n => { MicrosoftTunnelConfigurations = n.GetCollectionOfObjectValues<global::AITGraph.Sdk.Models.MicrosoftTunnelConfiguration>(global::AITGraph.Sdk.Models.MicrosoftTunnelConfiguration.CreateFromDiscriminatorValue)?.AsList(); } },
                { "microsoftTunnelHealthThresholds", n => { MicrosoftTunnelHealthThresholds = n.GetCollectionOfObjectValues<global::AITGraph.Sdk.Models.MicrosoftTunnelHealthThreshold>(global::AITGraph.Sdk.Models.MicrosoftTunnelHealthThreshold.CreateFromDiscriminatorValue)?.AsList(); } },
                { "microsoftTunnelServerLogCollectionResponses", n => { MicrosoftTunnelServerLogCollectionResponses = n.GetCollectionOfObjectValues<global::AITGraph.Sdk.Models.MicrosoftTunnelServerLogCollectionResponse>(global::AITGraph.Sdk.Models.MicrosoftTunnelServerLogCollectionResponse.CreateFromDiscriminatorValue)?.AsList(); } },
                { "microsoftTunnelSites", n => { MicrosoftTunnelSites = n.GetCollectionOfObjectValues<global::AITGraph.Sdk.Models.MicrosoftTunnelSite>(global::AITGraph.Sdk.Models.MicrosoftTunnelSite.CreateFromDiscriminatorValue)?.AsList(); } },
                { "mobileAppTroubleshootingEvents", n => { MobileAppTroubleshootingEvents = n.GetCollectionOfObjectValues<global::AITGraph.Sdk.Models.MobileAppTroubleshootingEvent>(global::AITGraph.Sdk.Models.MobileAppTroubleshootingEvent.CreateFromDiscriminatorValue)?.AsList(); } },
                { "mobileThreatDefenseConnectors", n => { MobileThreatDefenseConnectors = n.GetCollectionOfObjectValues<global::AITGraph.Sdk.Models.MobileThreatDefenseConnector>(global::AITGraph.Sdk.Models.MobileThreatDefenseConnector.CreateFromDiscriminatorValue)?.AsList(); } },
                { "monitoring", n => { Monitoring = n.GetObjectValue<global::AITGraph.Sdk.Models.DeviceManagement.Monitoring>(global::AITGraph.Sdk.Models.DeviceManagement.Monitoring.CreateFromDiscriminatorValue); } },
                { "ndesConnectors", n => { NdesConnectors = n.GetCollectionOfObjectValues<global::AITGraph.Sdk.Models.NdesConnector>(global::AITGraph.Sdk.Models.NdesConnector.CreateFromDiscriminatorValue)?.AsList(); } },
                { "notificationMessageTemplates", n => { NotificationMessageTemplates = n.GetCollectionOfObjectValues<global::AITGraph.Sdk.Models.NotificationMessageTemplate>(global::AITGraph.Sdk.Models.NotificationMessageTemplate.CreateFromDiscriminatorValue)?.AsList(); } },
                { "oemWarrantyInformationOnboarding", n => { OemWarrantyInformationOnboarding = n.GetCollectionOfObjectValues<global::AITGraph.Sdk.Models.OemWarrantyInformationOnboarding>(global::AITGraph.Sdk.Models.OemWarrantyInformationOnboarding.CreateFromDiscriminatorValue)?.AsList(); } },
                { "remoteActionAudits", n => { RemoteActionAudits = n.GetCollectionOfObjectValues<global::AITGraph.Sdk.Models.RemoteActionAudit>(global::AITGraph.Sdk.Models.RemoteActionAudit.CreateFromDiscriminatorValue)?.AsList(); } },
                { "remoteAssistancePartners", n => { RemoteAssistancePartners = n.GetCollectionOfObjectValues<global::AITGraph.Sdk.Models.RemoteAssistancePartner>(global::AITGraph.Sdk.Models.RemoteAssistancePartner.CreateFromDiscriminatorValue)?.AsList(); } },
                { "remoteAssistanceSettings", n => { RemoteAssistanceSettings = n.GetObjectValue<global::AITGraph.Sdk.Models.RemoteAssistanceSettings>(global::AITGraph.Sdk.Models.RemoteAssistanceSettings.CreateFromDiscriminatorValue); } },
                { "reports", n => { Reports = n.GetObjectValue<global::AITGraph.Sdk.Models.DeviceManagementReports>(global::AITGraph.Sdk.Models.DeviceManagementReports.CreateFromDiscriminatorValue); } },
                { "resourceAccessProfiles", n => { ResourceAccessProfiles = n.GetCollectionOfObjectValues<global::AITGraph.Sdk.Models.DeviceManagementResourceAccessProfileBase>(global::AITGraph.Sdk.Models.DeviceManagementResourceAccessProfileBase.CreateFromDiscriminatorValue)?.AsList(); } },
                { "resourceOperations", n => { ResourceOperations = n.GetCollectionOfObjectValues<global::AITGraph.Sdk.Models.ResourceOperation>(global::AITGraph.Sdk.Models.ResourceOperation.CreateFromDiscriminatorValue)?.AsList(); } },
                { "reusablePolicySettings", n => { ReusablePolicySettings = n.GetCollectionOfObjectValues<global::AITGraph.Sdk.Models.DeviceManagementReusablePolicySetting>(global::AITGraph.Sdk.Models.DeviceManagementReusablePolicySetting.CreateFromDiscriminatorValue)?.AsList(); } },
                { "reusableSettings", n => { ReusableSettings = n.GetCollectionOfObjectValues<global::AITGraph.Sdk.Models.DeviceManagementConfigurationSettingDefinition>(global::AITGraph.Sdk.Models.DeviceManagementConfigurationSettingDefinition.CreateFromDiscriminatorValue)?.AsList(); } },
                { "roleAssignments", n => { RoleAssignments = n.GetCollectionOfObjectValues<global::AITGraph.Sdk.Models.DeviceAndAppManagementRoleAssignment>(global::AITGraph.Sdk.Models.DeviceAndAppManagementRoleAssignment.CreateFromDiscriminatorValue)?.AsList(); } },
                { "roleDefinitions", n => { RoleDefinitions = n.GetCollectionOfObjectValues<global::AITGraph.Sdk.Models.RoleDefinition>(global::AITGraph.Sdk.Models.RoleDefinition.CreateFromDiscriminatorValue)?.AsList(); } },
                { "roleScopeTags", n => { RoleScopeTags = n.GetCollectionOfObjectValues<global::AITGraph.Sdk.Models.RoleScopeTag>(global::AITGraph.Sdk.Models.RoleScopeTag.CreateFromDiscriminatorValue)?.AsList(); } },
                { "serviceNowConnections", n => { ServiceNowConnections = n.GetCollectionOfObjectValues<global::AITGraph.Sdk.Models.ServiceNowConnection>(global::AITGraph.Sdk.Models.ServiceNowConnection.CreateFromDiscriminatorValue)?.AsList(); } },
                { "settingDefinitions", n => { SettingDefinitions = n.GetCollectionOfObjectValues<global::AITGraph.Sdk.Models.DeviceManagementSettingDefinition>(global::AITGraph.Sdk.Models.DeviceManagementSettingDefinition.CreateFromDiscriminatorValue)?.AsList(); } },
                { "settings", n => { Settings = n.GetObjectValue<global::AITGraph.Sdk.Models.DeviceManagementSettings>(global::AITGraph.Sdk.Models.DeviceManagementSettings.CreateFromDiscriminatorValue); } },
                { "softwareUpdateStatusSummary", n => { SoftwareUpdateStatusSummary = n.GetObjectValue<global::AITGraph.Sdk.Models.SoftwareUpdateStatusSummary>(global::AITGraph.Sdk.Models.SoftwareUpdateStatusSummary.CreateFromDiscriminatorValue); } },
                { "subscriptionState", n => { SubscriptionState = n.GetEnumValue<global::AITGraph.Sdk.Models.DeviceManagementSubscriptionState>(); } },
                { "subscriptions", n => { Subscriptions = n.GetEnumValue<global::AITGraph.Sdk.Models.DeviceManagementSubscriptions>(); } },
                { "telecomExpenseManagementPartners", n => { TelecomExpenseManagementPartners = n.GetCollectionOfObjectValues<global::AITGraph.Sdk.Models.TelecomExpenseManagementPartner>(global::AITGraph.Sdk.Models.TelecomExpenseManagementPartner.CreateFromDiscriminatorValue)?.AsList(); } },
                { "templateSettings", n => { TemplateSettings = n.GetCollectionOfObjectValues<global::AITGraph.Sdk.Models.DeviceManagementConfigurationSettingTemplate>(global::AITGraph.Sdk.Models.DeviceManagementConfigurationSettingTemplate.CreateFromDiscriminatorValue)?.AsList(); } },
                { "templates", n => { Templates = n.GetCollectionOfObjectValues<global::AITGraph.Sdk.Models.DeviceManagementTemplate>(global::AITGraph.Sdk.Models.DeviceManagementTemplate.CreateFromDiscriminatorValue)?.AsList(); } },
                { "tenantAttachRBAC", n => { TenantAttachRBAC = n.GetObjectValue<global::AITGraph.Sdk.Models.TenantAttachRBAC>(global::AITGraph.Sdk.Models.TenantAttachRBAC.CreateFromDiscriminatorValue); } },
                { "termsAndConditions", n => { TermsAndConditions = n.GetCollectionOfObjectValues<global::AITGraph.Sdk.Models.TermsAndConditions>(global::AITGraph.Sdk.Models.TermsAndConditions.CreateFromDiscriminatorValue)?.AsList(); } },
                { "troubleshootingEvents", n => { TroubleshootingEvents = n.GetCollectionOfObjectValues<global::AITGraph.Sdk.Models.DeviceManagementTroubleshootingEvent>(global::AITGraph.Sdk.Models.DeviceManagementTroubleshootingEvent.CreateFromDiscriminatorValue)?.AsList(); } },
                { "unlicensedAdminstratorsEnabled", n => { UnlicensedAdminstratorsEnabled = n.GetBoolValue(); } },
                { "userExperienceAnalyticsAnomaly", n => { UserExperienceAnalyticsAnomaly = n.GetCollectionOfObjectValues<global::AITGraph.Sdk.Models.UserExperienceAnalyticsAnomaly>(global::AITGraph.Sdk.Models.UserExperienceAnalyticsAnomaly.CreateFromDiscriminatorValue)?.AsList(); } },
                { "userExperienceAnalyticsAnomalyDevice", n => { UserExperienceAnalyticsAnomalyDevice = n.GetCollectionOfObjectValues<global::AITGraph.Sdk.Models.UserExperienceAnalyticsAnomalyDevice>(global::AITGraph.Sdk.Models.UserExperienceAnalyticsAnomalyDevice.CreateFromDiscriminatorValue)?.AsList(); } },
                { "userExperienceAnalyticsAnomalySeverityOverview", n => { UserExperienceAnalyticsAnomalySeverityOverview = n.GetObjectValue<global::AITGraph.Sdk.Models.UserExperienceAnalyticsAnomalySeverityOverview>(global::AITGraph.Sdk.Models.UserExperienceAnalyticsAnomalySeverityOverview.CreateFromDiscriminatorValue); } },
                { "userExperienceAnalyticsAppHealthApplicationPerformance", n => { UserExperienceAnalyticsAppHealthApplicationPerformance = n.GetCollectionOfObjectValues<global::AITGraph.Sdk.Models.UserExperienceAnalyticsAppHealthApplicationPerformance>(global::AITGraph.Sdk.Models.UserExperienceAnalyticsAppHealthApplicationPerformance.CreateFromDiscriminatorValue)?.AsList(); } },
                { "userExperienceAnalyticsAppHealthApplicationPerformanceByAppVersion", n => { UserExperienceAnalyticsAppHealthApplicationPerformanceByAppVersion = n.GetCollectionOfObjectValues<global::AITGraph.Sdk.Models.UserExperienceAnalyticsAppHealthAppPerformanceByAppVersion>(global::AITGraph.Sdk.Models.UserExperienceAnalyticsAppHealthAppPerformanceByAppVersion.CreateFromDiscriminatorValue)?.AsList(); } },
                { "userExperienceAnalyticsAppHealthApplicationPerformanceByAppVersionDetails", n => { UserExperienceAnalyticsAppHealthApplicationPerformanceByAppVersionDetails = n.GetCollectionOfObjectValues<global::AITGraph.Sdk.Models.UserExperienceAnalyticsAppHealthAppPerformanceByAppVersionDetails>(global::AITGraph.Sdk.Models.UserExperienceAnalyticsAppHealthAppPerformanceByAppVersionDetails.CreateFromDiscriminatorValue)?.AsList(); } },
                { "userExperienceAnalyticsAppHealthApplicationPerformanceByAppVersionDeviceId", n => { UserExperienceAnalyticsAppHealthApplicationPerformanceByAppVersionDeviceId = n.GetCollectionOfObjectValues<global::AITGraph.Sdk.Models.UserExperienceAnalyticsAppHealthAppPerformanceByAppVersionDeviceId>(global::AITGraph.Sdk.Models.UserExperienceAnalyticsAppHealthAppPerformanceByAppVersionDeviceId.CreateFromDiscriminatorValue)?.AsList(); } },
                { "userExperienceAnalyticsAppHealthApplicationPerformanceByOSVersion", n => { UserExperienceAnalyticsAppHealthApplicationPerformanceByOSVersion = n.GetCollectionOfObjectValues<global::AITGraph.Sdk.Models.UserExperienceAnalyticsAppHealthAppPerformanceByOSVersion>(global::AITGraph.Sdk.Models.UserExperienceAnalyticsAppHealthAppPerformanceByOSVersion.CreateFromDiscriminatorValue)?.AsList(); } },
                { "userExperienceAnalyticsAppHealthDeviceModelPerformance", n => { UserExperienceAnalyticsAppHealthDeviceModelPerformance = n.GetCollectionOfObjectValues<global::AITGraph.Sdk.Models.UserExperienceAnalyticsAppHealthDeviceModelPerformance>(global::AITGraph.Sdk.Models.UserExperienceAnalyticsAppHealthDeviceModelPerformance.CreateFromDiscriminatorValue)?.AsList(); } },
                { "userExperienceAnalyticsAppHealthDevicePerformance", n => { UserExperienceAnalyticsAppHealthDevicePerformance = n.GetCollectionOfObjectValues<global::AITGraph.Sdk.Models.UserExperienceAnalyticsAppHealthDevicePerformance>(global::AITGraph.Sdk.Models.UserExperienceAnalyticsAppHealthDevicePerformance.CreateFromDiscriminatorValue)?.AsList(); } },
                { "userExperienceAnalyticsAppHealthDevicePerformanceDetails", n => { UserExperienceAnalyticsAppHealthDevicePerformanceDetails = n.GetCollectionOfObjectValues<global::AITGraph.Sdk.Models.UserExperienceAnalyticsAppHealthDevicePerformanceDetails>(global::AITGraph.Sdk.Models.UserExperienceAnalyticsAppHealthDevicePerformanceDetails.CreateFromDiscriminatorValue)?.AsList(); } },
                { "userExperienceAnalyticsAppHealthOSVersionPerformance", n => { UserExperienceAnalyticsAppHealthOSVersionPerformance = n.GetCollectionOfObjectValues<global::AITGraph.Sdk.Models.UserExperienceAnalyticsAppHealthOSVersionPerformance>(global::AITGraph.Sdk.Models.UserExperienceAnalyticsAppHealthOSVersionPerformance.CreateFromDiscriminatorValue)?.AsList(); } },
                { "userExperienceAnalyticsAppHealthOverview", n => { UserExperienceAnalyticsAppHealthOverview = n.GetObjectValue<global::AITGraph.Sdk.Models.UserExperienceAnalyticsCategory>(global::AITGraph.Sdk.Models.UserExperienceAnalyticsCategory.CreateFromDiscriminatorValue); } },
                { "userExperienceAnalyticsBaselines", n => { UserExperienceAnalyticsBaselines = n.GetCollectionOfObjectValues<global::AITGraph.Sdk.Models.UserExperienceAnalyticsBaseline>(global::AITGraph.Sdk.Models.UserExperienceAnalyticsBaseline.CreateFromDiscriminatorValue)?.AsList(); } },
                { "userExperienceAnalyticsBatteryHealthAppImpact", n => { UserExperienceAnalyticsBatteryHealthAppImpact = n.GetCollectionOfObjectValues<global::AITGraph.Sdk.Models.UserExperienceAnalyticsBatteryHealthAppImpact>(global::AITGraph.Sdk.Models.UserExperienceAnalyticsBatteryHealthAppImpact.CreateFromDiscriminatorValue)?.AsList(); } },
                { "userExperienceAnalyticsBatteryHealthCapacityDetails", n => { UserExperienceAnalyticsBatteryHealthCapacityDetails = n.GetObjectValue<global::AITGraph.Sdk.Models.UserExperienceAnalyticsBatteryHealthCapacityDetails>(global::AITGraph.Sdk.Models.UserExperienceAnalyticsBatteryHealthCapacityDetails.CreateFromDiscriminatorValue); } },
                { "userExperienceAnalyticsBatteryHealthDeviceAppImpact", n => { UserExperienceAnalyticsBatteryHealthDeviceAppImpact = n.GetCollectionOfObjectValues<global::AITGraph.Sdk.Models.UserExperienceAnalyticsBatteryHealthDeviceAppImpact>(global::AITGraph.Sdk.Models.UserExperienceAnalyticsBatteryHealthDeviceAppImpact.CreateFromDiscriminatorValue)?.AsList(); } },
                { "userExperienceAnalyticsBatteryHealthDevicePerformance", n => { UserExperienceAnalyticsBatteryHealthDevicePerformance = n.GetCollectionOfObjectValues<global::AITGraph.Sdk.Models.UserExperienceAnalyticsBatteryHealthDevicePerformance>(global::AITGraph.Sdk.Models.UserExperienceAnalyticsBatteryHealthDevicePerformance.CreateFromDiscriminatorValue)?.AsList(); } },
                { "userExperienceAnalyticsBatteryHealthDeviceRuntimeHistory", n => { UserExperienceAnalyticsBatteryHealthDeviceRuntimeHistory = n.GetCollectionOfObjectValues<global::AITGraph.Sdk.Models.UserExperienceAnalyticsBatteryHealthDeviceRuntimeHistory>(global::AITGraph.Sdk.Models.UserExperienceAnalyticsBatteryHealthDeviceRuntimeHistory.CreateFromDiscriminatorValue)?.AsList(); } },
                { "userExperienceAnalyticsBatteryHealthModelPerformance", n => { UserExperienceAnalyticsBatteryHealthModelPerformance = n.GetCollectionOfObjectValues<global::AITGraph.Sdk.Models.UserExperienceAnalyticsBatteryHealthModelPerformance>(global::AITGraph.Sdk.Models.UserExperienceAnalyticsBatteryHealthModelPerformance.CreateFromDiscriminatorValue)?.AsList(); } },
                { "userExperienceAnalyticsBatteryHealthOsPerformance", n => { UserExperienceAnalyticsBatteryHealthOsPerformance = n.GetCollectionOfObjectValues<global::AITGraph.Sdk.Models.UserExperienceAnalyticsBatteryHealthOsPerformance>(global::AITGraph.Sdk.Models.UserExperienceAnalyticsBatteryHealthOsPerformance.CreateFromDiscriminatorValue)?.AsList(); } },
                { "userExperienceAnalyticsBatteryHealthRuntimeDetails", n => { UserExperienceAnalyticsBatteryHealthRuntimeDetails = n.GetObjectValue<global::AITGraph.Sdk.Models.UserExperienceAnalyticsBatteryHealthRuntimeDetails>(global::AITGraph.Sdk.Models.UserExperienceAnalyticsBatteryHealthRuntimeDetails.CreateFromDiscriminatorValue); } },
                { "userExperienceAnalyticsCategories", n => { UserExperienceAnalyticsCategories = n.GetCollectionOfObjectValues<global::AITGraph.Sdk.Models.UserExperienceAnalyticsCategory>(global::AITGraph.Sdk.Models.UserExperienceAnalyticsCategory.CreateFromDiscriminatorValue)?.AsList(); } },
                { "userExperienceAnalyticsDeviceMetricHistory", n => { UserExperienceAnalyticsDeviceMetricHistory = n.GetCollectionOfObjectValues<global::AITGraph.Sdk.Models.UserExperienceAnalyticsMetricHistory>(global::AITGraph.Sdk.Models.UserExperienceAnalyticsMetricHistory.CreateFromDiscriminatorValue)?.AsList(); } },
                { "userExperienceAnalyticsDevicePerformance", n => { UserExperienceAnalyticsDevicePerformance = n.GetCollectionOfObjectValues<global::AITGraph.Sdk.Models.UserExperienceAnalyticsDevicePerformance>(global::AITGraph.Sdk.Models.UserExperienceAnalyticsDevicePerformance.CreateFromDiscriminatorValue)?.AsList(); } },
                { "userExperienceAnalyticsDeviceScope", n => { UserExperienceAnalyticsDeviceScope = n.GetObjectValue<global::AITGraph.Sdk.Models.UserExperienceAnalyticsDeviceScope>(global::AITGraph.Sdk.Models.UserExperienceAnalyticsDeviceScope.CreateFromDiscriminatorValue); } },
                { "userExperienceAnalyticsDeviceScopes", n => { UserExperienceAnalyticsDeviceScopes = n.GetCollectionOfObjectValues<global::AITGraph.Sdk.Models.UserExperienceAnalyticsDeviceScope>(global::AITGraph.Sdk.Models.UserExperienceAnalyticsDeviceScope.CreateFromDiscriminatorValue)?.AsList(); } },
                { "userExperienceAnalyticsDeviceScores", n => { UserExperienceAnalyticsDeviceScores = n.GetCollectionOfObjectValues<global::AITGraph.Sdk.Models.UserExperienceAnalyticsDeviceScores>(global::AITGraph.Sdk.Models.UserExperienceAnalyticsDeviceScores.CreateFromDiscriminatorValue)?.AsList(); } },
                { "userExperienceAnalyticsDeviceStartupHistory", n => { UserExperienceAnalyticsDeviceStartupHistory = n.GetCollectionOfObjectValues<global::AITGraph.Sdk.Models.UserExperienceAnalyticsDeviceStartupHistory>(global::AITGraph.Sdk.Models.UserExperienceAnalyticsDeviceStartupHistory.CreateFromDiscriminatorValue)?.AsList(); } },
                { "userExperienceAnalyticsDeviceStartupProcessPerformance", n => { UserExperienceAnalyticsDeviceStartupProcessPerformance = n.GetCollectionOfObjectValues<global::AITGraph.Sdk.Models.UserExperienceAnalyticsDeviceStartupProcessPerformance>(global::AITGraph.Sdk.Models.UserExperienceAnalyticsDeviceStartupProcessPerformance.CreateFromDiscriminatorValue)?.AsList(); } },
                { "userExperienceAnalyticsDeviceStartupProcesses", n => { UserExperienceAnalyticsDeviceStartupProcesses = n.GetCollectionOfObjectValues<global::AITGraph.Sdk.Models.UserExperienceAnalyticsDeviceStartupProcess>(global::AITGraph.Sdk.Models.UserExperienceAnalyticsDeviceStartupProcess.CreateFromDiscriminatorValue)?.AsList(); } },
                { "userExperienceAnalyticsDeviceTimelineEvent", n => { UserExperienceAnalyticsDeviceTimelineEvent = n.GetCollectionOfObjectValues<global::AITGraph.Sdk.Models.UserExperienceAnalyticsDeviceTimelineEvent>(global::AITGraph.Sdk.Models.UserExperienceAnalyticsDeviceTimelineEvent.CreateFromDiscriminatorValue)?.AsList(); } },
                { "userExperienceAnalyticsDevicesWithoutCloudIdentity", n => { UserExperienceAnalyticsDevicesWithoutCloudIdentity = n.GetCollectionOfObjectValues<global::AITGraph.Sdk.Models.UserExperienceAnalyticsDeviceWithoutCloudIdentity>(global::AITGraph.Sdk.Models.UserExperienceAnalyticsDeviceWithoutCloudIdentity.CreateFromDiscriminatorValue)?.AsList(); } },
                { "userExperienceAnalyticsImpactingProcess", n => { UserExperienceAnalyticsImpactingProcess = n.GetCollectionOfObjectValues<global::AITGraph.Sdk.Models.UserExperienceAnalyticsImpactingProcess>(global::AITGraph.Sdk.Models.UserExperienceAnalyticsImpactingProcess.CreateFromDiscriminatorValue)?.AsList(); } },
                { "userExperienceAnalyticsMetricHistory", n => { UserExperienceAnalyticsMetricHistory = n.GetCollectionOfObjectValues<global::AITGraph.Sdk.Models.UserExperienceAnalyticsMetricHistory>(global::AITGraph.Sdk.Models.UserExperienceAnalyticsMetricHistory.CreateFromDiscriminatorValue)?.AsList(); } },
                { "userExperienceAnalyticsModelScores", n => { UserExperienceAnalyticsModelScores = n.GetCollectionOfObjectValues<global::AITGraph.Sdk.Models.UserExperienceAnalyticsModelScores>(global::AITGraph.Sdk.Models.UserExperienceAnalyticsModelScores.CreateFromDiscriminatorValue)?.AsList(); } },
                { "userExperienceAnalyticsNotAutopilotReadyDevice", n => { UserExperienceAnalyticsNotAutopilotReadyDevice = n.GetCollectionOfObjectValues<global::AITGraph.Sdk.Models.UserExperienceAnalyticsNotAutopilotReadyDevice>(global::AITGraph.Sdk.Models.UserExperienceAnalyticsNotAutopilotReadyDevice.CreateFromDiscriminatorValue)?.AsList(); } },
                { "userExperienceAnalyticsOverview", n => { UserExperienceAnalyticsOverview = n.GetObjectValue<global::AITGraph.Sdk.Models.UserExperienceAnalyticsOverview>(global::AITGraph.Sdk.Models.UserExperienceAnalyticsOverview.CreateFromDiscriminatorValue); } },
                { "userExperienceAnalyticsRemoteConnection", n => { UserExperienceAnalyticsRemoteConnection = n.GetCollectionOfObjectValues<global::AITGraph.Sdk.Models.UserExperienceAnalyticsRemoteConnection>(global::AITGraph.Sdk.Models.UserExperienceAnalyticsRemoteConnection.CreateFromDiscriminatorValue)?.AsList(); } },
                { "userExperienceAnalyticsResourcePerformance", n => { UserExperienceAnalyticsResourcePerformance = n.GetCollectionOfObjectValues<global::AITGraph.Sdk.Models.UserExperienceAnalyticsResourcePerformance>(global::AITGraph.Sdk.Models.UserExperienceAnalyticsResourcePerformance.CreateFromDiscriminatorValue)?.AsList(); } },
                { "userExperienceAnalyticsScoreHistory", n => { UserExperienceAnalyticsScoreHistory = n.GetCollectionOfObjectValues<global::AITGraph.Sdk.Models.UserExperienceAnalyticsScoreHistory>(global::AITGraph.Sdk.Models.UserExperienceAnalyticsScoreHistory.CreateFromDiscriminatorValue)?.AsList(); } },
                { "userExperienceAnalyticsSettings", n => { UserExperienceAnalyticsSettings = n.GetObjectValue<global::AITGraph.Sdk.Models.UserExperienceAnalyticsSettings>(global::AITGraph.Sdk.Models.UserExperienceAnalyticsSettings.CreateFromDiscriminatorValue); } },
                { "userExperienceAnalyticsWorkFromAnywhereHardwareReadinessMetric", n => { UserExperienceAnalyticsWorkFromAnywhereHardwareReadinessMetric = n.GetObjectValue<global::AITGraph.Sdk.Models.UserExperienceAnalyticsWorkFromAnywhereHardwareReadinessMetric>(global::AITGraph.Sdk.Models.UserExperienceAnalyticsWorkFromAnywhereHardwareReadinessMetric.CreateFromDiscriminatorValue); } },
                { "userExperienceAnalyticsWorkFromAnywhereMetrics", n => { UserExperienceAnalyticsWorkFromAnywhereMetrics = n.GetCollectionOfObjectValues<global::AITGraph.Sdk.Models.UserExperienceAnalyticsWorkFromAnywhereMetric>(global::AITGraph.Sdk.Models.UserExperienceAnalyticsWorkFromAnywhereMetric.CreateFromDiscriminatorValue)?.AsList(); } },
                { "userExperienceAnalyticsWorkFromAnywhereModelPerformance", n => { UserExperienceAnalyticsWorkFromAnywhereModelPerformance = n.GetCollectionOfObjectValues<global::AITGraph.Sdk.Models.UserExperienceAnalyticsWorkFromAnywhereModelPerformance>(global::AITGraph.Sdk.Models.UserExperienceAnalyticsWorkFromAnywhereModelPerformance.CreateFromDiscriminatorValue)?.AsList(); } },
                { "userPfxCertificates", n => { UserPfxCertificates = n.GetCollectionOfObjectValues<global::AITGraph.Sdk.Models.UserPFXCertificate>(global::AITGraph.Sdk.Models.UserPFXCertificate.CreateFromDiscriminatorValue)?.AsList(); } },
                { "virtualEndpoint", n => { VirtualEndpoint = n.GetObjectValue<global::AITGraph.Sdk.Models.VirtualEndpoint>(global::AITGraph.Sdk.Models.VirtualEndpoint.CreateFromDiscriminatorValue); } },
                { "windowsAutopilotDeploymentProfiles", n => { WindowsAutopilotDeploymentProfiles = n.GetCollectionOfObjectValues<global::AITGraph.Sdk.Models.WindowsAutopilotDeploymentProfile>(global::AITGraph.Sdk.Models.WindowsAutopilotDeploymentProfile.CreateFromDiscriminatorValue)?.AsList(); } },
                { "windowsAutopilotDeviceIdentities", n => { WindowsAutopilotDeviceIdentities = n.GetCollectionOfObjectValues<global::AITGraph.Sdk.Models.WindowsAutopilotDeviceIdentity>(global::AITGraph.Sdk.Models.WindowsAutopilotDeviceIdentity.CreateFromDiscriminatorValue)?.AsList(); } },
                { "windowsAutopilotSettings", n => { WindowsAutopilotSettings = n.GetObjectValue<global::AITGraph.Sdk.Models.WindowsAutopilotSettings>(global::AITGraph.Sdk.Models.WindowsAutopilotSettings.CreateFromDiscriminatorValue); } },
                { "windowsDriverUpdateProfiles", n => { WindowsDriverUpdateProfiles = n.GetCollectionOfObjectValues<global::AITGraph.Sdk.Models.WindowsDriverUpdateProfile>(global::AITGraph.Sdk.Models.WindowsDriverUpdateProfile.CreateFromDiscriminatorValue)?.AsList(); } },
                { "windowsFeatureUpdateProfiles", n => { WindowsFeatureUpdateProfiles = n.GetCollectionOfObjectValues<global::AITGraph.Sdk.Models.WindowsFeatureUpdateProfile>(global::AITGraph.Sdk.Models.WindowsFeatureUpdateProfile.CreateFromDiscriminatorValue)?.AsList(); } },
                { "windowsInformationProtectionAppLearningSummaries", n => { WindowsInformationProtectionAppLearningSummaries = n.GetCollectionOfObjectValues<global::AITGraph.Sdk.Models.WindowsInformationProtectionAppLearningSummary>(global::AITGraph.Sdk.Models.WindowsInformationProtectionAppLearningSummary.CreateFromDiscriminatorValue)?.AsList(); } },
                { "windowsInformationProtectionNetworkLearningSummaries", n => { WindowsInformationProtectionNetworkLearningSummaries = n.GetCollectionOfObjectValues<global::AITGraph.Sdk.Models.WindowsInformationProtectionNetworkLearningSummary>(global::AITGraph.Sdk.Models.WindowsInformationProtectionNetworkLearningSummary.CreateFromDiscriminatorValue)?.AsList(); } },
                { "windowsMalwareInformation", n => { WindowsMalwareInformation = n.GetCollectionOfObjectValues<global::AITGraph.Sdk.Models.WindowsMalwareInformation>(global::AITGraph.Sdk.Models.WindowsMalwareInformation.CreateFromDiscriminatorValue)?.AsList(); } },
                { "windowsMalwareOverview", n => { WindowsMalwareOverview = n.GetObjectValue<global::AITGraph.Sdk.Models.WindowsMalwareOverview>(global::AITGraph.Sdk.Models.WindowsMalwareOverview.CreateFromDiscriminatorValue); } },
                { "windowsQualityUpdateProfiles", n => { WindowsQualityUpdateProfiles = n.GetCollectionOfObjectValues<global::AITGraph.Sdk.Models.WindowsQualityUpdateProfile>(global::AITGraph.Sdk.Models.WindowsQualityUpdateProfile.CreateFromDiscriminatorValue)?.AsList(); } },
                { "windowsUpdateCatalogItems", n => { WindowsUpdateCatalogItems = n.GetCollectionOfObjectValues<global::AITGraph.Sdk.Models.WindowsUpdateCatalogItem>(global::AITGraph.Sdk.Models.WindowsUpdateCatalogItem.CreateFromDiscriminatorValue)?.AsList(); } },
                { "zebraFotaArtifacts", n => { ZebraFotaArtifacts = n.GetCollectionOfObjectValues<global::AITGraph.Sdk.Models.ZebraFotaArtifact>(global::AITGraph.Sdk.Models.ZebraFotaArtifact.CreateFromDiscriminatorValue)?.AsList(); } },
                { "zebraFotaConnector", n => { ZebraFotaConnector = n.GetObjectValue<global::AITGraph.Sdk.Models.ZebraFotaConnector>(global::AITGraph.Sdk.Models.ZebraFotaConnector.CreateFromDiscriminatorValue); } },
                { "zebraFotaDeployments", n => { ZebraFotaDeployments = n.GetCollectionOfObjectValues<global::AITGraph.Sdk.Models.ZebraFotaDeployment>(global::AITGraph.Sdk.Models.ZebraFotaDeployment.CreateFromDiscriminatorValue)?.AsList(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public override void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            base.Serialize(writer);
            writer.WriteDateTimeOffsetValue("accountMoveCompletionDateTime", AccountMoveCompletionDateTime);
            writer.WriteObjectValue<global::AITGraph.Sdk.Models.AdminConsent>("adminConsent", AdminConsent);
            writer.WriteObjectValue<global::AITGraph.Sdk.Models.AdvancedThreatProtectionOnboardingStateSummary>("advancedThreatProtectionOnboardingStateSummary", AdvancedThreatProtectionOnboardingStateSummary);
            writer.WriteCollectionOfObjectValues<global::AITGraph.Sdk.Models.AndroidDeviceOwnerEnrollmentProfile>("androidDeviceOwnerEnrollmentProfiles", AndroidDeviceOwnerEnrollmentProfiles);
            writer.WriteCollectionOfObjectValues<global::AITGraph.Sdk.Models.AndroidForWorkAppConfigurationSchema>("androidForWorkAppConfigurationSchemas", AndroidForWorkAppConfigurationSchemas);
            writer.WriteCollectionOfObjectValues<global::AITGraph.Sdk.Models.AndroidForWorkEnrollmentProfile>("androidForWorkEnrollmentProfiles", AndroidForWorkEnrollmentProfiles);
            writer.WriteObjectValue<global::AITGraph.Sdk.Models.AndroidForWorkSettings>("androidForWorkSettings", AndroidForWorkSettings);
            writer.WriteObjectValue<global::AITGraph.Sdk.Models.AndroidManagedStoreAccountEnterpriseSettings>("androidManagedStoreAccountEnterpriseSettings", AndroidManagedStoreAccountEnterpriseSettings);
            writer.WriteCollectionOfObjectValues<global::AITGraph.Sdk.Models.AndroidManagedStoreAppConfigurationSchema>("androidManagedStoreAppConfigurationSchemas", AndroidManagedStoreAppConfigurationSchemas);
            writer.WriteObjectValue<global::AITGraph.Sdk.Models.ApplePushNotificationCertificate>("applePushNotificationCertificate", ApplePushNotificationCertificate);
            writer.WriteCollectionOfObjectValues<global::AITGraph.Sdk.Models.AppleUserInitiatedEnrollmentProfile>("appleUserInitiatedEnrollmentProfiles", AppleUserInitiatedEnrollmentProfiles);
            writer.WriteCollectionOfObjectValues<global::AITGraph.Sdk.Models.DeviceAndAppManagementAssignmentFilter>("assignmentFilters", AssignmentFilters);
            writer.WriteCollectionOfObjectValues<global::AITGraph.Sdk.Models.AuditEvent>("auditEvents", AuditEvents);
            writer.WriteCollectionOfObjectValues<global::AITGraph.Sdk.Models.DeviceManagementAutopilotEvent>("autopilotEvents", AutopilotEvents);
            writer.WriteCollectionOfObjectValues<global::AITGraph.Sdk.Models.CartToClassAssociation>("cartToClassAssociations", CartToClassAssociations);
            writer.WriteCollectionOfObjectValues<global::AITGraph.Sdk.Models.DeviceManagementSettingCategory>("categories", Categories);
            writer.WriteCollectionOfObjectValues<global::AITGraph.Sdk.Models.CertificateConnectorDetails>("certificateConnectorDetails", CertificateConnectorDetails);
            writer.WriteCollectionOfObjectValues<global::AITGraph.Sdk.Models.ChromeOSOnboardingSettings>("chromeOSOnboardingSettings", ChromeOSOnboardingSettings);
            writer.WriteCollectionOfObjectValues<global::AITGraph.Sdk.Models.CloudPCConnectivityIssue>("cloudPCConnectivityIssues", CloudPCConnectivityIssues);
            writer.WriteCollectionOfObjectValues<global::AITGraph.Sdk.Models.ManagedDevice>("comanagedDevices", ComanagedDevices);
            writer.WriteCollectionOfObjectValues<global::AITGraph.Sdk.Models.ComanagementEligibleDevice>("comanagementEligibleDevices", ComanagementEligibleDevices);
            writer.WriteCollectionOfObjectValues<global::AITGraph.Sdk.Models.DeviceManagementConfigurationCategory>("complianceCategories", ComplianceCategories);
            writer.WriteCollectionOfObjectValues<global::AITGraph.Sdk.Models.ComplianceManagementPartner>("complianceManagementPartners", ComplianceManagementPartners);
            writer.WriteCollectionOfObjectValues<global::AITGraph.Sdk.Models.DeviceManagementCompliancePolicy>("compliancePolicies", CompliancePolicies);
            writer.WriteCollectionOfObjectValues<global::AITGraph.Sdk.Models.DeviceManagementConfigurationSettingDefinition>("complianceSettings", ComplianceSettings);
            writer.WriteObjectValue<global::AITGraph.Sdk.Models.OnPremisesConditionalAccessSettings>("conditionalAccessSettings", ConditionalAccessSettings);
            writer.WriteCollectionOfObjectValues<global::AITGraph.Sdk.Models.ConfigManagerCollection>("configManagerCollections", ConfigManagerCollections);
            writer.WriteCollectionOfObjectValues<global::AITGraph.Sdk.Models.DeviceManagementConfigurationCategory>("configurationCategories", ConfigurationCategories);
            writer.WriteCollectionOfObjectValues<global::AITGraph.Sdk.Models.DeviceManagementConfigurationPolicy>("configurationPolicies", ConfigurationPolicies);
            writer.WriteCollectionOfObjectValues<global::AITGraph.Sdk.Models.DeviceManagementConfigurationPolicyTemplate>("configurationPolicyTemplates", ConfigurationPolicyTemplates);
            writer.WriteCollectionOfObjectValues<global::AITGraph.Sdk.Models.DeviceManagementConfigurationSettingDefinition>("configurationSettings", ConfigurationSettings);
            writer.WriteCollectionOfObjectValues<global::AITGraph.Sdk.Models.ConnectorStatusDetails>("connectorStatus", ConnectorStatus);
            writer.WriteObjectValue<global::AITGraph.Sdk.Models.DataProcessorServiceForWindowsFeaturesOnboarding>("dataProcessorServiceForWindowsFeaturesOnboarding", DataProcessorServiceForWindowsFeaturesOnboarding);
            writer.WriteCollectionOfObjectValues<global::AITGraph.Sdk.Models.DataSharingConsent>("dataSharingConsents", DataSharingConsents);
            writer.WriteCollectionOfObjectValues<global::AITGraph.Sdk.Models.DepOnboardingSetting>("depOnboardingSettings", DepOnboardingSettings);
            writer.WriteCollectionOfObjectValues<global::AITGraph.Sdk.Models.DeviceManagementDerivedCredentialSettings>("derivedCredentials", DerivedCredentials);
            writer.WriteCollectionOfObjectValues<global::AITGraph.Sdk.Models.DetectedApp>("detectedApps", DetectedApps);
            writer.WriteCollectionOfObjectValues<global::AITGraph.Sdk.Models.DeviceCategory>("deviceCategories", DeviceCategories);
            writer.WriteCollectionOfObjectValues<global::AITGraph.Sdk.Models.DeviceCompliancePolicy>("deviceCompliancePolicies", DeviceCompliancePolicies);
            writer.WriteObjectValue<global::AITGraph.Sdk.Models.DeviceCompliancePolicyDeviceStateSummary>("deviceCompliancePolicyDeviceStateSummary", DeviceCompliancePolicyDeviceStateSummary);
            writer.WriteCollectionOfObjectValues<global::AITGraph.Sdk.Models.DeviceCompliancePolicySettingStateSummary>("deviceCompliancePolicySettingStateSummaries", DeviceCompliancePolicySettingStateSummaries);
            writer.WriteCollectionOfObjectValues<global::AITGraph.Sdk.Models.DeviceComplianceScript>("deviceComplianceScripts", DeviceComplianceScripts);
            writer.WriteCollectionOfObjectValues<global::AITGraph.Sdk.Models.DeviceConfigurationConflictSummary>("deviceConfigurationConflictSummary", DeviceConfigurationConflictSummary);
            writer.WriteObjectValue<global::AITGraph.Sdk.Models.DeviceConfigurationDeviceStateSummary>("deviceConfigurationDeviceStateSummaries", DeviceConfigurationDeviceStateSummaries);
            writer.WriteCollectionOfObjectValues<global::AITGraph.Sdk.Models.RestrictedAppsViolation>("deviceConfigurationRestrictedAppsViolations", DeviceConfigurationRestrictedAppsViolations);
            writer.WriteCollectionOfObjectValues<global::AITGraph.Sdk.Models.DeviceConfiguration>("deviceConfigurations", DeviceConfigurations);
            writer.WriteCollectionOfObjectValues<global::AITGraph.Sdk.Models.ManagedAllDeviceCertificateState>("deviceConfigurationsAllManagedDeviceCertificateStates", DeviceConfigurationsAllManagedDeviceCertificateStates);
            writer.WriteObjectValue<global::AITGraph.Sdk.Models.DeviceConfigurationUserStateSummary>("deviceConfigurationUserStateSummaries", DeviceConfigurationUserStateSummaries);
            writer.WriteCollectionOfObjectValues<global::AITGraph.Sdk.Models.DeviceCustomAttributeShellScript>("deviceCustomAttributeShellScripts", DeviceCustomAttributeShellScripts);
            writer.WriteCollectionOfObjectValues<global::AITGraph.Sdk.Models.DeviceEnrollmentConfiguration>("deviceEnrollmentConfigurations", DeviceEnrollmentConfigurations);
            writer.WriteCollectionOfObjectValues<global::AITGraph.Sdk.Models.DeviceHealthScript>("deviceHealthScripts", DeviceHealthScripts);
            writer.WriteCollectionOfObjectValues<global::AITGraph.Sdk.Models.DeviceManagementPartner>("deviceManagementPartners", DeviceManagementPartners);
            writer.WriteCollectionOfObjectValues<global::AITGraph.Sdk.Models.DeviceManagementScript>("deviceManagementScripts", DeviceManagementScripts);
            writer.WriteObjectValue<global::AITGraph.Sdk.Models.DeviceProtectionOverview>("deviceProtectionOverview", DeviceProtectionOverview);
            writer.WriteCollectionOfObjectValues<global::AITGraph.Sdk.Models.DeviceShellScript>("deviceShellScripts", DeviceShellScripts);
            writer.WriteCollectionOfObjectValues<global::AITGraph.Sdk.Models.DeviceManagementDomainJoinConnector>("domainJoinConnectors", DomainJoinConnectors);
            writer.WriteCollectionOfObjectValues<global::AITGraph.Sdk.Models.EmbeddedSIMActivationCodePool>("embeddedSIMActivationCodePools", EmbeddedSIMActivationCodePools);
            writer.WriteCollectionOfObjectValues<global::AITGraph.Sdk.Models.DeviceManagementExchangeConnector>("exchangeConnectors", ExchangeConnectors);
            writer.WriteCollectionOfObjectValues<global::AITGraph.Sdk.Models.DeviceManagementExchangeOnPremisesPolicy>("exchangeOnPremisesPolicies", ExchangeOnPremisesPolicies);
            writer.WriteObjectValue<global::AITGraph.Sdk.Models.DeviceManagementExchangeOnPremisesPolicy>("exchangeOnPremisesPolicy", ExchangeOnPremisesPolicy);
            writer.WriteCollectionOfObjectValues<global::AITGraph.Sdk.Models.GroupPolicyCategory>("groupPolicyCategories", GroupPolicyCategories);
            writer.WriteCollectionOfObjectValues<global::AITGraph.Sdk.Models.GroupPolicyConfiguration>("groupPolicyConfigurations", GroupPolicyConfigurations);
            writer.WriteCollectionOfObjectValues<global::AITGraph.Sdk.Models.GroupPolicyDefinitionFile>("groupPolicyDefinitionFiles", GroupPolicyDefinitionFiles);
            writer.WriteCollectionOfObjectValues<global::AITGraph.Sdk.Models.GroupPolicyDefinition>("groupPolicyDefinitions", GroupPolicyDefinitions);
            writer.WriteCollectionOfObjectValues<global::AITGraph.Sdk.Models.GroupPolicyMigrationReport>("groupPolicyMigrationReports", GroupPolicyMigrationReports);
            writer.WriteCollectionOfObjectValues<global::AITGraph.Sdk.Models.GroupPolicyObjectFile>("groupPolicyObjectFiles", GroupPolicyObjectFiles);
            writer.WriteCollectionOfObjectValues<global::AITGraph.Sdk.Models.GroupPolicyUploadedDefinitionFile>("groupPolicyUploadedDefinitionFiles", GroupPolicyUploadedDefinitionFiles);
            writer.WriteCollectionOfObjectValues<global::AITGraph.Sdk.Models.ImportedDeviceIdentity>("importedDeviceIdentities", ImportedDeviceIdentities);
            writer.WriteCollectionOfObjectValues<global::AITGraph.Sdk.Models.ImportedWindowsAutopilotDeviceIdentity>("importedWindowsAutopilotDeviceIdentities", ImportedWindowsAutopilotDeviceIdentities);
            writer.WriteCollectionOfObjectValues<global::AITGraph.Sdk.Models.DeviceManagementIntent>("intents", Intents);
            writer.WriteGuidValue("intuneAccountId", IntuneAccountId);
            writer.WriteObjectValue<global::AITGraph.Sdk.Models.IntuneBrand>("intuneBrand", IntuneBrand);
            writer.WriteCollectionOfObjectValues<global::AITGraph.Sdk.Models.IntuneBrandingProfile>("intuneBrandingProfiles", IntuneBrandingProfiles);
            writer.WriteCollectionOfObjectValues<global::AITGraph.Sdk.Models.IosUpdateDeviceStatus>("iosUpdateStatuses", IosUpdateStatuses);
            writer.WriteCollectionOfObjectValues<global::AITGraph.Sdk.Models.MacOSSoftwareUpdateAccountSummary>("macOSSoftwareUpdateAccountSummaries", MacOSSoftwareUpdateAccountSummaries);
            writer.WriteObjectValue<global::AITGraph.Sdk.Models.ManagedDeviceCleanupSettings>("managedDeviceCleanupSettings", ManagedDeviceCleanupSettings);
            writer.WriteCollectionOfObjectValues<global::AITGraph.Sdk.Models.ManagedDeviceEncryptionState>("managedDeviceEncryptionStates", ManagedDeviceEncryptionStates);
            writer.WriteObjectValue<global::AITGraph.Sdk.Models.ManagedDeviceOverview>("managedDeviceOverview", ManagedDeviceOverview);
            writer.WriteCollectionOfObjectValues<global::AITGraph.Sdk.Models.ManagedDevice>("managedDevices", ManagedDevices);
            writer.WriteIntValue("maximumDepTokens", MaximumDepTokens);
            writer.WriteCollectionOfObjectValues<global::AITGraph.Sdk.Models.MicrosoftTunnelConfiguration>("microsoftTunnelConfigurations", MicrosoftTunnelConfigurations);
            writer.WriteCollectionOfObjectValues<global::AITGraph.Sdk.Models.MicrosoftTunnelHealthThreshold>("microsoftTunnelHealthThresholds", MicrosoftTunnelHealthThresholds);
            writer.WriteCollectionOfObjectValues<global::AITGraph.Sdk.Models.MicrosoftTunnelServerLogCollectionResponse>("microsoftTunnelServerLogCollectionResponses", MicrosoftTunnelServerLogCollectionResponses);
            writer.WriteCollectionOfObjectValues<global::AITGraph.Sdk.Models.MicrosoftTunnelSite>("microsoftTunnelSites", MicrosoftTunnelSites);
            writer.WriteCollectionOfObjectValues<global::AITGraph.Sdk.Models.MobileAppTroubleshootingEvent>("mobileAppTroubleshootingEvents", MobileAppTroubleshootingEvents);
            writer.WriteCollectionOfObjectValues<global::AITGraph.Sdk.Models.MobileThreatDefenseConnector>("mobileThreatDefenseConnectors", MobileThreatDefenseConnectors);
            writer.WriteObjectValue<global::AITGraph.Sdk.Models.DeviceManagement.Monitoring>("monitoring", Monitoring);
            writer.WriteCollectionOfObjectValues<global::AITGraph.Sdk.Models.NdesConnector>("ndesConnectors", NdesConnectors);
            writer.WriteCollectionOfObjectValues<global::AITGraph.Sdk.Models.NotificationMessageTemplate>("notificationMessageTemplates", NotificationMessageTemplates);
            writer.WriteCollectionOfObjectValues<global::AITGraph.Sdk.Models.OemWarrantyInformationOnboarding>("oemWarrantyInformationOnboarding", OemWarrantyInformationOnboarding);
            writer.WriteCollectionOfObjectValues<global::AITGraph.Sdk.Models.RemoteActionAudit>("remoteActionAudits", RemoteActionAudits);
            writer.WriteCollectionOfObjectValues<global::AITGraph.Sdk.Models.RemoteAssistancePartner>("remoteAssistancePartners", RemoteAssistancePartners);
            writer.WriteObjectValue<global::AITGraph.Sdk.Models.RemoteAssistanceSettings>("remoteAssistanceSettings", RemoteAssistanceSettings);
            writer.WriteObjectValue<global::AITGraph.Sdk.Models.DeviceManagementReports>("reports", Reports);
            writer.WriteCollectionOfObjectValues<global::AITGraph.Sdk.Models.DeviceManagementResourceAccessProfileBase>("resourceAccessProfiles", ResourceAccessProfiles);
            writer.WriteCollectionOfObjectValues<global::AITGraph.Sdk.Models.ResourceOperation>("resourceOperations", ResourceOperations);
            writer.WriteCollectionOfObjectValues<global::AITGraph.Sdk.Models.DeviceManagementReusablePolicySetting>("reusablePolicySettings", ReusablePolicySettings);
            writer.WriteCollectionOfObjectValues<global::AITGraph.Sdk.Models.DeviceManagementConfigurationSettingDefinition>("reusableSettings", ReusableSettings);
            writer.WriteCollectionOfObjectValues<global::AITGraph.Sdk.Models.DeviceAndAppManagementRoleAssignment>("roleAssignments", RoleAssignments);
            writer.WriteCollectionOfObjectValues<global::AITGraph.Sdk.Models.RoleDefinition>("roleDefinitions", RoleDefinitions);
            writer.WriteCollectionOfObjectValues<global::AITGraph.Sdk.Models.RoleScopeTag>("roleScopeTags", RoleScopeTags);
            writer.WriteCollectionOfObjectValues<global::AITGraph.Sdk.Models.ServiceNowConnection>("serviceNowConnections", ServiceNowConnections);
            writer.WriteCollectionOfObjectValues<global::AITGraph.Sdk.Models.DeviceManagementSettingDefinition>("settingDefinitions", SettingDefinitions);
            writer.WriteObjectValue<global::AITGraph.Sdk.Models.DeviceManagementSettings>("settings", Settings);
            writer.WriteObjectValue<global::AITGraph.Sdk.Models.SoftwareUpdateStatusSummary>("softwareUpdateStatusSummary", SoftwareUpdateStatusSummary);
            writer.WriteEnumValue<global::AITGraph.Sdk.Models.DeviceManagementSubscriptions>("subscriptions", Subscriptions);
            writer.WriteEnumValue<global::AITGraph.Sdk.Models.DeviceManagementSubscriptionState>("subscriptionState", SubscriptionState);
            writer.WriteCollectionOfObjectValues<global::AITGraph.Sdk.Models.TelecomExpenseManagementPartner>("telecomExpenseManagementPartners", TelecomExpenseManagementPartners);
            writer.WriteCollectionOfObjectValues<global::AITGraph.Sdk.Models.DeviceManagementTemplate>("templates", Templates);
            writer.WriteCollectionOfObjectValues<global::AITGraph.Sdk.Models.DeviceManagementConfigurationSettingTemplate>("templateSettings", TemplateSettings);
            writer.WriteObjectValue<global::AITGraph.Sdk.Models.TenantAttachRBAC>("tenantAttachRBAC", TenantAttachRBAC);
            writer.WriteCollectionOfObjectValues<global::AITGraph.Sdk.Models.TermsAndConditions>("termsAndConditions", TermsAndConditions);
            writer.WriteCollectionOfObjectValues<global::AITGraph.Sdk.Models.DeviceManagementTroubleshootingEvent>("troubleshootingEvents", TroubleshootingEvents);
            writer.WriteCollectionOfObjectValues<global::AITGraph.Sdk.Models.UserExperienceAnalyticsAnomaly>("userExperienceAnalyticsAnomaly", UserExperienceAnalyticsAnomaly);
            writer.WriteCollectionOfObjectValues<global::AITGraph.Sdk.Models.UserExperienceAnalyticsAnomalyDevice>("userExperienceAnalyticsAnomalyDevice", UserExperienceAnalyticsAnomalyDevice);
            writer.WriteObjectValue<global::AITGraph.Sdk.Models.UserExperienceAnalyticsAnomalySeverityOverview>("userExperienceAnalyticsAnomalySeverityOverview", UserExperienceAnalyticsAnomalySeverityOverview);
            writer.WriteCollectionOfObjectValues<global::AITGraph.Sdk.Models.UserExperienceAnalyticsAppHealthApplicationPerformance>("userExperienceAnalyticsAppHealthApplicationPerformance", UserExperienceAnalyticsAppHealthApplicationPerformance);
            writer.WriteCollectionOfObjectValues<global::AITGraph.Sdk.Models.UserExperienceAnalyticsAppHealthAppPerformanceByAppVersion>("userExperienceAnalyticsAppHealthApplicationPerformanceByAppVersion", UserExperienceAnalyticsAppHealthApplicationPerformanceByAppVersion);
            writer.WriteCollectionOfObjectValues<global::AITGraph.Sdk.Models.UserExperienceAnalyticsAppHealthAppPerformanceByAppVersionDetails>("userExperienceAnalyticsAppHealthApplicationPerformanceByAppVersionDetails", UserExperienceAnalyticsAppHealthApplicationPerformanceByAppVersionDetails);
            writer.WriteCollectionOfObjectValues<global::AITGraph.Sdk.Models.UserExperienceAnalyticsAppHealthAppPerformanceByAppVersionDeviceId>("userExperienceAnalyticsAppHealthApplicationPerformanceByAppVersionDeviceId", UserExperienceAnalyticsAppHealthApplicationPerformanceByAppVersionDeviceId);
            writer.WriteCollectionOfObjectValues<global::AITGraph.Sdk.Models.UserExperienceAnalyticsAppHealthAppPerformanceByOSVersion>("userExperienceAnalyticsAppHealthApplicationPerformanceByOSVersion", UserExperienceAnalyticsAppHealthApplicationPerformanceByOSVersion);
            writer.WriteCollectionOfObjectValues<global::AITGraph.Sdk.Models.UserExperienceAnalyticsAppHealthDeviceModelPerformance>("userExperienceAnalyticsAppHealthDeviceModelPerformance", UserExperienceAnalyticsAppHealthDeviceModelPerformance);
            writer.WriteCollectionOfObjectValues<global::AITGraph.Sdk.Models.UserExperienceAnalyticsAppHealthDevicePerformance>("userExperienceAnalyticsAppHealthDevicePerformance", UserExperienceAnalyticsAppHealthDevicePerformance);
            writer.WriteCollectionOfObjectValues<global::AITGraph.Sdk.Models.UserExperienceAnalyticsAppHealthDevicePerformanceDetails>("userExperienceAnalyticsAppHealthDevicePerformanceDetails", UserExperienceAnalyticsAppHealthDevicePerformanceDetails);
            writer.WriteCollectionOfObjectValues<global::AITGraph.Sdk.Models.UserExperienceAnalyticsAppHealthOSVersionPerformance>("userExperienceAnalyticsAppHealthOSVersionPerformance", UserExperienceAnalyticsAppHealthOSVersionPerformance);
            writer.WriteObjectValue<global::AITGraph.Sdk.Models.UserExperienceAnalyticsCategory>("userExperienceAnalyticsAppHealthOverview", UserExperienceAnalyticsAppHealthOverview);
            writer.WriteCollectionOfObjectValues<global::AITGraph.Sdk.Models.UserExperienceAnalyticsBaseline>("userExperienceAnalyticsBaselines", UserExperienceAnalyticsBaselines);
            writer.WriteCollectionOfObjectValues<global::AITGraph.Sdk.Models.UserExperienceAnalyticsBatteryHealthAppImpact>("userExperienceAnalyticsBatteryHealthAppImpact", UserExperienceAnalyticsBatteryHealthAppImpact);
            writer.WriteObjectValue<global::AITGraph.Sdk.Models.UserExperienceAnalyticsBatteryHealthCapacityDetails>("userExperienceAnalyticsBatteryHealthCapacityDetails", UserExperienceAnalyticsBatteryHealthCapacityDetails);
            writer.WriteCollectionOfObjectValues<global::AITGraph.Sdk.Models.UserExperienceAnalyticsBatteryHealthDeviceAppImpact>("userExperienceAnalyticsBatteryHealthDeviceAppImpact", UserExperienceAnalyticsBatteryHealthDeviceAppImpact);
            writer.WriteCollectionOfObjectValues<global::AITGraph.Sdk.Models.UserExperienceAnalyticsBatteryHealthDevicePerformance>("userExperienceAnalyticsBatteryHealthDevicePerformance", UserExperienceAnalyticsBatteryHealthDevicePerformance);
            writer.WriteCollectionOfObjectValues<global::AITGraph.Sdk.Models.UserExperienceAnalyticsBatteryHealthDeviceRuntimeHistory>("userExperienceAnalyticsBatteryHealthDeviceRuntimeHistory", UserExperienceAnalyticsBatteryHealthDeviceRuntimeHistory);
            writer.WriteCollectionOfObjectValues<global::AITGraph.Sdk.Models.UserExperienceAnalyticsBatteryHealthModelPerformance>("userExperienceAnalyticsBatteryHealthModelPerformance", UserExperienceAnalyticsBatteryHealthModelPerformance);
            writer.WriteCollectionOfObjectValues<global::AITGraph.Sdk.Models.UserExperienceAnalyticsBatteryHealthOsPerformance>("userExperienceAnalyticsBatteryHealthOsPerformance", UserExperienceAnalyticsBatteryHealthOsPerformance);
            writer.WriteObjectValue<global::AITGraph.Sdk.Models.UserExperienceAnalyticsBatteryHealthRuntimeDetails>("userExperienceAnalyticsBatteryHealthRuntimeDetails", UserExperienceAnalyticsBatteryHealthRuntimeDetails);
            writer.WriteCollectionOfObjectValues<global::AITGraph.Sdk.Models.UserExperienceAnalyticsCategory>("userExperienceAnalyticsCategories", UserExperienceAnalyticsCategories);
            writer.WriteCollectionOfObjectValues<global::AITGraph.Sdk.Models.UserExperienceAnalyticsMetricHistory>("userExperienceAnalyticsDeviceMetricHistory", UserExperienceAnalyticsDeviceMetricHistory);
            writer.WriteCollectionOfObjectValues<global::AITGraph.Sdk.Models.UserExperienceAnalyticsDevicePerformance>("userExperienceAnalyticsDevicePerformance", UserExperienceAnalyticsDevicePerformance);
            writer.WriteObjectValue<global::AITGraph.Sdk.Models.UserExperienceAnalyticsDeviceScope>("userExperienceAnalyticsDeviceScope", UserExperienceAnalyticsDeviceScope);
            writer.WriteCollectionOfObjectValues<global::AITGraph.Sdk.Models.UserExperienceAnalyticsDeviceScope>("userExperienceAnalyticsDeviceScopes", UserExperienceAnalyticsDeviceScopes);
            writer.WriteCollectionOfObjectValues<global::AITGraph.Sdk.Models.UserExperienceAnalyticsDeviceScores>("userExperienceAnalyticsDeviceScores", UserExperienceAnalyticsDeviceScores);
            writer.WriteCollectionOfObjectValues<global::AITGraph.Sdk.Models.UserExperienceAnalyticsDeviceStartupHistory>("userExperienceAnalyticsDeviceStartupHistory", UserExperienceAnalyticsDeviceStartupHistory);
            writer.WriteCollectionOfObjectValues<global::AITGraph.Sdk.Models.UserExperienceAnalyticsDeviceStartupProcess>("userExperienceAnalyticsDeviceStartupProcesses", UserExperienceAnalyticsDeviceStartupProcesses);
            writer.WriteCollectionOfObjectValues<global::AITGraph.Sdk.Models.UserExperienceAnalyticsDeviceStartupProcessPerformance>("userExperienceAnalyticsDeviceStartupProcessPerformance", UserExperienceAnalyticsDeviceStartupProcessPerformance);
            writer.WriteCollectionOfObjectValues<global::AITGraph.Sdk.Models.UserExperienceAnalyticsDeviceWithoutCloudIdentity>("userExperienceAnalyticsDevicesWithoutCloudIdentity", UserExperienceAnalyticsDevicesWithoutCloudIdentity);
            writer.WriteCollectionOfObjectValues<global::AITGraph.Sdk.Models.UserExperienceAnalyticsDeviceTimelineEvent>("userExperienceAnalyticsDeviceTimelineEvent", UserExperienceAnalyticsDeviceTimelineEvent);
            writer.WriteCollectionOfObjectValues<global::AITGraph.Sdk.Models.UserExperienceAnalyticsImpactingProcess>("userExperienceAnalyticsImpactingProcess", UserExperienceAnalyticsImpactingProcess);
            writer.WriteCollectionOfObjectValues<global::AITGraph.Sdk.Models.UserExperienceAnalyticsMetricHistory>("userExperienceAnalyticsMetricHistory", UserExperienceAnalyticsMetricHistory);
            writer.WriteCollectionOfObjectValues<global::AITGraph.Sdk.Models.UserExperienceAnalyticsModelScores>("userExperienceAnalyticsModelScores", UserExperienceAnalyticsModelScores);
            writer.WriteCollectionOfObjectValues<global::AITGraph.Sdk.Models.UserExperienceAnalyticsNotAutopilotReadyDevice>("userExperienceAnalyticsNotAutopilotReadyDevice", UserExperienceAnalyticsNotAutopilotReadyDevice);
            writer.WriteObjectValue<global::AITGraph.Sdk.Models.UserExperienceAnalyticsOverview>("userExperienceAnalyticsOverview", UserExperienceAnalyticsOverview);
            writer.WriteCollectionOfObjectValues<global::AITGraph.Sdk.Models.UserExperienceAnalyticsRemoteConnection>("userExperienceAnalyticsRemoteConnection", UserExperienceAnalyticsRemoteConnection);
            writer.WriteCollectionOfObjectValues<global::AITGraph.Sdk.Models.UserExperienceAnalyticsResourcePerformance>("userExperienceAnalyticsResourcePerformance", UserExperienceAnalyticsResourcePerformance);
            writer.WriteCollectionOfObjectValues<global::AITGraph.Sdk.Models.UserExperienceAnalyticsScoreHistory>("userExperienceAnalyticsScoreHistory", UserExperienceAnalyticsScoreHistory);
            writer.WriteObjectValue<global::AITGraph.Sdk.Models.UserExperienceAnalyticsSettings>("userExperienceAnalyticsSettings", UserExperienceAnalyticsSettings);
            writer.WriteObjectValue<global::AITGraph.Sdk.Models.UserExperienceAnalyticsWorkFromAnywhereHardwareReadinessMetric>("userExperienceAnalyticsWorkFromAnywhereHardwareReadinessMetric", UserExperienceAnalyticsWorkFromAnywhereHardwareReadinessMetric);
            writer.WriteCollectionOfObjectValues<global::AITGraph.Sdk.Models.UserExperienceAnalyticsWorkFromAnywhereMetric>("userExperienceAnalyticsWorkFromAnywhereMetrics", UserExperienceAnalyticsWorkFromAnywhereMetrics);
            writer.WriteCollectionOfObjectValues<global::AITGraph.Sdk.Models.UserExperienceAnalyticsWorkFromAnywhereModelPerformance>("userExperienceAnalyticsWorkFromAnywhereModelPerformance", UserExperienceAnalyticsWorkFromAnywhereModelPerformance);
            writer.WriteCollectionOfObjectValues<global::AITGraph.Sdk.Models.UserPFXCertificate>("userPfxCertificates", UserPfxCertificates);
            writer.WriteObjectValue<global::AITGraph.Sdk.Models.VirtualEndpoint>("virtualEndpoint", VirtualEndpoint);
            writer.WriteCollectionOfObjectValues<global::AITGraph.Sdk.Models.WindowsAutopilotDeploymentProfile>("windowsAutopilotDeploymentProfiles", WindowsAutopilotDeploymentProfiles);
            writer.WriteCollectionOfObjectValues<global::AITGraph.Sdk.Models.WindowsAutopilotDeviceIdentity>("windowsAutopilotDeviceIdentities", WindowsAutopilotDeviceIdentities);
            writer.WriteObjectValue<global::AITGraph.Sdk.Models.WindowsAutopilotSettings>("windowsAutopilotSettings", WindowsAutopilotSettings);
            writer.WriteCollectionOfObjectValues<global::AITGraph.Sdk.Models.WindowsDriverUpdateProfile>("windowsDriverUpdateProfiles", WindowsDriverUpdateProfiles);
            writer.WriteCollectionOfObjectValues<global::AITGraph.Sdk.Models.WindowsFeatureUpdateProfile>("windowsFeatureUpdateProfiles", WindowsFeatureUpdateProfiles);
            writer.WriteCollectionOfObjectValues<global::AITGraph.Sdk.Models.WindowsInformationProtectionAppLearningSummary>("windowsInformationProtectionAppLearningSummaries", WindowsInformationProtectionAppLearningSummaries);
            writer.WriteCollectionOfObjectValues<global::AITGraph.Sdk.Models.WindowsInformationProtectionNetworkLearningSummary>("windowsInformationProtectionNetworkLearningSummaries", WindowsInformationProtectionNetworkLearningSummaries);
            writer.WriteCollectionOfObjectValues<global::AITGraph.Sdk.Models.WindowsMalwareInformation>("windowsMalwareInformation", WindowsMalwareInformation);
            writer.WriteObjectValue<global::AITGraph.Sdk.Models.WindowsMalwareOverview>("windowsMalwareOverview", WindowsMalwareOverview);
            writer.WriteCollectionOfObjectValues<global::AITGraph.Sdk.Models.WindowsQualityUpdateProfile>("windowsQualityUpdateProfiles", WindowsQualityUpdateProfiles);
            writer.WriteCollectionOfObjectValues<global::AITGraph.Sdk.Models.WindowsUpdateCatalogItem>("windowsUpdateCatalogItems", WindowsUpdateCatalogItems);
            writer.WriteCollectionOfObjectValues<global::AITGraph.Sdk.Models.ZebraFotaArtifact>("zebraFotaArtifacts", ZebraFotaArtifacts);
            writer.WriteObjectValue<global::AITGraph.Sdk.Models.ZebraFotaConnector>("zebraFotaConnector", ZebraFotaConnector);
            writer.WriteCollectionOfObjectValues<global::AITGraph.Sdk.Models.ZebraFotaDeployment>("zebraFotaDeployments", ZebraFotaDeployments);
        }
    }
}
#pragma warning restore CS0618
