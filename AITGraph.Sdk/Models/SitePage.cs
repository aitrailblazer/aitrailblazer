// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace AITGraph.Sdk.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class SitePage : global::AITGraph.Sdk.Models.BaseItem, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Indicates the layout of the content in a given SharePoint page, including horizontal sections and vertical section</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::AITGraph.Sdk.Models.CanvasLayout? CanvasLayout { get; set; }
#nullable restore
#else
        public global::AITGraph.Sdk.Models.CanvasLayout CanvasLayout { get; set; }
#endif
        /// <summary>Inherited from baseItem.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::AITGraph.Sdk.Models.ContentTypeInfo? ContentType { get; set; }
#nullable restore
#else
        public global::AITGraph.Sdk.Models.ContentTypeInfo ContentType { get; set; }
#endif
        /// <summary>The name of the page layout of the page. The possible values are: microsoftReserved, article, home, unknownFutureValue.</summary>
        public global::AITGraph.Sdk.Models.PageLayoutType? PageLayout { get; set; }
        /// <summary>Indicates the promotion kind of the sitePage. The possible values are: microsoftReserved, page, newsPost, unknownFutureValue.</summary>
        public global::AITGraph.Sdk.Models.PagePromotionType? PromotionKind { get; set; }
        /// <summary>The publishing status and the MM.mm version of the page.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::AITGraph.Sdk.Models.PublicationFacet? PublishingState { get; set; }
#nullable restore
#else
        public global::AITGraph.Sdk.Models.PublicationFacet PublishingState { get; set; }
#endif
        /// <summary>Reactions information for the page.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::AITGraph.Sdk.Models.ReactionsFacet? Reactions { get; set; }
#nullable restore
#else
        public global::AITGraph.Sdk.Models.ReactionsFacet Reactions { get; set; }
#endif
        /// <summary>Determines whether or not to show comments at the bottom of the page.</summary>
        public bool? ShowComments { get; set; }
        /// <summary>Determines whether or not to show recommended pages at the bottom of the page.</summary>
        public bool? ShowRecommendedPages { get; set; }
        /// <summary>Url of the sitePage&apos;s thumbnail image</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ThumbnailWebUrl { get; set; }
#nullable restore
#else
        public string ThumbnailWebUrl { get; set; }
#endif
        /// <summary>Title of the sitePage.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Title { get; set; }
#nullable restore
#else
        public string Title { get; set; }
#endif
        /// <summary>Title area on the SharePoint page.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::AITGraph.Sdk.Models.TitleArea? TitleArea { get; set; }
#nullable restore
#else
        public global::AITGraph.Sdk.Models.TitleArea TitleArea { get; set; }
#endif
        /// <summary>Collection of webparts on the SharePoint page</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::AITGraph.Sdk.Models.WebPart>? WebParts { get; set; }
#nullable restore
#else
        public List<global::AITGraph.Sdk.Models.WebPart> WebParts { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::AITGraph.Sdk.Models.SitePage"/> and sets the default values.
        /// </summary>
        public SitePage() : base()
        {
            OdataType = "#microsoft.graph.sitePage";
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::AITGraph.Sdk.Models.SitePage"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static new global::AITGraph.Sdk.Models.SitePage CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::AITGraph.Sdk.Models.SitePage();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public override IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>(base.GetFieldDeserializers())
            {
                { "canvasLayout", n => { CanvasLayout = n.GetObjectValue<global::AITGraph.Sdk.Models.CanvasLayout>(global::AITGraph.Sdk.Models.CanvasLayout.CreateFromDiscriminatorValue); } },
                { "contentType", n => { ContentType = n.GetObjectValue<global::AITGraph.Sdk.Models.ContentTypeInfo>(global::AITGraph.Sdk.Models.ContentTypeInfo.CreateFromDiscriminatorValue); } },
                { "pageLayout", n => { PageLayout = n.GetEnumValue<global::AITGraph.Sdk.Models.PageLayoutType>(); } },
                { "promotionKind", n => { PromotionKind = n.GetEnumValue<global::AITGraph.Sdk.Models.PagePromotionType>(); } },
                { "publishingState", n => { PublishingState = n.GetObjectValue<global::AITGraph.Sdk.Models.PublicationFacet>(global::AITGraph.Sdk.Models.PublicationFacet.CreateFromDiscriminatorValue); } },
                { "reactions", n => { Reactions = n.GetObjectValue<global::AITGraph.Sdk.Models.ReactionsFacet>(global::AITGraph.Sdk.Models.ReactionsFacet.CreateFromDiscriminatorValue); } },
                { "showComments", n => { ShowComments = n.GetBoolValue(); } },
                { "showRecommendedPages", n => { ShowRecommendedPages = n.GetBoolValue(); } },
                { "thumbnailWebUrl", n => { ThumbnailWebUrl = n.GetStringValue(); } },
                { "title", n => { Title = n.GetStringValue(); } },
                { "titleArea", n => { TitleArea = n.GetObjectValue<global::AITGraph.Sdk.Models.TitleArea>(global::AITGraph.Sdk.Models.TitleArea.CreateFromDiscriminatorValue); } },
                { "webParts", n => { WebParts = n.GetCollectionOfObjectValues<global::AITGraph.Sdk.Models.WebPart>(global::AITGraph.Sdk.Models.WebPart.CreateFromDiscriminatorValue)?.AsList(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public override void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            base.Serialize(writer);
            writer.WriteObjectValue<global::AITGraph.Sdk.Models.CanvasLayout>("canvasLayout", CanvasLayout);
            writer.WriteObjectValue<global::AITGraph.Sdk.Models.ContentTypeInfo>("contentType", ContentType);
            writer.WriteEnumValue<global::AITGraph.Sdk.Models.PageLayoutType>("pageLayout", PageLayout);
            writer.WriteEnumValue<global::AITGraph.Sdk.Models.PagePromotionType>("promotionKind", PromotionKind);
            writer.WriteObjectValue<global::AITGraph.Sdk.Models.PublicationFacet>("publishingState", PublishingState);
            writer.WriteObjectValue<global::AITGraph.Sdk.Models.ReactionsFacet>("reactions", Reactions);
            writer.WriteBoolValue("showComments", ShowComments);
            writer.WriteBoolValue("showRecommendedPages", ShowRecommendedPages);
            writer.WriteStringValue("thumbnailWebUrl", ThumbnailWebUrl);
            writer.WriteStringValue("title", Title);
            writer.WriteObjectValue<global::AITGraph.Sdk.Models.TitleArea>("titleArea", TitleArea);
            writer.WriteCollectionOfObjectValues<global::AITGraph.Sdk.Models.WebPart>("webParts", WebParts);
        }
    }
}
#pragma warning restore CS0618
