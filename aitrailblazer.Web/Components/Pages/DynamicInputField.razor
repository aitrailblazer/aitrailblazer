@inject IJSRuntime JSRuntime

<FluentStack Orientation="Orientation.Vertical" HorizontalAlignment="@Horizontal" VerticalAlignment="@Vertical"
    VerticalGap="1" Style="border: 1px dotted var(--accent-fill-rest)">
    @if (Submitting)
    {
        <FluentLabel Typo="Typography.Body">Please wait...</FluentLabel>

        <FluentProgress Class="progress-top" style="color: var(--themePrimary);"></FluentProgress>
    }
    else
    {
            <FluentStack Orientation="Orientation.Vertical" HorizontalAlignment="@Horizontal" VerticalAlignment="@Vertical"
                VerticalGap="1" Style="border: 1px dotted var(--accent-fill-rest); position: relative; padding-right: 50px;">
<!--
                <FluentTextArea Typo="Typography.Body" 
                @bind-Value="@Value" 
                @oninput="HandleInput" 
                Placeholder="@Placeholder"
                    style="width: 100%; max-height: 200px; overflow-y: auto;" 
                    Class="card-splitter alert alert-primary content-splitter-font-size"
                    Appearance="FluentInputAppearance.Filled" 
                    Autofocus="@Autofocus" 
                    Minlength="@MinLength"
                    MaxLength="@MaxLength" 
                    Rows="@Rows" id="fluentTextArea" />
-->
                <textarea @bind="Value" @oninput="HandleInput" placeholder="@Placeholder" maxlength="@MaxLength" id="animatedTextarea" 
                    style="width: 100%; padding: 12px; font-size: 16px; border: 1px solid #ccc; border-radius: 8px; resize: vertical; transition: border-color 0.3s ease; max-height: 200px; overflow-y: auto;">
                </textarea>
                <FluentButton IconStart="@(new Icons.Filled.Size32.ArrowCircleUp())" Class="FluentButton"
                    @onclick="OnButtonClicked" style="position: absolute; right: 0; top: 10%;">
                </FluentButton>
            </FluentStack>

    }


</FluentStack>

@code {
    [Parameter] public string FeatureName { get; set; } = "AIClearNote";
    [Parameter] public string Value { get; set; } = "";

    [Parameter] public string Placeholder { get; set; } = "Enter command or text";
    [Parameter] public bool Autofocus { get; set; } = false;
    [Parameter] public int MinLength { get; set; } = 16;
    [Parameter] public int MaxLength { get; set; } = 1024;
    [Parameter] public int Rows { get; set; } = 24;
    [Parameter] public EventCallback<string> ValueChanged { get; set; }
    [Parameter] public EventCallback<string> OnSubmit { get; set; }
    [Parameter] public bool Submitting { get; set; }

    private bool IsButtonDisabled => string.IsNullOrEmpty(Value) || Value.Length < MinLength;

    private bool isFirstRender = true;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && isFirstRender)
        {
            try
            {
                //var localStorageKey = $"{FeatureName}_{nameof(DynamicInputField)}";
                //var storedValue = await JSRuntime.InvokeAsync<string>("localStorageInterop.getItem", localStorageKey);

                //if (!string.IsNullOrEmpty(storedValue))
                //{
                // PresetsInputValueService.FeatureSettings[localStorageKey] = storedValue;
                // Value = storedValue;

                // if (ValueChanged.HasDelegate)
                // {
                // await ValueChanged.InvokeAsync(Value);
                // }
                //}
            }
            catch (Exception ex)
            {
                Console.Error.WriteLine($"Error retrieving item from local storage: {ex.Message}");
            }
            finally
            {
                isFirstRender = false;
            }
        }
    }

    private async Task OnButtonClicked(MouseEventArgs e)
    {
        //var localStorageKey = $"{FeatureName}_{nameof(DynamicInputField)}";
        //if (ValueChanged.HasDelegate)
        //{
        // await ValueChanged.InvokeAsync(Value);
        //}
        //Submitting = true;
        //await JSRuntime.InvokeVoidAsync("localStorageInterop.saveItem", localStorageKey, Value);
        await OnSubmit.InvokeAsync(Value);
        //Submitting = false;
    }

    private async void HandleInput(ChangeEventArgs e)
    {
        Value = e.Value.ToString();
        //var localStorageKey = $"{FeatureName}_{nameof(DynamicInputField)}";

        //if (PresetsInputValueService.FeatureSettings.ContainsKey(localStorageKey))
        //{
        // PresetsInputValueService.FeatureSettings[localStorageKey] = Value;
        //}
        //else
        //{
        // PresetsInputValueService.FeatureSettings.Add(localStorageKey, Value);
        //}

        //await JSRuntime.InvokeVoidAsync("localStorageInterop.saveItem", localStorageKey, Value);

        if (ValueChanged.HasDelegate)
        {
            await ValueChanged.InvokeAsync(Value);
        }
        await JSRuntime.InvokeVoidAsync("adjustTextAreaHeight", "animatedTextarea");

        StateHasChanged(); // Trigger a re-render to update the button's disabled state
    }

    HorizontalAlignment Horizontal;
    VerticalAlignment Vertical;
}
