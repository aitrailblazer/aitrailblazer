// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace AITGraph.Sdk.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class Printer : global::AITGraph.Sdk.Models.PrinterBase, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>The acceptingJobs property</summary>
        public bool? AcceptingJobs { get; set; }
        /// <summary>The connectors that are associated with the printer.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::AITGraph.Sdk.Models.PrintConnector>? Connectors { get; set; }
#nullable restore
#else
        public List<global::AITGraph.Sdk.Models.PrintConnector> Connectors { get; set; }
#endif
        /// <summary>True if the printer has a physical device for printing. Read-only.</summary>
        public bool? HasPhysicalDevice { get; set; }
        /// <summary>True if the printer is shared; false otherwise. Read-only.</summary>
        public bool? IsShared { get; set; }
        /// <summary>The most recent dateTimeOffset when a printer interacted with Universal Print. Read-only.</summary>
        public DateTimeOffset? LastSeenDateTime { get; set; }
        /// <summary>The DateTimeOffset when the printer was registered. Read-only.</summary>
        public DateTimeOffset? RegisteredDateTime { get; set; }
        /// <summary>The share property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::AITGraph.Sdk.Models.PrinterShare? Share { get; set; }
#nullable restore
#else
        public global::AITGraph.Sdk.Models.PrinterShare Share { get; set; }
#endif
        /// <summary>The list of printerShares that are associated with the printer. Currently, only one printerShare can be associated with the printer. Read-only. Nullable.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::AITGraph.Sdk.Models.PrinterShare>? Shares { get; set; }
#nullable restore
#else
        public List<global::AITGraph.Sdk.Models.PrinterShare> Shares { get; set; }
#endif
        /// <summary>A list of task triggers that are associated with the printer.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::AITGraph.Sdk.Models.PrintTaskTrigger>? TaskTriggers { get; set; }
#nullable restore
#else
        public List<global::AITGraph.Sdk.Models.PrintTaskTrigger> TaskTriggers { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::AITGraph.Sdk.Models.Printer"/> and sets the default values.
        /// </summary>
        public Printer() : base()
        {
            OdataType = "#microsoft.graph.printer";
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::AITGraph.Sdk.Models.Printer"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static new global::AITGraph.Sdk.Models.Printer CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::AITGraph.Sdk.Models.Printer();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public override IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>(base.GetFieldDeserializers())
            {
                { "acceptingJobs", n => { AcceptingJobs = n.GetBoolValue(); } },
                { "connectors", n => { Connectors = n.GetCollectionOfObjectValues<global::AITGraph.Sdk.Models.PrintConnector>(global::AITGraph.Sdk.Models.PrintConnector.CreateFromDiscriminatorValue)?.AsList(); } },
                { "hasPhysicalDevice", n => { HasPhysicalDevice = n.GetBoolValue(); } },
                { "isShared", n => { IsShared = n.GetBoolValue(); } },
                { "lastSeenDateTime", n => { LastSeenDateTime = n.GetDateTimeOffsetValue(); } },
                { "registeredDateTime", n => { RegisteredDateTime = n.GetDateTimeOffsetValue(); } },
                { "share", n => { Share = n.GetObjectValue<global::AITGraph.Sdk.Models.PrinterShare>(global::AITGraph.Sdk.Models.PrinterShare.CreateFromDiscriminatorValue); } },
                { "shares", n => { Shares = n.GetCollectionOfObjectValues<global::AITGraph.Sdk.Models.PrinterShare>(global::AITGraph.Sdk.Models.PrinterShare.CreateFromDiscriminatorValue)?.AsList(); } },
                { "taskTriggers", n => { TaskTriggers = n.GetCollectionOfObjectValues<global::AITGraph.Sdk.Models.PrintTaskTrigger>(global::AITGraph.Sdk.Models.PrintTaskTrigger.CreateFromDiscriminatorValue)?.AsList(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public override void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            base.Serialize(writer);
            writer.WriteBoolValue("acceptingJobs", AcceptingJobs);
            writer.WriteCollectionOfObjectValues<global::AITGraph.Sdk.Models.PrintConnector>("connectors", Connectors);
            writer.WriteBoolValue("hasPhysicalDevice", HasPhysicalDevice);
            writer.WriteBoolValue("isShared", IsShared);
            writer.WriteDateTimeOffsetValue("lastSeenDateTime", LastSeenDateTime);
            writer.WriteDateTimeOffsetValue("registeredDateTime", RegisteredDateTime);
            writer.WriteObjectValue<global::AITGraph.Sdk.Models.PrinterShare>("share", Share);
            writer.WriteCollectionOfObjectValues<global::AITGraph.Sdk.Models.PrinterShare>("shares", Shares);
            writer.WriteCollectionOfObjectValues<global::AITGraph.Sdk.Models.PrintTaskTrigger>("taskTriggers", TaskTriggers);
        }
    }
}
#pragma warning restore CS0618
