@page "/profile"
@rendermode InteractiveServer

@attribute [Authorize]
@using SmartComponents
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Authorization
@using Microsoft.Identity.Web
@using AITGraph.Sdk.Models
@using AITrailBlazer.Web.Services
@using aitrailblazer.net.Services
@using aitrailblazer.net.Models

@using Markdig
@inject AITGraphService GraphService
@inject NavigationManager NavigationManager
@inject AzureOpenAIHandler azureOpenAIHandler
@inject IJSRuntime JS
@using GraphMessage = AITGraph.Sdk.Models.Message

@using Microsoft.AspNetCore.Components.Web

@if (isLoading)
{
    <p><em>Loading...</em></p>
}
else if (error != null)
{
    <div class="alert alert-danger" role="alert">
        @error
    </div>
}
else if (user != null)
{
    <FluentCard MinimalStyle="true" Width="1280px" Height="640px" Style="border: 2px solid var(--accent-fill-rest); padding: 20px;" Class="fluent-card-user-details-size">
        <div style="display: flex; align-items: center;">
            @if (userPhotoBase64 != null)
            {
                <img src="data:image/jpeg;base64,@userPhotoBase64" alt="User Photo"
                     style="width: 100px; height: 100px; object-fit: cover; border-radius: 50%; margin-right: 20px;" />
            }
            else
            {
                <div style="width: 100px; height: 100px; background-color: #ccc; border-radius: 50%; display: flex; align-items: center; justify-content: center; margin-right: 20px;">
                    <span style="font-size: 50px; color: white;">ðŸ‘¤</span>
                </div>
            }

            <div>
                <h2>Welcome, @GetUserFullName()!</h2>
                <p>@GetUserEmail()</p>
                <p style="color: gray;">We are glad to have you here.</p>
            </div>
        </div>

        <!-- Input Section for Azure OpenAI Query -->
        <div style="margin-top: 20px; display: flex; align-items: center; max-width: 820px;">
            <FluentStack Orientation="Orientation.Vertical" HorizontalAlignment="@Horizontal" VerticalAlignment="@Vertical" VerticalGap="1">
                <FluentStack Orientation="Orientation.Horizontal" HorizontalAlignment="@Horizontal" VerticalAlignment="@Vertical" VerticalGap="1">
                    <FluentTextArea 
                        Typo="Typography.Body" 
                        @bind-Value="@userQuery" 
                        @oninput="HandleInput" 
                        Placeholder="Enter your question here..."
                        style="flex: 1; max-height: 80px; overflow-y: auto;" 
                        Class="card-splitter alert alert-primary content-splitter-font-size"
                        Appearance="FluentInputAppearance.Filled" 
                        Autofocus="@Autofocus" 
                        Minlength="@MinLength"
                        MaxLength="@MaxLength" 
                        Rows="@Rows" 
                        id="fluentTextArea" />
                    
                    <FluentButton 
                        IconStart="@(new Icons.Filled.Size32.ArrowCircleUp())" 
                        Class="FluentButton"
                        @onclick="OnButtonClicked" 
                        >
                        Send
                    </FluentButton>
                </FluentStack>
                @if (isDeleting)
                {
                    <FluentLabel Typo="Typography.Body">Please wait...</FluentLabel>
                    <FluentProgress Class="progress-top" style="color: var(--themePrimary);"></FluentProgress>
                }
                @if (Submitting)
                {
                    <FluentLabel Typo="Typography.Body">Please wait...</FluentLabel>
                    <FluentProgress Class="progress-top" style="color: var(--themePrimary);"></FluentProgress>
                } 
                else 
                {
                    @if (showResponse && !string.IsNullOrEmpty(response))
                    {
                        <FluentCard MinimalStyle="false" Class="response-card" Width="720px" 
                                    Style="@($"background-color: #FFFFFF; border: 1px solid #ccc; position: absolute; top: 10px; left: 50%; transform: translateX(-50%); z-index: 9999; height: {calculatedHeight}px;")">
                            <div style="display: flex; justify-content: space-between; align-items: center;">
                                <FluentLabel Typo="Typography.Subject" Class="response-label">
                                    Response:
                                </FluentLabel>
                                <FluentButton 
                                    IconStart="@(new Icons.Filled.Size24.Dismiss())" 
                                    Appearance="Appearance.Stealth" 
                                    Class="close-button"
                                    @onclick="CloseResponse"
                                    aria-label="Close Response">
                                </FluentButton>
                            </div>
                            <FluentTextBlock Typo="Typography.Body" Class="response-text" Style="max-height: @(calculatedHeight - 50)px; overflow-y: auto;">
                                @((MarkupString)formattedResponse)
                            </FluentTextBlock>
                        </FluentCard>
                    }
                }
            </FluentStack>
        </div>

        <FluentTabs @bind-ActiveTabId="@activeTabId" OnTabChange="HandleOnTabChange">
            <!-- Emails Tab -->
            <FluentTab Id="Emails-tab">
                <Header>
                    <FluentIcon Value="@(new Icons.Regular.Size20.Mail())" />
                    <FluentLabel Typo="Typography.Body" Appearance="Appearance.Stealth" Color="@Color.Neutral">
                        Mail
                    </FluentLabel>
                </Header>
                <Content>
                    <FluentLabel Typo="Typography.H4" Appearance="Appearance.Stealth" Color="@Color.Neutral">
                        Your Emails in Outlook
                    </FluentLabel>
                    <FluentLabel Typo="Typography.Body" Appearance="Appearance.Stealth" Color="@Color.Neutral">
                        Access and manage your Outlook emails directly from this tab.
                    </FluentLabel>

                    @if (emailsWithComputedProperties != null && emailsWithComputedProperties.Any())
                    {
                        <div style="max-height: 640px; overflow-y: auto;" tabindex="-1">

                            <FluentDataGrid 
                            Items="@emailsWithComputedProperties.AsQueryable()" 
                            TGridItem="EmailViewModel"
                            ShowHover="true" 
                            TGridItem="EmailViewModel"
                            SelectionMode="DataGridSelectionMode.Single" 
                            SelectedItemsChanged="OnSelectedEmailChanged"
                            GenerateHeader="GenerateHeaderOption.Sticky">
                                <PropertyColumn 
                                Property="@(e => e.SenderName)" 
                                Title="Sender" Sortable="true" 
                                Width="200px" />

                                <PropertyColumn 
                                Property="@(e => e.Subject)" 
                                Title="Subject" 
                                Sortable="true" 
                                Width="300px" />

                                <PropertyColumn 
                                Property="@(e => e.ReceivedDateTimeFormatted)" 
                                Title="Received" 
                                Sortable="true" 
                                Width="150px" />
                                <!-- Actions Column -->
                                <TemplateColumn 
                                    Title="Actions" 
                                    Width="100px">
                                    <ChildContent Context="emailViewModel">
                                        <FluentButton 
                                            OnClick="@(() => OpenEmailDialog(emailViewModel))" 
                                            Appearance="Appearance.Stealth" 
                                            Size="Size.Small"
                                            IconStart="@(new Icons.Regular.Size20.Eye())"
                                            class="text-gray-500 hover:text-gray-700">
                                            View
                                        </FluentButton>
                                    </ChildContent>
                                </TemplateColumn>
                            </FluentDataGrid>
                        </div>

                     }
                    else
                    {
                        <p>No emails available</p>
                    }

                    <!-- Email Content Dialog -->
                    @if (selectedEmail != null)
                    {
                        <FluentDialog Id="emailContentDialog" Visible="true" OnDismiss="CloseEmailDialog" Style="width: 80vw; max-height: 420px; overflow: auto;">
                            <div style="max-height: 70vh; overflow-y: auto;">
                                <h3>@selectedEmail.Subject</h3>
                                <p><strong>From:</strong> @selectedEmail.From?.EmailAddress?.Name</p>
                                <p><strong>To:</strong> @(selectedEmail.ToRecipients != null && selectedEmail.ToRecipients.Any()
                                    ? string.Join(", ", selectedEmail.ToRecipients.Select(r => r.EmailAddress.Name))
                                    : "No recipients")</p>
                                <p><strong>Received:</strong> @selectedEmail.ReceivedDateTime?.ToLocalTime().ToString("g")</p>
                                <pre style="white-space: pre-wrap; padding: 10px; background-color: #f5f5f5; border: 1px solid #ddd; font-size: 16px; color: black;">
                                    @if (!string.IsNullOrEmpty(selectedEmail.BodyContent))
                                    {
                                        if (selectedEmail.BodyContentType == BodyType.Html)
                                        {
                                            @((MarkupString)selectedEmail.BodyContent)
                                        }
                                        else
                                        {
                                            @GetPlainText(selectedEmail)
                                        }
                                    }
                                    else
                                    {
                                        <em>No content available</em>
                                    }
                                </pre>
                            </div>
                            <!-- Changed Appearance from Accent to Primary -->
                            <FluentButton Appearance="Appearance.Accent" OnClick="CloseEmailDialog">Close</FluentButton>
                        </FluentDialog>
                    }

                </Content>
            </FluentTab>

            <!-- Calendar Tab -->
            <FluentTab Id="Calendar-tab">
                <Header>
                    <FluentIcon Value="@(new Icons.Regular.Size20.Calendar())" />
                    <FluentLabel Typo="Typography.Body" Appearance="Appearance.Stealth" Color="@Color.Neutral">
                        Calendar
                    </FluentLabel>
                </Header>
                <Content>
                    <FluentLabel Typo="Typography.H4" Appearance="Appearance.Stealth" Color="@Color.Neutral">
                        Your Outlook Calendar
                    </FluentLabel>
                    <FluentLabel Typo="Typography.Body" Appearance="Appearance.Stealth" Color="@Color.Neutral">
                        Access and manage your Outlook calendar directly from this tab.
                    </FluentLabel>

                    @if (calendarEventsWithComputedProperties != null && calendarEventsWithComputedProperties.Any())
                    {
                        <div style="max-height: 640px; overflow-y: auto;" tabindex="-1">
                            <FluentDataGrid 
                                Items="@calendarEventsWithComputedProperties.AsQueryable()" 
                                ShowHover="true" 
                                TGridItem="EventViewModel"
                                SelectionMode="DataGridSelectionMode.Single" 
                                SelectedItemsChanged="OnSelectedEventChanged"
                                GenerateHeader="GenerateHeaderOption.Sticky" 
                                Style="width: 820px;">
                                
                                <!-- Select Column with Fixed Width -->
                                <SelectColumn 
                                    TGridItem="EventViewModel" 
                                    SelectMode="DataGridSelectMode.Single" 
                                    Width="50px" />
                                
                                <!-- Event Subject Column -->
                                <PropertyColumn 
                                    Property="@(e => e.Subject)"
                                    Title="Event" 
                                    Sortable="true" 
                                    Width="250px" />
                                
                                <!-- Start Date Column -->
                                <PropertyColumn 
                                    Property="@(e => e.StartDateTimeFormatted)"
                                    Title="Start" 
                                    Sortable="true" 
                                    Width="150px" />
                                
                                <!-- End Date Column -->
                                <PropertyColumn 
                                    Property="@(e => e.EndDateTimeFormatted)"
                                    Title="End" 
                                    Sortable="true" 
                                    Width="150px" />
                                
                                <!-- Actions Column -->
                                <TemplateColumn 
                                    Title="Actions" 
                                    Width="100px">
                                    <ChildContent Context="eventViewModel">
                                        <FluentButton 
                                            OnClick="@(() => OpenEventDialog(eventViewModel))" 
                                            Appearance="Appearance.Stealth" 
                                            Size="Size.Small"
                                            IconStart="@(new Icons.Regular.Size20.Eye())"
                                            class="text-gray-500 hover:text-gray-700">
                                            View
                                        </FluentButton>
                                    </ChildContent>
                                </TemplateColumn>
                                
                            </FluentDataGrid>
                        </div>
                    }
                    else
                    {
                        <p>No events available</p>
                    }

                    <!-- Event Details Dialog -->
                    @if (selectedEvent != null)
                    {
                        <FluentDialog 
                            Visible="true" 
                            OnDismiss="CloseEventDetailsDialog" 
                            Class="dialog-container">
                            
                            <!-- Wrapper Div for Flex Layout -->
                            <div class="dialog-wrapper">
                                
                                <!-- Scrollable Content Area -->
                                <div class="dialog-content">
                                    <h3>@selectedEvent.Subject</h3>
                                    <p><strong>Start:</strong> @selectedEvent.StartDateTimeFormatted</p>
                                    <p><strong>End:</strong> @selectedEvent.EndDateTimeFormatted</p>
                                    <p><strong>Location:</strong> @selectedEvent.Location ?? "N/A"</p>
                                    <p><strong>Organizer:</strong> @selectedEvent.OriginalEvent.Organizer?.EmailAddress?.Name ?? "N/A"</p>
                                    <p><strong>Description:</strong></p>
                                    <div style="white-space: normal; padding: 10px; background-color: #f5f5f5; border: 1px solid #ddd;">
                                        @((MarkupString)(selectedEvent.OriginalEvent.Body?.Content ?? "No description available"))
                                    </div>
                                </div>
                                
                                <!-- Fixed Footer with Close Button -->
                                <div class="dialog-footer">
                                    <FluentButton OnClick="CloseEventDetailsDialog" Appearance="Appearance.Accent">Close</FluentButton>
                                </div>
                            </div>
                        </FluentDialog>
                    }

                </Content>
            </FluentTab>
            <!-- Contacts Tab -->
            <FluentTab Id="Contacts-tab">
                <Header>
                    <FluentIcon Value="@(new Icons.Regular.Size20.People())" />
                    <FluentLabel Typo="Typography.Body" Appearance="Appearance.Stealth" Color="@Color.Neutral">
                        Contacts
                    </FluentLabel>
                </Header>
                <Content>
                    <FluentLabel Typo="Typography.H4" Appearance="Appearance.Stealth" Color="@Color.Neutral">
                        Your Contacts
                    </FluentLabel>
                    <FluentLabel Typo="Typography.Body" Appearance="Appearance.Stealth" Color="@Color.Neutral">
                        Access and manage your contacts directly from this tab.
                    </FluentLabel>
                    <FluentButton 
                        OnClick="OpenNewContactDialog" 
                        Appearance="Appearance.Accent"
                        IconStart="@(new Icons.Regular.Size20.PersonAdd())"
                        Size="Size.Small">
                        Add New Contact
                    </FluentButton>
                    @if (contactsWithComputedProperties != null && contactsWithComputedProperties.Any())
                    {
                        <div style="max-height: 640px; overflow-y: auto;" tabindex="-1">
                            <FluentDataGrid 
                                Items="@contactsWithComputedProperties.AsQueryable()" 
                                ShowHover="true" 
                                TGridItem="ContactViewModel"
                                SelectionMode="DataGridSelectionMode.Single" 
                                SelectedItemsChanged="OnSelectedContactChanged"
                                GenerateHeader="GenerateHeaderOption.Sticky" 
                                Style="width: 820px;">
                                
                                <!-- Contact Name Column -->
                                <PropertyColumn 
                                    Property="@(c => c.DisplayName)"
                                    Title="Name" 
                                    Sortable="true" 
                                    Width="200px" />
                                
                                <!-- Email Address Column -->
                                <PropertyColumn 
                                    Property="@(c => c.EmailAddressesFormatted)"
                                    Title="Email" 
                                    Sortable="true" 
                                    Width="250px" />
                                
                                <!-- Mobile Phone Column -->
                                <PropertyColumn 
                                    Property="@(c => c.MobilePhone)"
                                    Title="Mobile Phone" 
                                    Sortable="true" 
                                    Width="150px" />
                                
                                <!-- Actions Column -->
                                <TemplateColumn Title="Actions" Width="200px">
                                    <ChildContent Context="contactViewModel">
                                        <FluentStack Orientation="Orientation.Horizontal" HorizontalGap="5">
                                            <FluentButton 
                                                OnClick="() => OpenContactDialog(contactViewModel)" 
                                                Appearance="Appearance.Stealth" 
                                                Size="Size.Small"
                                                IconStart="@(new Icons.Regular.Size20.Edit())"
                                                class="text-gray-500 hover:text-gray-700">
                                                Edit
                                            </FluentButton>
                                            <FluentButton 
                                                OnClick="() => DeleteContactAsync(contactViewModel.Id)" 
                                                Appearance="Appearance.Stealth" 
                                                Size="Size.Small"
                                                IconStart="@(new Icons.Regular.Size20.Delete())"
                                                class="text-gray-500 hover:text-gray-700">
                                                Delete
                                            </FluentButton>
                                        </FluentStack>
                                    </ChildContent>
                                </TemplateColumn>
                                
                            </FluentDataGrid>
                        </div>
                    }
                    else
                    {
                        <p>No contacts available</p>
                    }

                    <!-- Contact Details Dialog -->
                    @if (selectedContact != null && isContactDetailsDialogVisible)
                    {
                        <FluentDialog @bind-Visible="isContactDetailsDialogVisible">
                            <FluentCard MinimalStyle="true" Width="640px" Height="100%" Style="border: 1px solid var(--accent-fill-rest); padding: 0px; margin-right: 0px;" Class="fluent-card-summary-details">
                                <FluentHeader>@(string.IsNullOrEmpty(selectedContact.Id) ? "Add New Contact" : "Edit Contact")</FluentHeader>
                                <EditForm Model="@selectedContact" OnValidSubmit="SaveContactAsync">
                                    <DataAnnotationsValidator />
                                    <ValidationSummary class="mb-4 text-red-600" />
                                    <form class="default-form rounded-lg bg-white p-8 shadow-xl mb-12">
                                        <div class="grid gap-8 md:grid-cols-2">
                                            <!-- Personal Information -->
                                            <div class="col-span-2">
                                                <h3 class="text-lg font-medium text-gray-900 mb-4">Personal Information</h3>
                                                <FluentStack Orientation="Orientation.Horizontal" HorizontalAlignment="@Horizontal" VerticalAlignment="@Vertical">
                                                    <div>
                                                        <label for="FirstName" class="block text-sm font-medium text-gray-700 mb-2">First Name</label>
                                                        <InputText id="FirstName" class="mt-1 block w-full rounded-lg border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm p-2" @bind-Value="@selectedContact.GivenName"></InputText>
                                                    </div>
                                                    <div>
                                                        <label for="LastName" class="block text-sm font-medium text-gray-700 mb-2">Last Name</label>
                                                        <InputText id="LastName" class="mt-1 block w-full rounded-lg border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm p-2" @bind-Value="@selectedContact.Surname"></InputText>
                                                        <ValidationMessage For="@(() => selectedContact.Surname)" />
                                                    </div>
                                                </FluentStack>
                                            </div>

                                            <!-- Contact Information -->
                                            <div class="col-span-2">
                                                <h3 class="text-lg font-medium text-gray-900 mb-4">Contact Information</h3>
                                                <FluentStack Orientation="Orientation.Horizontal" HorizontalAlignment="@Horizontal" VerticalAlignment="@Vertical">
                                                    <div>
                                                        <label for="email" class="block text-sm font-medium text-gray-700 mb-2">Email</label>
                                                        <InputText id="email" class="mt-1 block w-full rounded-lg border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm p-2" @bind-Value="@selectedContact.EmailAddress"></InputText>
                                                        <ValidationMessage For="@(() => selectedContact.EmailAddress)" />
                                                    </div>
                                                    <div>
                                                        <label for="phone" class="block text-sm font-medium text-gray-700 mb-2">Phone</label>
                                                        <InputText id="phone" class="mt-1 block w-full rounded-lg border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm p-2" @bind-Value="@selectedContact.MobilePhone"></InputText>
                                                        <ValidationMessage For="@(() => selectedContact.MobilePhone)" />
                                                    </div>
                                                </FluentStack>
                                            </div>

                                            <!-- Professional Information -->
                                            <div class="col-span-2">
                                                <h3 class="text-lg font-medium text-gray-900 mb-4">Professional Information</h3>
                                                <FluentStack Orientation="Orientation.Horizontal" HorizontalAlignment="@Horizontal" VerticalAlignment="@Vertical">
                                                    <div>
                                                        <label for="jobTitle" class="block text-sm font-medium text-gray-700 mb-2">Job Title</label>
                                                        <InputText id="jobTitle" class="mt-1 block w-full rounded-lg border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm p-2" @bind-Value="@selectedContact.JobTitle"></InputText>
                                                        <ValidationMessage For="@(() => selectedContact.JobTitle)" />
                                                    </div>
                                                    <div>
                                                        <label for="company" class="block text-sm font-medium text-gray-700 mb-2">Company</label>
                                                        <InputText id="company" class="mt-1 block w-full rounded-lg border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm p-2" @bind-Value="@selectedContact.CompanyName"></InputText>
                                                        <ValidationMessage For="@(() => selectedContact.CompanyName)" />
                                                    </div>
                                                </FluentStack>
                                            </div>

                                            <!-- Business Address -->
                                            <div class="col-span-2">
                                                <h3 class="text-lg font-medium text-gray-900 mb-4">Business Address</h3>
                                                <FluentStack Orientation="Orientation.Horizontal" HorizontalAlignment="@Horizontal" VerticalAlignment="@Vertical">
                                                    <div>
                                                        <label for="businessStreet" class="block text-sm font-medium text-gray-700 mb-2">Street</label>
                                                        <InputText id="businessStreet" class="mt-1 block w-full rounded-lg border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm p-2" @bind-Value="@selectedContact.BusinessAddress.Street"></InputText>
                                                    </div>
                                                    <div>
                                                        <label for="businessCity" class="block text-sm font-medium text-gray-700 mb-2">City</label>
                                                        <InputText id="businessCity" class="mt-1 block w-full rounded-lg border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm p-2" @bind-Value="@selectedContact.BusinessAddress.City"></InputText>
                                                    </div>
                                                </FluentStack>
                                                <FluentStack Orientation="Orientation.Horizontal" HorizontalAlignment="@Horizontal" VerticalAlignment="@Vertical">
                                                    <div>
                                                        <label for="businessState" class="block text-sm font-medium text-gray-700 mb-2">State</label>
                                                        <InputText id="businessState" class="mt-1 block w-full rounded-lg border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm p-2" @bind-Value="@selectedContact.BusinessAddress.State"></InputText>
                                                    </div>
                                                    <div>
                                                        <label for="businessPostalCode" class="block text-sm font-medium text-gray-700 mb-2">Postal Code</label>
                                                        <InputText id="businessPostalCode" class="mt-1 block w-full rounded-lg border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm p-2" @bind-Value="@selectedContact.BusinessAddress.PostalCode"></InputText>
                                                    </div>
                                                    <div>
                                                        <label for="businessCountry" class="block text-sm font-medium text-gray-700 mb-2">Country</label>
                                                        <InputText id="businessCountry" class="mt-1 block w-full rounded-lg border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm p-2" @bind-Value="@selectedContact.BusinessAddress.CountryOrRegion"></InputText>
                                                    </div>
                                                </FluentStack>
                                            </div>
                                        </div>
                                        <div class="flex gap-4 mt-10 justify-end items-center">
                                            <FluentIcon Value="@(new Icons.Regular.Size20.Sparkle())" Slot="start" />
                                            <SmartPasteButton IconStart="@(new Icons.Regular.Size20.DocumentSave())" />
                                        </div>    
                                    </form>
                                </EditForm>
                                <FluentDialogActions class="mt-6">
                                    <FluentButton Appearance="Appearance.Stealth" IconStart="@(new Icons.Regular.Size20.Dismiss())" OnClick="CloseContactDialog" class="text-gray-500 hover:text-gray-700">Cancel</FluentButton>
                                    <FluentButton Appearance="Appearance.Stealth" IconStart="@(new Icons.Regular.Size20.Save())" OnClick="SaveContactAsync" class="text-gray-500 hover:text-gray-700"
                                    Disabled="@(!IsAtLeastOneFieldFilled())">Save</FluentButton>
                                </FluentDialogActions>
                            </FluentCard>
                        </FluentDialog>
                    }
                </Content>
            </FluentTab>
            <!-- Additional Tabs can be added here -->
        </FluentTabs>
    </FluentCard>
}
else
{
    <p>User information could not be loaded.</p>
}

@code {

    public string Placeholder { get; set; } = "Enter command or text";
    public bool Autofocus { get; set; } = false;
    public int MinLength { get; set; } = 16;
    public int MaxLength { get; set; } = 1024;
    public int Rows { get; set; } = 1;

    private Profile user;
    private UserAccountInformation accountInfo;
    private List<GraphMessage> userMessages = new List<GraphMessage>();
    private CalendarEventsResult calendarEventsResult = new CalendarEventsResult();
    private List<EventViewModel> calendarEventsWithComputedProperties = new List<EventViewModel>();
    private List<EmailViewModel> emailsWithComputedProperties = new List<EmailViewModel>();
    private List<ContactViewModel> contactsWithComputedProperties = new List<ContactViewModel>();
    private ContactViewModel selectedContact;
    private ContactViewModel originalContact = new ContactViewModel(new Contact());
    private bool isContactDetailsDialogVisible = false;

    private bool isLoading = true;
    private string error;
    private string userPhotoBase64;
    private string activeTabId = "Emails-tab";
    private string response;
    private string formattedResponse;
    private int calculatedHeight;
    private bool showResponse = false;

    private string userQuery = string.Empty;

    // Changed from GraphMessage to EmailViewModel
    private EmailViewModel selectedEmail;
    // Changed from 'Event' to 'EventViewModel'
    private EventViewModel selectedEvent;
    private bool isInitialized = false;
    public bool Submitting { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (!isInitialized)
        {
            await LoadUserDataAsync();
            isInitialized = true;
        }
    }

    private async Task LoadUserDataAsync()
    {
        isLoading = true;
        error = null;

        try
        {
            user = await GraphService.GetCurrentUserProfileAsync();
            accountInfo = await GraphService.GetUserAccountInformationAsync();
            userMessages = await GraphService.GetRecentMessagesAsync(20);

            // Fetch calendar events
            calendarEventsResult = await GraphService.GetCalendarEventsAsync(20); // Get the next 10 events

            if (calendarEventsResult.Events != null && calendarEventsResult.Events.Any())
            {
                calendarEventsWithComputedProperties = calendarEventsResult.Events.Select(e => new EventViewModel(e)).ToList();
            }
            else
            {
                calendarEventsWithComputedProperties = new List<EventViewModel>();
            }

            // Create EmailViewModel list
            emailsWithComputedProperties = userMessages.Select(m => new EmailViewModel(m)).ToList();

            // Fetch the user's profile photo
            var photoStream = await GraphService.GetUserPhotoAsync();
            if (photoStream != null)
            {
                // Convert the photo stream to a Base64 string
                using (var memoryStream = new MemoryStream())
                {
                    await photoStream.CopyToAsync(memoryStream);
                    var photoBytes = memoryStream.ToArray();
                    userPhotoBase64 = Convert.ToBase64String(photoBytes);
                }
            }
            // Fetch contacts
            var contacts = await GraphService.GetUserContactsAsync(50);
            contactsWithComputedProperties = contacts.Select(c => new ContactViewModel(c)).ToList();

 
        }
        catch (AuthenticationRequiredException)
        {
            RedirectToLogin();
        }
        catch (Exception ex)
        {
            error = $"Error loading user data: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }

    private void RedirectToLogin()
    {
        var returnUrl = Uri.EscapeDataString(NavigationManager.Uri);
        NavigationManager.NavigateTo($"/MicrosoftIdentity/Account/SignIn?returnUrl={returnUrl}", forceLoad: true);
    }

    private string GetUserFullName()
    {
        // Try to get the user's full name from the Names list
        if (user?.Names != null && user.Names.Any())
        {
            var primaryName = user.Names.FirstOrDefault();
            if (primaryName != null)
            {
                string firstName = primaryName.First ?? "";
                string lastName = primaryName.Last ?? "";
                if (!string.IsNullOrWhiteSpace(firstName) || !string.IsNullOrWhiteSpace(lastName))
                {
                    return $"{firstName} {lastName}".Trim();
                }
                else if (!string.IsNullOrWhiteSpace(primaryName.DisplayName))
                {
                    return primaryName.DisplayName;
                }
            }
        }

        // As a fallback, return accountInfo?.UserPrincipalName or "User"
        return accountInfo?.UserPrincipalName ?? "User";
    }

    private string GetUserEmail()
    {
        // Try to get the user's primary email from the Emails list
        if (user?.Emails != null && user.Emails.Any())
        {
            var primaryEmail = user.Emails.FirstOrDefault();
            if (primaryEmail != null)
            {
                return primaryEmail.Address ?? accountInfo?.UserPrincipalName ?? "";
            }
        }
        // As a fallback, return accountInfo?.UserPrincipalName or an empty string
        return accountInfo?.UserPrincipalName ?? "";
    }

    private string ParseAndFormatDateTime(string? dateTimeString)
    {
        if (string.IsNullOrEmpty(dateTimeString))
            return "N/A";

        if (DateTime.TryParse(dateTimeString, out DateTime dateTime))
        {
            return dateTime.ToLocalTime().ToString("g");
        }

        return dateTimeString; // Return the original string if parsing fails
    }

    // Event handler for handling input changes (optional)
    private void HandleInput(ChangeEventArgs e)
    {
        // Optional: Handle input changes if needed
        // Currently, @bind-Value takes care of updating userQuery
    }

    // Event handler for button click
    private async Task OnButtonClicked()
    {
        if (string.IsNullOrWhiteSpace(userQuery))
        {
            response = "Please enter a valid query.";
            showResponse = false; // Ensure the card is hidden if the query is invalid
            return;
        }

        try
        {
            Submitting = true;
            error = null;

            // Call the Azure OpenAI handler with the user's query
            response = await azureOpenAIHandler.GetASAPTest(userQuery);
            formattedResponse = Markdown.ToHtml(response);
            showResponse = true; // Show the response card when a new response is received
        }
        catch (Exception ex)
        {
            error = $"Error processing your request: {ex.Message}";
            showResponse = false; // Hide the card in case of an error
        }
        finally
        {
            Submitting = false;
        }
    }

    protected override void OnParametersSet()
    {
        // Dynamically adjust height based on response length
        calculatedHeight = CalculateHeight(response);
    }

    private int CalculateHeight(string responseText)
    {
        const int minHeight = 200; // Minimum height for short responses
        const int maxHeight = 500; // Maximum height for long responses
        const int charLimitPerLine = 100; // Estimated characters that fit in one line
        const int pixelsPerLine = 20; // Height in pixels for one line of text

        // If responseText is null or empty, return the minimum height
        if (string.IsNullOrEmpty(responseText))
        {
            return minHeight;
        }

        // Calculate how many lines the response will take
        int lineCount = (responseText.Length / charLimitPerLine) + 1;

        // Calculate the height based on the line count
        int calculatedHeight = lineCount * pixelsPerLine + 50; // Extra space for padding and controls

        // Clamp the height between min and max
        return Math.Clamp(calculatedHeight, minHeight, maxHeight);
    }

    // Event handler to close the response card
    private void CloseResponse()
    {
        showResponse = false;
    }

    private void HandleOnTabChange(FluentTab tabId)
    {
        // Optional: Handle tab changes if needed
    }

    // Email Selection Handler
    private void OnSelectedEmailChanged(IEnumerable<EmailViewModel> selectedItems)
    {
        selectedEmail = selectedItems.FirstOrDefault();
    }

    private void CloseEmailDialog()
    {
        selectedEmail = null;
    }

    private string GetPlainText(EmailViewModel email)
    {
        // Implement your logic to extract plain text from the email body
        // For simplicity, we'll return the content as-is
        return email.BodyContent ?? "";
    }

    // Event Selection Handler
    private void OnSelectedEventChanged(IEnumerable<EventViewModel> selectedItems)
    {
        // Changed to assign EventViewModel instead of Event
        selectedEvent = selectedItems.FirstOrDefault();
    }

    private void CloseEventDetailsDialog()
    {
        selectedEvent = null;
    }

    // Changed parameter type from 'GraphMessage' to 'EmailViewModel'
    private void OpenEmailDialog(EmailViewModel emailViewModel)
    {
        selectedEmail = emailViewModel;
    }

    // Changed parameter type from 'Event' to 'EventViewModel'
    private void OpenEventDialog(EventViewModel evtViewModel)
    {
        selectedEvent = evtViewModel;
    }
// Open and Close methods for Contact Dialog
    private void OpenContactDialog(ContactViewModel contactViewModel)
    {
        selectedContact = contactViewModel;
        isContactDetailsDialogVisible = true;
    }
    private void CloseContactDialog()
    {
        isContactDetailsDialogVisible = false;
        selectedContact = null;
    }

@code {
    private bool IsAtLeastOneFieldFilled()
    {
        return !string.IsNullOrWhiteSpace(selectedContact.GivenName) ||
            !string.IsNullOrWhiteSpace(selectedContact.Surname) ||
            !string.IsNullOrWhiteSpace(selectedContact.EmailAddress) ||
            !string.IsNullOrWhiteSpace(selectedContact.MobilePhone) ||
            !string.IsNullOrWhiteSpace(selectedContact.JobTitle) ||
            !string.IsNullOrWhiteSpace(selectedContact.CompanyName) ||
            (selectedContact.BusinessAddress != null &&
            (!string.IsNullOrWhiteSpace(selectedContact.BusinessAddress.Street) ||
                !string.IsNullOrWhiteSpace(selectedContact.BusinessAddress.City) ||
                !string.IsNullOrWhiteSpace(selectedContact.BusinessAddress.State) ||
                !string.IsNullOrWhiteSpace(selectedContact.BusinessAddress.PostalCode) ||
                !string.IsNullOrWhiteSpace(selectedContact.BusinessAddress.CountryOrRegion)));
    }
    public class ContactViewModel
{
    public string Id { get; set; }
    public Contact OriginalContact { get; set; }
    public string DisplayName { get; set; }
    public string GivenName { get; set; }
    public string Surname { get; set; }
    public string EmailAddress { get; set; }
    public string EmailAddressesFormatted { get; set; }
    public string MobilePhone { get; set; }
    public string BusinessPhonesFormatted { get; set; }
    public string HomePhonesFormatted { get; set; }
    public string CompanyName { get; set; }
    public string JobTitle { get; set; }
    public string OfficeLocation { get; set; }
    public string ImAddressesFormatted { get; set; }
    public string BirthdayFormatted { get; set; }
    public string NickName { get; set; }
    public string MiddleName { get; set; }
    public string PersonalNotes { get; set; }
    public string SpouseName { get; set; }
    public string Department { get; set; }
    public string Manager { get; set; }
    public string AssistantName { get; set; }
    public string YomiGivenName { get; set; }
    public string YomiSurname { get; set; }
    public string YomiCompanyName { get; set; }
    public PhysicalAddress BusinessAddress { get; set; }
    public string BusinessAddressFormatted { get; set; }
    public string HomeAddressFormatted { get; set; }
    public string OtherAddressFormatted { get; set; }
    public string Profession { get; set; }
    public string Title { get; set; }
    public string ChildrenFormatted { get; set; }
    public string Gender { get; set; }

    public ContactViewModel(Contact contact = null)
    {
        OriginalContact = contact ?? new Contact();
        Id = contact?.Id ?? "";
        DisplayName = contact?.DisplayName ?? "New Contact";
        GivenName = contact?.GivenName ?? "";
        Surname = contact?.Surname ?? "";
        EmailAddressesFormatted = contact?.EmailAddresses != null && contact.EmailAddresses.Any()
            ? string.Join(", ", contact.EmailAddresses.Select(e => e.Address))
            : "";
        EmailAddress = contact?.EmailAddresses != null && contact.EmailAddresses.Any()
                    ? contact.EmailAddresses.First().Address
                    : "";
        if (contact?.Phones != null && contact.Phones.Any())
        {
            MobilePhone = contact.Phones
                .FirstOrDefault(phone => phone.Type == PhoneType.Mobile)?.Number ?? "";
            BusinessPhonesFormatted = string.Join(", ", contact.Phones
                .Where(phone => phone.Type == PhoneType.Business)
                .Select(phone => phone.Number));
            HomePhonesFormatted = string.Join(", ", contact.Phones
                .Where(phone => phone.Type == PhoneType.Home)
                .Select(phone => phone.Number));
        }
        else
        {
            MobilePhone = "";
            BusinessPhonesFormatted = "";
            HomePhonesFormatted = "";
        }

        CompanyName = contact?.CompanyName ?? "";
        JobTitle = contact?.JobTitle ?? "";
        OfficeLocation = contact?.OfficeLocation ?? "";
        ImAddressesFormatted = contact?.ImAddresses != null && contact.ImAddresses.Any()
            ? string.Join(", ", contact.ImAddresses)
            : "";
        BirthdayFormatted = contact?.Birthday.HasValue == true
            ? contact.Birthday.Value.ToLocalTime().ToString("d")
            : "";
        NickName = contact?.NickName ?? "";
        MiddleName = contact?.MiddleName ?? "";
        PersonalNotes = contact?.PersonalNotes ?? "";
        SpouseName = contact?.SpouseName ?? "";
        Department = contact?.Department ?? "";
        Manager = contact?.Manager ?? "";
        AssistantName = contact?.AssistantName ?? "";
        YomiGivenName = contact?.YomiGivenName ?? "";
        YomiSurname = contact?.YomiSurname ?? "";
        YomiCompanyName = contact?.YomiCompanyName ?? "";

        if (contact?.PostalAddresses != null && contact.PostalAddresses.Any())
        {
            BusinessAddress = contact.PostalAddresses
                .FirstOrDefault(addr => addr.Type == PhysicalAddressType.Business);
            BusinessAddressFormatted = GetAddressFormatted(BusinessAddress);
            HomeAddressFormatted = GetAddressFormatted(contact.PostalAddresses
                .FirstOrDefault(addr => addr.Type == PhysicalAddressType.Home));
            OtherAddressFormatted = GetAddressFormatted(contact.PostalAddresses
                .FirstOrDefault(addr => addr.Type == PhysicalAddressType.Other));
        }
        else
        {
            BusinessAddress = new PhysicalAddress();
            BusinessAddressFormatted = "";
            HomeAddressFormatted = "";
            OtherAddressFormatted = "";
        }

        Profession = contact?.Profession ?? "";
        Title = contact?.Title ?? "";
        ChildrenFormatted = contact?.Children != null && contact.Children.Any()
            ? string.Join(", ", contact.Children)
            : "";
        Gender = contact?.Gender ?? "";
    }
    private string GetAddressFormatted(PhysicalAddress address)
    {
        if (address == null) return "N/A";

        var components = new List<string>
        {
            address.Street, address.City, address.State, address.PostalCode, address.CountryOrRegion
        }.Where(c => !string.IsNullOrWhiteSpace(c));

        return components.Any() ? string.Join(", ", components) : "N/A";
    }
}

private async Task SaveContactAsync()
{
    try
    {
        Contact contactToSave;
        if (string.IsNullOrEmpty(selectedContact.Id))
        {
            // This is a new contact
            contactToSave = new Contact
            {
                GivenName = selectedContact.GivenName,
                Surname = selectedContact.Surname,
                JobTitle = selectedContact.JobTitle,
                CompanyName = selectedContact.CompanyName,
                EmailAddresses = new List<TypedEmailAddress>
                {
                    new TypedEmailAddress
                    {
                        Address = selectedContact.EmailAddress,
                        Type = EmailType.Other // You can change this to the appropriate type if needed
                    }
                },
                Phones = new List<Phone>
                {
                    new Phone
                    {
                        Number = selectedContact.MobilePhone,
                        Type = PhoneType.Mobile
                    }
                },
                PostalAddresses = new List<PhysicalAddress>
                {
                    new PhysicalAddress
                    {
                        Street = selectedContact.BusinessAddress?.Street,
                        City = selectedContact.BusinessAddress?.City,
                        State = selectedContact.BusinessAddress?.State,
                        PostalCode = selectedContact.BusinessAddress?.PostalCode,
                        CountryOrRegion = selectedContact.BusinessAddress?.CountryOrRegion,
                        Type = PhysicalAddressType.Business
                    }
                }
            };

            var newContact = await GraphService.AddContactAsync(contactToSave);
            contactsWithComputedProperties.Add(new ContactViewModel(newContact));
        }
        else
        {
            // This is an existing contact
            contactToSave = new Contact
            {
                Id = selectedContact.Id,
                GivenName = selectedContact.GivenName,
                Surname = selectedContact.Surname,
                JobTitle = selectedContact.JobTitle,
                CompanyName = selectedContact.CompanyName,
                Phones = new List<Phone>
                {
                    new Phone
                    {
                        Number = selectedContact.MobilePhone,
                        Type = PhoneType.Mobile
                    }
                },
                PostalAddresses = new List<PhysicalAddress>
                {
                    new PhysicalAddress
                    {
                        Street = selectedContact.BusinessAddress?.Street,
                        City = selectedContact.BusinessAddress?.City,
                        State = selectedContact.BusinessAddress?.State,
                        PostalCode = selectedContact.BusinessAddress?.PostalCode,
                        CountryOrRegion = selectedContact.BusinessAddress?.CountryOrRegion,
                        Type = PhysicalAddressType.Business
                    }
                }
            };

            var updatedContact = await GraphService.UpdateContactAsync(selectedContact.Id, contactToSave);
            var index = contactsWithComputedProperties.FindIndex(c => c.Id == updatedContact.Id);
            if (index != -1)
            {
                contactsWithComputedProperties[index] = new ContactViewModel(updatedContact);
            }
        }

        CloseContactDialog();
        StateHasChanged();
    }
    catch (Exception ex)
    {
        Console.WriteLine($"Error saving contact: {ex.Message}");
    }
}
private string GetAddressFormatted(AITGraph.Sdk.Models.PhysicalAddress address)
        {
            if (address == null) return "N/A";

            var components = new List<string>
            {
                address.Street, address.City, address.State, address.PostalCode, address.CountryOrRegion
            }.Where(c => !string.IsNullOrWhiteSpace(c));

            return components.Any() ? string.Join(", ", components) : "N/A";
        }
    }

private void OpenNewContactDialog()
{
    selectedContact = new ContactViewModel(new Contact());
    isContactDetailsDialogVisible = true;
    StateHasChanged(); // Ensure the UI updates
}

private bool isDeleting = false;


private async Task DeleteContactAsync(string contactId)
{
    try
    {
        var confirmed = await JS.InvokeAsync<bool>("confirm", "Are you sure you want to delete this contact?");
        if (!confirmed)
        {
            return;
        }

        isDeleting = true;
        StateHasChanged();

        await GraphService.DeleteContactAsync(contactId);
        contactsWithComputedProperties.RemoveAll(c => c.Id == contactId);
    }
    catch (Exception ex)
    {
        Console.WriteLine($"Error deleting contact: {ex.Message}");
        await JS.InvokeVoidAsync("alert", $"Error deleting contact: {ex.Message}");
    }
    finally
    {
        isDeleting = false;
        StateHasChanged();
    }
}
public class EmailViewModel
    { 
        public GraphMessage OriginalMessage { get; set; }
        public string SenderName { get; set; }
        public string Subject { get; set; }
        public string ReceivedDateTimeFormatted { get; set; }

        // Added properties for Body Content and Content Type
        public string BodyContent { get; set; }
        public BodyType BodyContentType { get; set; }

        // Exposed properties from OriginalMessage
        public Recipient From => OriginalMessage.From;
        public List<Recipient> ToRecipients => OriginalMessage.ToRecipients;
        public DateTimeOffset? ReceivedDateTime => OriginalMessage.ReceivedDateTime;

        public EmailViewModel(GraphMessage message)
        {
            OriginalMessage = message;
            SenderName = message.From?.EmailAddress?.Name ?? "Unknown";
            Subject = message.Subject ?? "No Subject";
            ReceivedDateTimeFormatted = message.ReceivedDateTime.HasValue
                ? message.ReceivedDateTime.Value.ToLocalTime().ToString("g")
                : "N/A";

            // Initialize BodyContent and BodyContentType
            BodyContent = message.Body?.Content ?? "";
            BodyContentType = message.Body?.ContentType ?? BodyType.Text;
        }
    }

    // ViewModel for Events
    public class EventViewModel
    {
        public Event OriginalEvent { get; set; }
        public string Subject { get; set; }
        public string StartDateTimeFormatted { get; set; }
        public string EndDateTimeFormatted { get; set; }
        public string Location { get; set; }

        // Parsed DateTimeOffset properties
        public DateTimeOffset? StartDateTime { get; set; }
        public DateTimeOffset? EndDateTime { get; set; }

        public EventViewModel(Event evt)
        {
            OriginalEvent = evt;
            Subject = evt.Subject ?? "No Subject";

            // Attempt to parse Start.DateTime
            if (DateTimeOffset.TryParse(evt.Start?.DateTime, out var startDt))
            {
                StartDateTime = startDt;
                StartDateTimeFormatted = startDt.ToLocalTime().ToString("g");
            }
            else
            {
                StartDateTime = null;
                StartDateTimeFormatted = "N/A";
            }

            // Attempt to parse End.DateTime
            if (DateTimeOffset.TryParse(evt.End?.DateTime, out var endDt))
            {
                EndDateTime = endDt;
                EndDateTimeFormatted = endDt.ToLocalTime().ToString("g");
            }
            else
            {
                EndDateTime = null;
                EndDateTimeFormatted = "N/A";
            }

            // Add location information
            Location = evt.Location?.DisplayName ?? "No location";

            // You can initialize other properties here as needed
        }
    }
    HorizontalAlignment Horizontal;
    VerticalAlignment Vertical;
    

}