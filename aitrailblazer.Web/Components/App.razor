<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <base href="/" />
    <!--
    <link rel="stylesheet" href="bootstrap/bootstrap.min.css" />

    <link rel="stylesheet" href="app.css" />
     -->
    <link rel="stylesheet" href="css/feature.css" />
    <link rel="stylesheet" href="app-fluent.css" />
    <link rel="stylesheet" href="aitrailblazer.Web.styles.css" />
    <link rel="icon" type="image/png" href="favicon.png" />
    <!-- Prism.js Styles -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/themes/prism-coy.min.css">
    <HeadOutlet />

    <!-- Include the Timezone JavaScript -->
    <script src="js/timezone.js"></script>
</head>

<body>
    <Routes />
    <!-- Prism.js Syntax Highlighter -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/prism.min.js" defer></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/components/prism-json.min.js" defer></script>
    <script>
        // Highlight code dynamically after rendering new content
        function highlightSyntax() {
            Prism.highlightAll();
        }

        // Make highlightSyntax available globally for Blazor interop
        window.highlightSyntax = highlightSyntax;

        // Initial highlighting when the DOM is loaded
        document.addEventListener('DOMContentLoaded', highlightSyntax);

        // For Blazor, you might also want to highlight on dynamic updates:
        document.addEventListener('BlazorRenderCompleted', highlightSyntax);
    </script>
    <script src="_framework/blazor.web.js"></script>
    <script>
        function copyToClipboard(text) {
            navigator.clipboard.writeText(text).then(function () {
                console.log('Text copied to clipboard');
            }).catch(function (err) {
                console.error('Failed to copy: ', err);
            });
        }
        document.addEventListener("input", function (event) {
            if (event.target.tagName.toLowerCase() === "textarea") {
                autoResizeTextarea(event.target);
            }
        });

        function autoResizeTextarea(textarea) {
            textarea.style.height = "auto"; // Reset the height to auto
            textarea.style.height = (textarea.scrollHeight) + "px"; // Set the height to match the scroll height
        }

    </script>
    <script>
        function scrollToBottom(containerId) {
            const container = document.getElementById(containerId);
            if (container) {
                container.scrollTop = container.scrollHeight;
            }
        }
    </script>
    <script>
        function adjustTextAreaHeight(textAreaId) {
            console.log("Function called for:", textAreaId);
            var textArea = document.getElementById(textAreaId);
            if (textArea) {
                console.log("Textarea found:", textArea);
                textArea.style.height = 'auto';
                textArea.style.height = (textArea.scrollHeight + 2) + 'px';
                console.log("New height set:", textArea.style.height);
            } else {
                console.log("Textarea not found");
            }
        }

    </script>
    <script>
        function initializeAnchorNavigation(containerId) {
            const container = document.getElementById(containerId);
            if (container) {
                container.querySelectorAll('a[href^="#"]').forEach(anchor => {
                    anchor.addEventListener('click', function (e) {
                        e.preventDefault();
                        const targetId = this.getAttribute('href').substring(1);
                        const targetElement = document.getElementById(targetId);
                        if (targetElement) {
                            targetElement.scrollIntoView({ behavior: 'smooth' });
                            history.pushState(null, null, '#' + targetId);
                        }
                    });
                });
            }
        }
    </script>
    <script>
        window.setImageFromBase64 = function (imgId, base64) {
            var img = document.getElementById(imgId);
            img.src = 'data:image/png;base64,' + base64;
        }
    </script>
</body>

</html>
