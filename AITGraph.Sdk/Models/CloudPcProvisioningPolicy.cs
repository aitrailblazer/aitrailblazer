// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace AITGraph.Sdk.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class CloudPcProvisioningPolicy : global::AITGraph.Sdk.Models.Entity, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>The URL of the alternate resource that links to this provisioning policy. Read-only.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? AlternateResourceUrl { get; set; }
#nullable restore
#else
        public string AlternateResourceUrl { get; set; }
#endif
        /// <summary>A defined collection of provisioning policy assignments. Represents the set of Microsoft 365 groups and security groups in Azure AD that have provisioning policy assigned. Returned only on $expand. For an example about how to get the assignments relationship, see Get cloudPcProvisioningPolicy.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::AITGraph.Sdk.Models.CloudPcProvisioningPolicyAssignment>? Assignments { get; set; }
#nullable restore
#else
        public List<global::AITGraph.Sdk.Models.CloudPcProvisioningPolicyAssignment> Assignments { get; set; }
#endif
        /// <summary>The display name of the Cloud PC group that the Cloud PCs reside in. Read-only.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CloudPcGroupDisplayName { get; set; }
#nullable restore
#else
        public string CloudPcGroupDisplayName { get; set; }
#endif
        /// <summary>The provisioning policy description.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Description { get; set; }
#nullable restore
#else
        public string Description { get; set; }
#endif
        /// <summary>The display name for the provisioning policy.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? DisplayName { get; set; }
#nullable restore
#else
        public string DisplayName { get; set; }
#endif
        /// <summary>Specifies how Cloud PCs will join Azure Active Directory.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::AITGraph.Sdk.Models.CloudPcDomainJoinConfiguration? DomainJoinConfiguration { get; set; }
#nullable restore
#else
        public global::AITGraph.Sdk.Models.CloudPcDomainJoinConfiguration DomainJoinConfiguration { get; set; }
#endif
        /// <summary>The domainJoinConfigurations property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::AITGraph.Sdk.Models.CloudPcDomainJoinConfiguration>? DomainJoinConfigurations { get; set; }
#nullable restore
#else
        public List<global::AITGraph.Sdk.Models.CloudPcDomainJoinConfiguration> DomainJoinConfigurations { get; set; }
#endif
        /// <summary>True if the provisioned Cloud PC can be accessed by single sign-on. False indicates that the provisioned Cloud PC doesn&apos;t support this feature. Default value is false. Windows 365 users can use single sign-on to authenticate to Azure Active Directory (Azure AD) with passwordless options (for example, FIDO keys) to access their Cloud PC. Optional.</summary>
        public bool? EnableSingleSignOn { get; set; }
        /// <summary>The number of hours to wait before reprovisioning/deprovisioning happens. Read-only.</summary>
        public int? GracePeriodInHours { get; set; }
        /// <summary>The display name for the OS image you’re provisioning.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ImageDisplayName { get; set; }
#nullable restore
#else
        public string ImageDisplayName { get; set; }
#endif
        /// <summary>The ID of the OS image you want to provision on Cloud PCs. The format for a gallery type image is: {publisher_offer_sku}. Supported values for each of the parameters are as follows:publisher: Microsoftwindowsdesktop. offer: windows-ent-cpc. sku: 21h1-ent-cpc-m365, 21h1-ent-cpc-os, 20h2-ent-cpc-m365, 20h2-ent-cpc-os, 20h1-ent-cpc-m365, 20h1-ent-cpc-os, 19h2-ent-cpc-m365 and 19h2-ent-cpc-os.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ImageId { get; set; }
#nullable restore
#else
        public string ImageId { get; set; }
#endif
        /// <summary>The imageType property</summary>
        public global::AITGraph.Sdk.Models.CloudPcProvisioningPolicyImageType? ImageType { get; set; }
        /// <summary>Indicates whether the local admin option is enabled. If the local admin option is enabled, the end user can be an admin of the Cloud PC device. Read-only.</summary>
        public bool? LocalAdminEnabled { get; set; }
        /// <summary>The managedBy property</summary>
        public global::AITGraph.Sdk.Models.CloudPcManagementService? ManagedBy { get; set; }
        /// <summary>The specific settings for the Microsoft Managed Desktop, which enables customers to get a managed device experience for the Cloud PC. Before you can enable Microsoft Managed Desktop, an admin must configure it.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::AITGraph.Sdk.Models.MicrosoftManagedDesktop? MicrosoftManagedDesktop { get; set; }
#nullable restore
#else
        public global::AITGraph.Sdk.Models.MicrosoftManagedDesktop MicrosoftManagedDesktop { get; set; }
#endif
        /// <summary>The ID of the cloudPcOnPremisesConnection. To ensure that Cloud PCs have network connectivity and that they domain join, choose a connection with a virtual network that’s validated by the Cloud PC service.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? OnPremisesConnectionId { get; set; }
#nullable restore
#else
        public string OnPremisesConnectionId { get; set; }
#endif
        /// <summary>Specifies the type of license used when provisioning Cloud PCs using this policy. By default, the license type is dedicated if the provisioningType isn&apos;t specified when you create the cloudPcProvisioningPolicy. You can&apos;t change this property after the cloudPcProvisioningPolicy was created. Possible values are: dedicated, shared, unknownFutureValue.</summary>
        public global::AITGraph.Sdk.Models.CloudPcProvisioningType? ProvisioningType { get; set; }
        /// <summary>Specific Windows settings to configure while creating Cloud PCs for this provisioning policy.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::AITGraph.Sdk.Models.CloudPcWindowsSettings? WindowsSettings { get; set; }
#nullable restore
#else
        public global::AITGraph.Sdk.Models.CloudPcWindowsSettings WindowsSettings { get; set; }
#endif
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::AITGraph.Sdk.Models.CloudPcProvisioningPolicy"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static new global::AITGraph.Sdk.Models.CloudPcProvisioningPolicy CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::AITGraph.Sdk.Models.CloudPcProvisioningPolicy();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public override IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>(base.GetFieldDeserializers())
            {
                { "alternateResourceUrl", n => { AlternateResourceUrl = n.GetStringValue(); } },
                { "assignments", n => { Assignments = n.GetCollectionOfObjectValues<global::AITGraph.Sdk.Models.CloudPcProvisioningPolicyAssignment>(global::AITGraph.Sdk.Models.CloudPcProvisioningPolicyAssignment.CreateFromDiscriminatorValue)?.AsList(); } },
                { "cloudPcGroupDisplayName", n => { CloudPcGroupDisplayName = n.GetStringValue(); } },
                { "description", n => { Description = n.GetStringValue(); } },
                { "displayName", n => { DisplayName = n.GetStringValue(); } },
                { "domainJoinConfiguration", n => { DomainJoinConfiguration = n.GetObjectValue<global::AITGraph.Sdk.Models.CloudPcDomainJoinConfiguration>(global::AITGraph.Sdk.Models.CloudPcDomainJoinConfiguration.CreateFromDiscriminatorValue); } },
                { "domainJoinConfigurations", n => { DomainJoinConfigurations = n.GetCollectionOfObjectValues<global::AITGraph.Sdk.Models.CloudPcDomainJoinConfiguration>(global::AITGraph.Sdk.Models.CloudPcDomainJoinConfiguration.CreateFromDiscriminatorValue)?.AsList(); } },
                { "enableSingleSignOn", n => { EnableSingleSignOn = n.GetBoolValue(); } },
                { "gracePeriodInHours", n => { GracePeriodInHours = n.GetIntValue(); } },
                { "imageDisplayName", n => { ImageDisplayName = n.GetStringValue(); } },
                { "imageId", n => { ImageId = n.GetStringValue(); } },
                { "imageType", n => { ImageType = n.GetEnumValue<global::AITGraph.Sdk.Models.CloudPcProvisioningPolicyImageType>(); } },
                { "localAdminEnabled", n => { LocalAdminEnabled = n.GetBoolValue(); } },
                { "managedBy", n => { ManagedBy = n.GetEnumValue<global::AITGraph.Sdk.Models.CloudPcManagementService>(); } },
                { "microsoftManagedDesktop", n => { MicrosoftManagedDesktop = n.GetObjectValue<global::AITGraph.Sdk.Models.MicrosoftManagedDesktop>(global::AITGraph.Sdk.Models.MicrosoftManagedDesktop.CreateFromDiscriminatorValue); } },
                { "onPremisesConnectionId", n => { OnPremisesConnectionId = n.GetStringValue(); } },
                { "provisioningType", n => { ProvisioningType = n.GetEnumValue<global::AITGraph.Sdk.Models.CloudPcProvisioningType>(); } },
                { "windowsSettings", n => { WindowsSettings = n.GetObjectValue<global::AITGraph.Sdk.Models.CloudPcWindowsSettings>(global::AITGraph.Sdk.Models.CloudPcWindowsSettings.CreateFromDiscriminatorValue); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public override void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            base.Serialize(writer);
            writer.WriteStringValue("alternateResourceUrl", AlternateResourceUrl);
            writer.WriteCollectionOfObjectValues<global::AITGraph.Sdk.Models.CloudPcProvisioningPolicyAssignment>("assignments", Assignments);
            writer.WriteStringValue("cloudPcGroupDisplayName", CloudPcGroupDisplayName);
            writer.WriteStringValue("description", Description);
            writer.WriteStringValue("displayName", DisplayName);
            writer.WriteObjectValue<global::AITGraph.Sdk.Models.CloudPcDomainJoinConfiguration>("domainJoinConfiguration", DomainJoinConfiguration);
            writer.WriteCollectionOfObjectValues<global::AITGraph.Sdk.Models.CloudPcDomainJoinConfiguration>("domainJoinConfigurations", DomainJoinConfigurations);
            writer.WriteBoolValue("enableSingleSignOn", EnableSingleSignOn);
            writer.WriteIntValue("gracePeriodInHours", GracePeriodInHours);
            writer.WriteStringValue("imageDisplayName", ImageDisplayName);
            writer.WriteStringValue("imageId", ImageId);
            writer.WriteEnumValue<global::AITGraph.Sdk.Models.CloudPcProvisioningPolicyImageType>("imageType", ImageType);
            writer.WriteBoolValue("localAdminEnabled", LocalAdminEnabled);
            writer.WriteEnumValue<global::AITGraph.Sdk.Models.CloudPcManagementService>("managedBy", ManagedBy);
            writer.WriteObjectValue<global::AITGraph.Sdk.Models.MicrosoftManagedDesktop>("microsoftManagedDesktop", MicrosoftManagedDesktop);
            writer.WriteStringValue("onPremisesConnectionId", OnPremisesConnectionId);
            writer.WriteEnumValue<global::AITGraph.Sdk.Models.CloudPcProvisioningType>("provisioningType", ProvisioningType);
            writer.WriteObjectValue<global::AITGraph.Sdk.Models.CloudPcWindowsSettings>("windowsSettings", WindowsSettings);
        }
    }
}
#pragma warning restore CS0618
