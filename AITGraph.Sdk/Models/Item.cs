// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace AITGraph.Sdk.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class Item : global::AITGraph.Sdk.Models.Entity, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>The baseUnitOfMeasureId property</summary>
        public Guid? BaseUnitOfMeasureId { get; set; }
        /// <summary>The blocked property</summary>
        public bool? Blocked { get; set; }
        /// <summary>The displayName property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? DisplayName { get; set; }
#nullable restore
#else
        public string DisplayName { get; set; }
#endif
        /// <summary>The gtin property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Gtin { get; set; }
#nullable restore
#else
        public string Gtin { get; set; }
#endif
        /// <summary>The inventory property</summary>
        public decimal? Inventory { get; set; }
        /// <summary>The itemCategory property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::AITGraph.Sdk.Models.ItemCategory? ItemCategory { get; set; }
#nullable restore
#else
        public global::AITGraph.Sdk.Models.ItemCategory ItemCategory { get; set; }
#endif
        /// <summary>The itemCategoryCode property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ItemCategoryCode { get; set; }
#nullable restore
#else
        public string ItemCategoryCode { get; set; }
#endif
        /// <summary>The itemCategoryId property</summary>
        public Guid? ItemCategoryId { get; set; }
        /// <summary>The lastModifiedDateTime property</summary>
        public DateTimeOffset? LastModifiedDateTime { get; set; }
        /// <summary>The number property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Number { get; set; }
#nullable restore
#else
        public string Number { get; set; }
#endif
        /// <summary>The picture property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::AITGraph.Sdk.Models.Picture>? Picture { get; set; }
#nullable restore
#else
        public List<global::AITGraph.Sdk.Models.Picture> Picture { get; set; }
#endif
        /// <summary>The priceIncludesTax property</summary>
        public bool? PriceIncludesTax { get; set; }
        /// <summary>The taxGroupCode property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? TaxGroupCode { get; set; }
#nullable restore
#else
        public string TaxGroupCode { get; set; }
#endif
        /// <summary>The taxGroupId property</summary>
        public Guid? TaxGroupId { get; set; }
        /// <summary>The type property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Type { get; set; }
#nullable restore
#else
        public string Type { get; set; }
#endif
        /// <summary>The unitCost property</summary>
        public decimal? UnitCost { get; set; }
        /// <summary>The unitPrice property</summary>
        public decimal? UnitPrice { get; set; }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::AITGraph.Sdk.Models.Item"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static new global::AITGraph.Sdk.Models.Item CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::AITGraph.Sdk.Models.Item();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public override IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>(base.GetFieldDeserializers())
            {
                { "baseUnitOfMeasureId", n => { BaseUnitOfMeasureId = n.GetGuidValue(); } },
                { "blocked", n => { Blocked = n.GetBoolValue(); } },
                { "displayName", n => { DisplayName = n.GetStringValue(); } },
                { "gtin", n => { Gtin = n.GetStringValue(); } },
                { "inventory", n => { Inventory = n.GetDecimalValue(); } },
                { "itemCategory", n => { ItemCategory = n.GetObjectValue<global::AITGraph.Sdk.Models.ItemCategory>(global::AITGraph.Sdk.Models.ItemCategory.CreateFromDiscriminatorValue); } },
                { "itemCategoryCode", n => { ItemCategoryCode = n.GetStringValue(); } },
                { "itemCategoryId", n => { ItemCategoryId = n.GetGuidValue(); } },
                { "lastModifiedDateTime", n => { LastModifiedDateTime = n.GetDateTimeOffsetValue(); } },
                { "number", n => { Number = n.GetStringValue(); } },
                { "picture", n => { Picture = n.GetCollectionOfObjectValues<global::AITGraph.Sdk.Models.Picture>(global::AITGraph.Sdk.Models.Picture.CreateFromDiscriminatorValue)?.AsList(); } },
                { "priceIncludesTax", n => { PriceIncludesTax = n.GetBoolValue(); } },
                { "taxGroupCode", n => { TaxGroupCode = n.GetStringValue(); } },
                { "taxGroupId", n => { TaxGroupId = n.GetGuidValue(); } },
                { "type", n => { Type = n.GetStringValue(); } },
                { "unitCost", n => { UnitCost = n.GetDecimalValue(); } },
                { "unitPrice", n => { UnitPrice = n.GetDecimalValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public override void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            base.Serialize(writer);
            writer.WriteGuidValue("baseUnitOfMeasureId", BaseUnitOfMeasureId);
            writer.WriteBoolValue("blocked", Blocked);
            writer.WriteStringValue("displayName", DisplayName);
            writer.WriteStringValue("gtin", Gtin);
            writer.WriteDecimalValue("inventory", Inventory);
            writer.WriteObjectValue<global::AITGraph.Sdk.Models.ItemCategory>("itemCategory", ItemCategory);
            writer.WriteStringValue("itemCategoryCode", ItemCategoryCode);
            writer.WriteGuidValue("itemCategoryId", ItemCategoryId);
            writer.WriteDateTimeOffsetValue("lastModifiedDateTime", LastModifiedDateTime);
            writer.WriteStringValue("number", Number);
            writer.WriteCollectionOfObjectValues<global::AITGraph.Sdk.Models.Picture>("picture", Picture);
            writer.WriteBoolValue("priceIncludesTax", PriceIncludesTax);
            writer.WriteStringValue("taxGroupCode", TaxGroupCode);
            writer.WriteGuidValue("taxGroupId", TaxGroupId);
            writer.WriteStringValue("type", Type);
            writer.WriteDecimalValue("unitCost", UnitCost);
            writer.WriteDecimalValue("unitPrice", UnitPrice);
        }
    }
}
#pragma warning restore CS0618
