using Microsoft.AspNetCore.Authentication.OpenIdConnect;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Hosting;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc.Authorization;
using Microsoft.Identity.Web;
using Microsoft.Identity.Web.UI;
using Microsoft.AspNetCore.Components.Authorization;
using Microsoft.AspNetCore.Authentication.Cookies;
using Microsoft.Kiota.Abstractions;
using Microsoft.Kiota.Authentication.Azure;
using Microsoft.Kiota.Serialization.Json;
using Microsoft.Kiota.Serialization.Form;
using Microsoft.Kiota.Serialization.Multipart;
using Microsoft.Kiota.Serialization.Text;
using Newtonsoft.Json;
using AITGraph.Sdk; 
using AITrailBlazer.Web.Services; 

var builder = WebApplication.CreateBuilder(args);

// Add services to the container.
// 1. Retrieve required permissions from appsettings
var graphScopes = builder.Configuration.GetSection("DownstreamApi:Scopes").Get<string[]>();

// 2. Add support for OpenId authentication
builder.Services.AddAuthentication(options =>
{
    options.DefaultScheme = CookieAuthenticationDefaults.AuthenticationScheme;
    options.DefaultChallengeScheme = OpenIdConnectDefaults.AuthenticationScheme;
})
.AddMicrosoftIdentityWebApp(microsoftIdentityOptions =>
{
    builder.Configuration.Bind("AzureAd", microsoftIdentityOptions);
    microsoftIdentityOptions.Events = new OpenIdConnectEvents
    {
        OnRedirectToIdentityProvider = context =>
        {
            var logger = context.HttpContext.RequestServices.GetRequiredService<ILogger<Program>>();
            logger.LogInformation("Redirecting to identity provider. Current path: {Path}", context.HttpContext.Request.Path);

            if (context.HttpContext.Request.Path.StartsWithSegments("/profile"))
            {
                context.ProtocolMessage.RedirectUri = $"{context.Request.Scheme}://{context.Request.Host}/profile";
                logger.LogInformation("Setting custom redirect URI: {Uri}", context.ProtocolMessage.RedirectUri);
            }

            return Task.CompletedTask;
        },
        OnAuthorizationCodeReceived = context =>
        {
            var logger = context.HttpContext.RequestServices.GetRequiredService<ILogger<Program>>();
            logger.LogInformation("Authorization code received");
            return Task.CompletedTask;
        },
        OnTokenValidated = context =>
        {
            var logger = context.HttpContext.RequestServices.GetRequiredService<ILogger<Program>>();
            logger.LogInformation("Token validated");
            return Task.CompletedTask;
        },
        OnRemoteFailure = context =>
        {
            var logger = context.HttpContext.RequestServices.GetRequiredService<ILogger<Program>>();
            logger.LogError("Remote authentication failed: {Error}", context.Failure?.Message);
            context.Response.Redirect("/");
            context.HandleResponse();
            return Task.CompletedTask;
        }
    };
}, cookieScheme: CookieAuthenticationDefaults.AuthenticationScheme)
.EnableTokenAcquisitionToCallDownstreamApi(graphScopes)
.AddMicrosoftGraph(builder.Configuration.GetSection("DownstreamApi"))
.AddInMemoryTokenCaches();

// Register AITGraphService
builder.Services.AddScoped<AITGraphService>();
builder.Services.AddScoped<MicrosoftIdentityConsentAndConditionalAccessHandler>();

// Register other necessary services
builder.Services.AddLogging();
builder.Services.AddControllersWithViews();

var app = builder.Build();

// Configure the HTTP request pipeline.

if (!app.Environment.IsDevelopment())
{
    app.UseExceptionHandler("/Home/Error");
    app.UseHsts();
}

app.UseHttpsRedirection();
app.UseStaticFiles();

app.UseRouting();

//app.UseAuthentication();
//app.UseAuthorization();

app.MapDefaultControllerRoute();

app.Run();
