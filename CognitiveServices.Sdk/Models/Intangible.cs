// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;

namespace CognitiveServices.Sdk.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.19.0")]
    #pragma warning disable CS1591
    public partial class Intangible : global::CognitiveServices.Sdk.Models.Thing, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        /// <returns>A <see cref="global::CognitiveServices.Sdk.Models.Intangible"/></returns>
        public static new global::CognitiveServices.Sdk.Models.Intangible CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            var mappingValue = parseNode.GetChildNode("_type")?.GetStringValue();
            // Check the mapping value and create the appropriate instance based on the discriminator
            return mappingValue switch
            {
                "StructuredValue" => throw new InvalidOperationException("Cannot convert 'StructuredValue' to 'Intangible'."),
                _ => new global::CognitiveServices.Sdk.Models.Intangible(),
            };
        }

        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public override IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            // Return the field deserializers from the base class
            return new Dictionary<string, Action<IParseNode>>(base.GetFieldDeserializers())
            {
                // Additional field deserializers can be added here if needed
            };
        }

        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public override void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            base.Serialize(writer);
            // Additional serialization logic can be added here if needed
        }
    }
}
#pragma warning restore CS0618
