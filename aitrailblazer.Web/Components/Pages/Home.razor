@page "/"
@rendermode InteractiveServer

@attribute [Authorize]

@using Markdig
@using System.Text
@using AITrailblazer.net.Services
@using AITrailblazer.net.Models

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Authorization
@using Microsoft.Identity.Web
@using AITGraph.Sdk.Models
@using System.Diagnostics;
@using Newtonsoft.Json;
@using System.Text.RegularExpressions
@using Microsoft.AspNetCore.Components.Authorization
@using Azure.AI.OpenAI;
@using SmartComponents
@using System.ComponentModel.DataAnnotations
@using GraphMessage = AITGraph.Sdk.Models.Message

@using Microsoft.AspNetCore.Components.Web

@inject ILogger<User> Logger
@inject PluginService PluginService
@inject NavigationManager NavigationManager
@inject AITGraphService graphService
@inject IJSRuntime jsRuntime
@inject AzureOpenAIHandler azureOpenAIHandler
@inject TimeFunctions _timeFunctions
@inject UserIDsService UserIDsService

<PageTitle>Home</PageTitle>
@currentUserIdentityID
@timeZoneInfo
<h1>Hello, world!</h1>
Tenant: @Tenant

Welcome to your new aitrailblazer app.


@code {
    private Profile profile;
    private UserAccountInformation accountInfo;
    private string timeZoneInfo;
    private string error;

    private string displayName = "";
    private string currentUserIdentityID;
    private string userEmail;
    private string userFullName;
    private string userPhoneNumer;
    private string userLanguage;
    private string userAddress;

    private string? Tenant;
    private string? User;

    private bool isInitialized = false;

    // Inject NavigationManager
    //[Inject]
    //private NavigationManager NavigationManager { get; set; }


    protected override async Task OnInitializedAsync()
    {
        if (!isInitialized)
        {

            isInitialized = true;
        }
    }
    private async Task LoadUserDataAsync()
    {
        try
        {

            profile = await graphService.GetCurrentUserProfileAsync();
            accountInfo = await graphService.GetUserAccountInformationAsync();

            currentUserIdentityID = accountInfo?.Id;

            timeZoneInfo = _timeFunctions.GetUserTimeZone();

        }
        catch (AuthenticationRequiredException)
        {
            RedirectToLogin();
        }
        catch (Exception ex)
        {
            error = $"Error loading user data: {ex.Message}";
        }
        finally
        {
            //isLoading = false; // Hide loading state
        }

    }
    private void RedirectToLogin1()
    {
        var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
        var queryString = System.Web.HttpUtility.ParseQueryString(uri.Query);
        // Get the value of the "myParameter" query string parameter
        Tenant = queryString["Tenant"];
        Console.WriteLine($"Tenant: {Tenant}");
        NavigationManager.NavigateTo($"/MicrosoftIdentity/Account/SignIn?returnUrl={uri}", forceLoad: true);


        // Read query string parameters using NavigationManager
        //var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
        //var queryString = System.Web.HttpUtility.ParseQueryString(uri.Query);

        // Get the value of the "myParameter" query string parameter
        //Tenant = queryString["Tenant"];
        //Console.WriteLine($"Tenant: {Tenant}");
    }
    private void RedirectToLogin()
    {
        //var returnUrl = Uri.EscapeDataString(NavigationManager.Uri);
        var returnUrl = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);

        Console.WriteLine($"returnUrl: {returnUrl}");

        NavigationManager.NavigateTo($"/MicrosoftIdentity/Account/SignIn?returnUrl={returnUrl}", forceLoad: true);
    }
}