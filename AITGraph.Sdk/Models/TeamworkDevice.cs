// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace AITGraph.Sdk.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class TeamworkDevice : global::AITGraph.Sdk.Models.Entity, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>The activity properties that change based on the device usage.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::AITGraph.Sdk.Models.TeamworkDeviceActivity? Activity { get; set; }
#nullable restore
#else
        public global::AITGraph.Sdk.Models.TeamworkDeviceActivity Activity { get; set; }
#endif
        /// <summary>The activity state of the device. The possible values are: unknown, busy, idle, unavailable, unknownFutureValue.</summary>
        public global::AITGraph.Sdk.Models.TeamworkDeviceActivityState? ActivityState { get; set; }
        /// <summary>The company asset tag assigned by the admin on the device.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CompanyAssetTag { get; set; }
#nullable restore
#else
        public string CompanyAssetTag { get; set; }
#endif
        /// <summary>The configuration properties of the device.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::AITGraph.Sdk.Models.TeamworkDeviceConfiguration? Configuration { get; set; }
#nullable restore
#else
        public global::AITGraph.Sdk.Models.TeamworkDeviceConfiguration Configuration { get; set; }
#endif
        /// <summary>Identity of the user who enrolled the device to the tenant.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::AITGraph.Sdk.Models.IdentitySet? CreatedBy { get; set; }
#nullable restore
#else
        public global::AITGraph.Sdk.Models.IdentitySet CreatedBy { get; set; }
#endif
        /// <summary>The UTC date and time when the device was enrolled to the tenant.</summary>
        public DateTimeOffset? CreatedDateTime { get; set; }
        /// <summary>The signed-in user on the device.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::AITGraph.Sdk.Models.TeamworkUserIdentity? CurrentUser { get; set; }
#nullable restore
#else
        public global::AITGraph.Sdk.Models.TeamworkUserIdentity CurrentUser { get; set; }
#endif
        /// <summary>The deviceType property</summary>
        public global::AITGraph.Sdk.Models.TeamworkDeviceType? DeviceType { get; set; }
        /// <summary>The hardwareDetail property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::AITGraph.Sdk.Models.TeamworkHardwareDetail? HardwareDetail { get; set; }
#nullable restore
#else
        public global::AITGraph.Sdk.Models.TeamworkHardwareDetail HardwareDetail { get; set; }
#endif
        /// <summary>The health properties of the device.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::AITGraph.Sdk.Models.TeamworkDeviceHealth? Health { get; set; }
#nullable restore
#else
        public global::AITGraph.Sdk.Models.TeamworkDeviceHealth Health { get; set; }
#endif
        /// <summary>The health status of the device. The possible values are: unknown, offline, critical, nonUrgent, healthy, unknownFutureValue.</summary>
        public global::AITGraph.Sdk.Models.TeamworkDeviceHealthStatus? HealthStatus { get; set; }
        /// <summary>Identity of the user who last modified the device details.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::AITGraph.Sdk.Models.IdentitySet? LastModifiedBy { get; set; }
#nullable restore
#else
        public global::AITGraph.Sdk.Models.IdentitySet LastModifiedBy { get; set; }
#endif
        /// <summary>The UTC date and time when the device detail was last modified.</summary>
        public DateTimeOffset? LastModifiedDateTime { get; set; }
        /// <summary>The notes added by the admin to the device.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Notes { get; set; }
#nullable restore
#else
        public string Notes { get; set; }
#endif
        /// <summary>The async operations on the device.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::AITGraph.Sdk.Models.TeamworkDeviceOperation>? Operations { get; set; }
#nullable restore
#else
        public List<global::AITGraph.Sdk.Models.TeamworkDeviceOperation> Operations { get; set; }
#endif
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::AITGraph.Sdk.Models.TeamworkDevice"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static new global::AITGraph.Sdk.Models.TeamworkDevice CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::AITGraph.Sdk.Models.TeamworkDevice();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public override IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>(base.GetFieldDeserializers())
            {
                { "activity", n => { Activity = n.GetObjectValue<global::AITGraph.Sdk.Models.TeamworkDeviceActivity>(global::AITGraph.Sdk.Models.TeamworkDeviceActivity.CreateFromDiscriminatorValue); } },
                { "activityState", n => { ActivityState = n.GetEnumValue<global::AITGraph.Sdk.Models.TeamworkDeviceActivityState>(); } },
                { "companyAssetTag", n => { CompanyAssetTag = n.GetStringValue(); } },
                { "configuration", n => { Configuration = n.GetObjectValue<global::AITGraph.Sdk.Models.TeamworkDeviceConfiguration>(global::AITGraph.Sdk.Models.TeamworkDeviceConfiguration.CreateFromDiscriminatorValue); } },
                { "createdBy", n => { CreatedBy = n.GetObjectValue<global::AITGraph.Sdk.Models.IdentitySet>(global::AITGraph.Sdk.Models.IdentitySet.CreateFromDiscriminatorValue); } },
                { "createdDateTime", n => { CreatedDateTime = n.GetDateTimeOffsetValue(); } },
                { "currentUser", n => { CurrentUser = n.GetObjectValue<global::AITGraph.Sdk.Models.TeamworkUserIdentity>(global::AITGraph.Sdk.Models.TeamworkUserIdentity.CreateFromDiscriminatorValue); } },
                { "deviceType", n => { DeviceType = n.GetEnumValue<global::AITGraph.Sdk.Models.TeamworkDeviceType>(); } },
                { "hardwareDetail", n => { HardwareDetail = n.GetObjectValue<global::AITGraph.Sdk.Models.TeamworkHardwareDetail>(global::AITGraph.Sdk.Models.TeamworkHardwareDetail.CreateFromDiscriminatorValue); } },
                { "health", n => { Health = n.GetObjectValue<global::AITGraph.Sdk.Models.TeamworkDeviceHealth>(global::AITGraph.Sdk.Models.TeamworkDeviceHealth.CreateFromDiscriminatorValue); } },
                { "healthStatus", n => { HealthStatus = n.GetEnumValue<global::AITGraph.Sdk.Models.TeamworkDeviceHealthStatus>(); } },
                { "lastModifiedBy", n => { LastModifiedBy = n.GetObjectValue<global::AITGraph.Sdk.Models.IdentitySet>(global::AITGraph.Sdk.Models.IdentitySet.CreateFromDiscriminatorValue); } },
                { "lastModifiedDateTime", n => { LastModifiedDateTime = n.GetDateTimeOffsetValue(); } },
                { "notes", n => { Notes = n.GetStringValue(); } },
                { "operations", n => { Operations = n.GetCollectionOfObjectValues<global::AITGraph.Sdk.Models.TeamworkDeviceOperation>(global::AITGraph.Sdk.Models.TeamworkDeviceOperation.CreateFromDiscriminatorValue)?.AsList(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public override void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            base.Serialize(writer);
            writer.WriteObjectValue<global::AITGraph.Sdk.Models.TeamworkDeviceActivity>("activity", Activity);
            writer.WriteEnumValue<global::AITGraph.Sdk.Models.TeamworkDeviceActivityState>("activityState", ActivityState);
            writer.WriteStringValue("companyAssetTag", CompanyAssetTag);
            writer.WriteObjectValue<global::AITGraph.Sdk.Models.TeamworkDeviceConfiguration>("configuration", Configuration);
            writer.WriteObjectValue<global::AITGraph.Sdk.Models.IdentitySet>("createdBy", CreatedBy);
            writer.WriteDateTimeOffsetValue("createdDateTime", CreatedDateTime);
            writer.WriteObjectValue<global::AITGraph.Sdk.Models.TeamworkUserIdentity>("currentUser", CurrentUser);
            writer.WriteEnumValue<global::AITGraph.Sdk.Models.TeamworkDeviceType>("deviceType", DeviceType);
            writer.WriteObjectValue<global::AITGraph.Sdk.Models.TeamworkHardwareDetail>("hardwareDetail", HardwareDetail);
            writer.WriteObjectValue<global::AITGraph.Sdk.Models.TeamworkDeviceHealth>("health", Health);
            writer.WriteEnumValue<global::AITGraph.Sdk.Models.TeamworkDeviceHealthStatus>("healthStatus", HealthStatus);
            writer.WriteObjectValue<global::AITGraph.Sdk.Models.IdentitySet>("lastModifiedBy", LastModifiedBy);
            writer.WriteDateTimeOffsetValue("lastModifiedDateTime", LastModifiedDateTime);
            writer.WriteStringValue("notes", Notes);
            writer.WriteCollectionOfObjectValues<global::AITGraph.Sdk.Models.TeamworkDeviceOperation>("operations", Operations);
        }
    }
}
#pragma warning restore CS0618
