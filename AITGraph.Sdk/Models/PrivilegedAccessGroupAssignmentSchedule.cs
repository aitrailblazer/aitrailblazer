// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace AITGraph.Sdk.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class PrivilegedAccessGroupAssignmentSchedule : global::AITGraph.Sdk.Models.PrivilegedAccessSchedule, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>The accessId property</summary>
        public global::AITGraph.Sdk.Models.PrivilegedAccessGroupRelationships? AccessId { get; set; }
        /// <summary>The activatedUsing property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::AITGraph.Sdk.Models.PrivilegedAccessGroupEligibilitySchedule? ActivatedUsing { get; set; }
#nullable restore
#else
        public global::AITGraph.Sdk.Models.PrivilegedAccessGroupEligibilitySchedule ActivatedUsing { get; set; }
#endif
        /// <summary>The assignmentType property</summary>
        public global::AITGraph.Sdk.Models.PrivilegedAccessGroupAssignmentType? AssignmentType { get; set; }
        /// <summary>The group property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::AITGraph.Sdk.Models.Group? Group { get; set; }
#nullable restore
#else
        public global::AITGraph.Sdk.Models.Group Group { get; set; }
#endif
        /// <summary>The groupId property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? GroupId { get; set; }
#nullable restore
#else
        public string GroupId { get; set; }
#endif
        /// <summary>The memberType property</summary>
        public global::AITGraph.Sdk.Models.PrivilegedAccessGroupMemberType? MemberType { get; set; }
        /// <summary>The principal property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::AITGraph.Sdk.Models.DirectoryObject? Principal { get; set; }
#nullable restore
#else
        public global::AITGraph.Sdk.Models.DirectoryObject Principal { get; set; }
#endif
        /// <summary>The principalId property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? PrincipalId { get; set; }
#nullable restore
#else
        public string PrincipalId { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::AITGraph.Sdk.Models.PrivilegedAccessGroupAssignmentSchedule"/> and sets the default values.
        /// </summary>
        public PrivilegedAccessGroupAssignmentSchedule() : base()
        {
            OdataType = "#microsoft.graph.privilegedAccessGroupAssignmentSchedule";
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::AITGraph.Sdk.Models.PrivilegedAccessGroupAssignmentSchedule"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static new global::AITGraph.Sdk.Models.PrivilegedAccessGroupAssignmentSchedule CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::AITGraph.Sdk.Models.PrivilegedAccessGroupAssignmentSchedule();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public override IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>(base.GetFieldDeserializers())
            {
                { "accessId", n => { AccessId = n.GetEnumValue<global::AITGraph.Sdk.Models.PrivilegedAccessGroupRelationships>(); } },
                { "activatedUsing", n => { ActivatedUsing = n.GetObjectValue<global::AITGraph.Sdk.Models.PrivilegedAccessGroupEligibilitySchedule>(global::AITGraph.Sdk.Models.PrivilegedAccessGroupEligibilitySchedule.CreateFromDiscriminatorValue); } },
                { "assignmentType", n => { AssignmentType = n.GetEnumValue<global::AITGraph.Sdk.Models.PrivilegedAccessGroupAssignmentType>(); } },
                { "group", n => { Group = n.GetObjectValue<global::AITGraph.Sdk.Models.Group>(global::AITGraph.Sdk.Models.Group.CreateFromDiscriminatorValue); } },
                { "groupId", n => { GroupId = n.GetStringValue(); } },
                { "memberType", n => { MemberType = n.GetEnumValue<global::AITGraph.Sdk.Models.PrivilegedAccessGroupMemberType>(); } },
                { "principal", n => { Principal = n.GetObjectValue<global::AITGraph.Sdk.Models.DirectoryObject>(global::AITGraph.Sdk.Models.DirectoryObject.CreateFromDiscriminatorValue); } },
                { "principalId", n => { PrincipalId = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public override void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            base.Serialize(writer);
            writer.WriteEnumValue<global::AITGraph.Sdk.Models.PrivilegedAccessGroupRelationships>("accessId", AccessId);
            writer.WriteObjectValue<global::AITGraph.Sdk.Models.PrivilegedAccessGroupEligibilitySchedule>("activatedUsing", ActivatedUsing);
            writer.WriteEnumValue<global::AITGraph.Sdk.Models.PrivilegedAccessGroupAssignmentType>("assignmentType", AssignmentType);
            writer.WriteObjectValue<global::AITGraph.Sdk.Models.Group>("group", Group);
            writer.WriteStringValue("groupId", GroupId);
            writer.WriteEnumValue<global::AITGraph.Sdk.Models.PrivilegedAccessGroupMemberType>("memberType", MemberType);
            writer.WriteObjectValue<global::AITGraph.Sdk.Models.DirectoryObject>("principal", Principal);
            writer.WriteStringValue("principalId", PrincipalId);
        }
    }
}
#pragma warning restore CS0618
