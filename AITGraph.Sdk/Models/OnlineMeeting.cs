// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace AITGraph.Sdk.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class OnlineMeeting : global::AITGraph.Sdk.Models.Entity, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Indicates whether attendees can turn on their camera.</summary>
        public bool? AllowAttendeeToEnableCamera { get; set; }
        /// <summary>Indicates whether attendees can turn on their microphone.</summary>
        public bool? AllowAttendeeToEnableMic { get; set; }
        /// <summary>Specifies who can be a presenter in a meeting.</summary>
        public global::AITGraph.Sdk.Models.OnlineMeetingPresenters? AllowedPresenters { get; set; }
        /// <summary>The allowParticipantsToChangeName property</summary>
        public bool? AllowParticipantsToChangeName { get; set; }
        /// <summary>Indicates if Teams reactions are enabled for the meeting.</summary>
        public bool? AllowTeamworkReactions { get; set; }
        /// <summary>The content stream of the alternative recording of a Microsoft Teams live event. Read-only.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public byte[]? AlternativeRecording { get; set; }
#nullable restore
#else
        public byte[] AlternativeRecording { get; set; }
#endif
        /// <summary>The anonymizeIdentityForRoles property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::AITGraph.Sdk.Models.OnlineMeetingRole?>? AnonymizeIdentityForRoles { get; set; }
#nullable restore
#else
        public List<global::AITGraph.Sdk.Models.OnlineMeetingRole?> AnonymizeIdentityForRoles { get; set; }
#endif
        /// <summary>The attendance reports of an online meeting. Read-only.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::AITGraph.Sdk.Models.MeetingAttendanceReport>? AttendanceReports { get; set; }
#nullable restore
#else
        public List<global::AITGraph.Sdk.Models.MeetingAttendanceReport> AttendanceReports { get; set; }
#endif
        /// <summary>The content stream of the attendee report of a Teams live event. Read-only.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public byte[]? AttendeeReport { get; set; }
#nullable restore
#else
        public byte[] AttendeeReport { get; set; }
#endif
        /// <summary>The phone access (dial-in) information for an online meeting. Read-only.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::AITGraph.Sdk.Models.AudioConferencing? AudioConferencing { get; set; }
#nullable restore
#else
        public global::AITGraph.Sdk.Models.AudioConferencing AudioConferencing { get; set; }
#endif
        /// <summary>Settings related to a live event.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::AITGraph.Sdk.Models.BroadcastMeetingSettings? BroadcastSettings { get; set; }
#nullable restore
#else
        public global::AITGraph.Sdk.Models.BroadcastMeetingSettings BroadcastSettings { get; set; }
#endif
        /// <summary>The capabilities property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::AITGraph.Sdk.Models.MeetingCapabilities?>? Capabilities { get; set; }
#nullable restore
#else
        public List<global::AITGraph.Sdk.Models.MeetingCapabilities?> Capabilities { get; set; }
#endif
        /// <summary>The chat information associated with this online meeting.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::AITGraph.Sdk.Models.ChatInfo? ChatInfo { get; set; }
#nullable restore
#else
        public global::AITGraph.Sdk.Models.ChatInfo ChatInfo { get; set; }
#endif
        /// <summary>The meeting creation time in UTC. Read-only.</summary>
        public DateTimeOffset? CreationDateTime { get; set; }
        /// <summary>The meeting end time in UTC.</summary>
        public DateTimeOffset? EndDateTime { get; set; }
        /// <summary>The external ID. A custom ID. Optional.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ExternalId { get; set; }
#nullable restore
#else
        public string ExternalId { get; set; }
#endif
        /// <summary>Indicates whether this is a Teams live event.</summary>
        public bool? IsBroadcast { get; set; }
        /// <summary>Indicates whether to announce when callers join or leave.</summary>
        public bool? IsEntryExitAnnounced { get; set; }
        /// <summary>The join information in the language and locale variant specified in &apos;Accept-Language&apos; request HTTP header. Read-only.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::AITGraph.Sdk.Models.ItemBody? JoinInformation { get; set; }
#nullable restore
#else
        public global::AITGraph.Sdk.Models.ItemBody JoinInformation { get; set; }
#endif
        /// <summary>Specifies the joinMeetingId, the meeting passcode, and the requirement for the passcode. Once an onlineMeeting is created, the joinMeetingIdSettings cannot be modified. To make any changes to this property, the meeting needs to be canceled and a new one needs to be created.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::AITGraph.Sdk.Models.JoinMeetingIdSettings? JoinMeetingIdSettings { get; set; }
#nullable restore
#else
        public global::AITGraph.Sdk.Models.JoinMeetingIdSettings JoinMeetingIdSettings { get; set; }
#endif
        /// <summary>The joinUrl property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? JoinUrl { get; set; }
#nullable restore
#else
        public string JoinUrl { get; set; }
#endif
        /// <summary>The join URL of the online meeting. Read-only.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? JoinWebUrl { get; set; }
#nullable restore
#else
        public string JoinWebUrl { get; set; }
#endif
        /// <summary>Specifies which participants can bypass the meeting lobby.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::AITGraph.Sdk.Models.LobbyBypassSettings? LobbyBypassSettings { get; set; }
#nullable restore
#else
        public global::AITGraph.Sdk.Models.LobbyBypassSettings LobbyBypassSettings { get; set; }
#endif
        /// <summary>The meetingAttendanceReport property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::AITGraph.Sdk.Models.MeetingAttendanceReport? MeetingAttendanceReport { get; set; }
#nullable restore
#else
        public global::AITGraph.Sdk.Models.MeetingAttendanceReport MeetingAttendanceReport { get; set; }
#endif
        /// <summary>The participants associated with the online meeting. This includes the organizer and the attendees.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::AITGraph.Sdk.Models.MeetingParticipants? Participants { get; set; }
#nullable restore
#else
        public global::AITGraph.Sdk.Models.MeetingParticipants Participants { get; set; }
#endif
        /// <summary>Indicates whether to record the meeting automatically.</summary>
        public bool? RecordAutomatically { get; set; }
        /// <summary>The content stream of the recording of a Teams live event. Read-only.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public byte[]? Recording { get; set; }
#nullable restore
#else
        public byte[] Recording { get; set; }
#endif
        /// <summary>The registration that has been enabled for an online meeting. One online meeting can only have one registration enabled.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::AITGraph.Sdk.Models.MeetingRegistration? Registration { get; set; }
#nullable restore
#else
        public global::AITGraph.Sdk.Models.MeetingRegistration Registration { get; set; }
#endif
        /// <summary>The shareMeetingChatHistoryDefault property</summary>
        public global::AITGraph.Sdk.Models.MeetingChatHistoryDefaultMode? ShareMeetingChatHistoryDefault { get; set; }
        /// <summary>The meeting start time in UTC.</summary>
        public DateTimeOffset? StartDateTime { get; set; }
        /// <summary>The subject of the online meeting.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Subject { get; set; }
#nullable restore
#else
        public string Subject { get; set; }
#endif
        /// <summary>The transcripts of an online meeting. Read-only.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::AITGraph.Sdk.Models.CallTranscript>? Transcripts { get; set; }
#nullable restore
#else
        public List<global::AITGraph.Sdk.Models.CallTranscript> Transcripts { get; set; }
#endif
        /// <summary>The video teleconferencing ID. Read-only.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? VideoTeleconferenceId { get; set; }
#nullable restore
#else
        public string VideoTeleconferenceId { get; set; }
#endif
        /// <summary>The virtualAppointment property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::AITGraph.Sdk.Models.VirtualAppointment? VirtualAppointment { get; set; }
#nullable restore
#else
        public global::AITGraph.Sdk.Models.VirtualAppointment VirtualAppointment { get; set; }
#endif
        /// <summary>Specifies whether a watermark applies for different entities.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::AITGraph.Sdk.Models.WatermarkProtectionValues? WatermarkProtection { get; set; }
#nullable restore
#else
        public global::AITGraph.Sdk.Models.WatermarkProtectionValues WatermarkProtection { get; set; }
#endif
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::AITGraph.Sdk.Models.OnlineMeeting"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static new global::AITGraph.Sdk.Models.OnlineMeeting CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::AITGraph.Sdk.Models.OnlineMeeting();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public override IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>(base.GetFieldDeserializers())
            {
                { "allowAttendeeToEnableCamera", n => { AllowAttendeeToEnableCamera = n.GetBoolValue(); } },
                { "allowAttendeeToEnableMic", n => { AllowAttendeeToEnableMic = n.GetBoolValue(); } },
                { "allowParticipantsToChangeName", n => { AllowParticipantsToChangeName = n.GetBoolValue(); } },
                { "allowTeamworkReactions", n => { AllowTeamworkReactions = n.GetBoolValue(); } },
                { "allowedPresenters", n => { AllowedPresenters = n.GetEnumValue<global::AITGraph.Sdk.Models.OnlineMeetingPresenters>(); } },
                { "alternativeRecording", n => { AlternativeRecording = n.GetByteArrayValue(); } },
                { "anonymizeIdentityForRoles", n => { AnonymizeIdentityForRoles = n.GetCollectionOfEnumValues<global::AITGraph.Sdk.Models.OnlineMeetingRole>()?.AsList(); } },
                { "attendanceReports", n => { AttendanceReports = n.GetCollectionOfObjectValues<global::AITGraph.Sdk.Models.MeetingAttendanceReport>(global::AITGraph.Sdk.Models.MeetingAttendanceReport.CreateFromDiscriminatorValue)?.AsList(); } },
                { "attendeeReport", n => { AttendeeReport = n.GetByteArrayValue(); } },
                { "audioConferencing", n => { AudioConferencing = n.GetObjectValue<global::AITGraph.Sdk.Models.AudioConferencing>(global::AITGraph.Sdk.Models.AudioConferencing.CreateFromDiscriminatorValue); } },
                { "broadcastSettings", n => { BroadcastSettings = n.GetObjectValue<global::AITGraph.Sdk.Models.BroadcastMeetingSettings>(global::AITGraph.Sdk.Models.BroadcastMeetingSettings.CreateFromDiscriminatorValue); } },
                { "capabilities", n => { Capabilities = n.GetCollectionOfEnumValues<global::AITGraph.Sdk.Models.MeetingCapabilities>()?.AsList(); } },
                { "chatInfo", n => { ChatInfo = n.GetObjectValue<global::AITGraph.Sdk.Models.ChatInfo>(global::AITGraph.Sdk.Models.ChatInfo.CreateFromDiscriminatorValue); } },
                { "creationDateTime", n => { CreationDateTime = n.GetDateTimeOffsetValue(); } },
                { "endDateTime", n => { EndDateTime = n.GetDateTimeOffsetValue(); } },
                { "externalId", n => { ExternalId = n.GetStringValue(); } },
                { "isBroadcast", n => { IsBroadcast = n.GetBoolValue(); } },
                { "isEntryExitAnnounced", n => { IsEntryExitAnnounced = n.GetBoolValue(); } },
                { "joinInformation", n => { JoinInformation = n.GetObjectValue<global::AITGraph.Sdk.Models.ItemBody>(global::AITGraph.Sdk.Models.ItemBody.CreateFromDiscriminatorValue); } },
                { "joinMeetingIdSettings", n => { JoinMeetingIdSettings = n.GetObjectValue<global::AITGraph.Sdk.Models.JoinMeetingIdSettings>(global::AITGraph.Sdk.Models.JoinMeetingIdSettings.CreateFromDiscriminatorValue); } },
                { "joinUrl", n => { JoinUrl = n.GetStringValue(); } },
                { "joinWebUrl", n => { JoinWebUrl = n.GetStringValue(); } },
                { "lobbyBypassSettings", n => { LobbyBypassSettings = n.GetObjectValue<global::AITGraph.Sdk.Models.LobbyBypassSettings>(global::AITGraph.Sdk.Models.LobbyBypassSettings.CreateFromDiscriminatorValue); } },
                { "meetingAttendanceReport", n => { MeetingAttendanceReport = n.GetObjectValue<global::AITGraph.Sdk.Models.MeetingAttendanceReport>(global::AITGraph.Sdk.Models.MeetingAttendanceReport.CreateFromDiscriminatorValue); } },
                { "participants", n => { Participants = n.GetObjectValue<global::AITGraph.Sdk.Models.MeetingParticipants>(global::AITGraph.Sdk.Models.MeetingParticipants.CreateFromDiscriminatorValue); } },
                { "recordAutomatically", n => { RecordAutomatically = n.GetBoolValue(); } },
                { "recording", n => { Recording = n.GetByteArrayValue(); } },
                { "registration", n => { Registration = n.GetObjectValue<global::AITGraph.Sdk.Models.MeetingRegistration>(global::AITGraph.Sdk.Models.MeetingRegistration.CreateFromDiscriminatorValue); } },
                { "shareMeetingChatHistoryDefault", n => { ShareMeetingChatHistoryDefault = n.GetEnumValue<global::AITGraph.Sdk.Models.MeetingChatHistoryDefaultMode>(); } },
                { "startDateTime", n => { StartDateTime = n.GetDateTimeOffsetValue(); } },
                { "subject", n => { Subject = n.GetStringValue(); } },
                { "transcripts", n => { Transcripts = n.GetCollectionOfObjectValues<global::AITGraph.Sdk.Models.CallTranscript>(global::AITGraph.Sdk.Models.CallTranscript.CreateFromDiscriminatorValue)?.AsList(); } },
                { "videoTeleconferenceId", n => { VideoTeleconferenceId = n.GetStringValue(); } },
                { "virtualAppointment", n => { VirtualAppointment = n.GetObjectValue<global::AITGraph.Sdk.Models.VirtualAppointment>(global::AITGraph.Sdk.Models.VirtualAppointment.CreateFromDiscriminatorValue); } },
                { "watermarkProtection", n => { WatermarkProtection = n.GetObjectValue<global::AITGraph.Sdk.Models.WatermarkProtectionValues>(global::AITGraph.Sdk.Models.WatermarkProtectionValues.CreateFromDiscriminatorValue); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public override void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            base.Serialize(writer);
            writer.WriteBoolValue("allowAttendeeToEnableCamera", AllowAttendeeToEnableCamera);
            writer.WriteBoolValue("allowAttendeeToEnableMic", AllowAttendeeToEnableMic);
            writer.WriteEnumValue<global::AITGraph.Sdk.Models.OnlineMeetingPresenters>("allowedPresenters", AllowedPresenters);
            writer.WriteBoolValue("allowParticipantsToChangeName", AllowParticipantsToChangeName);
            writer.WriteBoolValue("allowTeamworkReactions", AllowTeamworkReactions);
            writer.WriteByteArrayValue("alternativeRecording", AlternativeRecording);
            writer.WriteCollectionOfEnumValues<global::AITGraph.Sdk.Models.OnlineMeetingRole>("anonymizeIdentityForRoles", AnonymizeIdentityForRoles);
            writer.WriteCollectionOfObjectValues<global::AITGraph.Sdk.Models.MeetingAttendanceReport>("attendanceReports", AttendanceReports);
            writer.WriteByteArrayValue("attendeeReport", AttendeeReport);
            writer.WriteObjectValue<global::AITGraph.Sdk.Models.AudioConferencing>("audioConferencing", AudioConferencing);
            writer.WriteObjectValue<global::AITGraph.Sdk.Models.BroadcastMeetingSettings>("broadcastSettings", BroadcastSettings);
            writer.WriteCollectionOfEnumValues<global::AITGraph.Sdk.Models.MeetingCapabilities>("capabilities", Capabilities);
            writer.WriteObjectValue<global::AITGraph.Sdk.Models.ChatInfo>("chatInfo", ChatInfo);
            writer.WriteDateTimeOffsetValue("creationDateTime", CreationDateTime);
            writer.WriteDateTimeOffsetValue("endDateTime", EndDateTime);
            writer.WriteStringValue("externalId", ExternalId);
            writer.WriteBoolValue("isBroadcast", IsBroadcast);
            writer.WriteBoolValue("isEntryExitAnnounced", IsEntryExitAnnounced);
            writer.WriteObjectValue<global::AITGraph.Sdk.Models.ItemBody>("joinInformation", JoinInformation);
            writer.WriteObjectValue<global::AITGraph.Sdk.Models.JoinMeetingIdSettings>("joinMeetingIdSettings", JoinMeetingIdSettings);
            writer.WriteStringValue("joinUrl", JoinUrl);
            writer.WriteStringValue("joinWebUrl", JoinWebUrl);
            writer.WriteObjectValue<global::AITGraph.Sdk.Models.LobbyBypassSettings>("lobbyBypassSettings", LobbyBypassSettings);
            writer.WriteObjectValue<global::AITGraph.Sdk.Models.MeetingAttendanceReport>("meetingAttendanceReport", MeetingAttendanceReport);
            writer.WriteObjectValue<global::AITGraph.Sdk.Models.MeetingParticipants>("participants", Participants);
            writer.WriteBoolValue("recordAutomatically", RecordAutomatically);
            writer.WriteByteArrayValue("recording", Recording);
            writer.WriteObjectValue<global::AITGraph.Sdk.Models.MeetingRegistration>("registration", Registration);
            writer.WriteEnumValue<global::AITGraph.Sdk.Models.MeetingChatHistoryDefaultMode>("shareMeetingChatHistoryDefault", ShareMeetingChatHistoryDefault);
            writer.WriteDateTimeOffsetValue("startDateTime", StartDateTime);
            writer.WriteStringValue("subject", Subject);
            writer.WriteCollectionOfObjectValues<global::AITGraph.Sdk.Models.CallTranscript>("transcripts", Transcripts);
            writer.WriteStringValue("videoTeleconferenceId", VideoTeleconferenceId);
            writer.WriteObjectValue<global::AITGraph.Sdk.Models.VirtualAppointment>("virtualAppointment", VirtualAppointment);
            writer.WriteObjectValue<global::AITGraph.Sdk.Models.WatermarkProtectionValues>("watermarkProtection", WatermarkProtection);
        }
    }
}
#pragma warning restore CS0618
