// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace CognitiveServices.Sdk.Models
{
    /// <summary>
    /// Defines a postal address.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.19.0")]
    public partial class PostalAddress : global::CognitiveServices.Sdk.Models.StructuredValue, IParsable
    {
        /// <summary>The country/region where the street address is located. This could be the two-letter ISO code. For example, US, or the full name, United States.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? AddressCountry { get; private set; }
#nullable restore
#else
        public string AddressCountry { get; private set; }
#endif
        /// <summary>The city where the street address is located. For example, Seattle.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? AddressLocality { get; private set; }
#nullable restore
#else
        public string AddressLocality { get; private set; }
#endif
        /// <summary>The state or province code where the street address is located. This could be the two-letter code. For example, WA, or the full name , Washington.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? AddressRegion { get; private set; }
#nullable restore
#else
        public string AddressRegion { get; private set; }
#endif
        /// <summary>Region Abbreviation. For example, WA.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? AddressRegionAbbreviation { get; private set; }
#nullable restore
#else
        public string AddressRegionAbbreviation { get; private set; }
#endif
        /// <summary>The addressSubregion property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? AddressSubregion { get; private set; }
#nullable restore
#else
        public string AddressSubregion { get; private set; }
#endif
        /// <summary>The two letter ISO code of this country. For example, US.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CountryIso { get; private set; }
#nullable restore
#else
        public string CountryIso { get; private set; }
#endif
        /// <summary>The neighborhood where the street address is located. For example, Westlake.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Neighborhood { get; private set; }
#nullable restore
#else
        public string Neighborhood { get; private set; }
#endif
        /// <summary>The zip code or postal code where the street address is located. For example, 98052.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? PostalCode { get; private set; }
#nullable restore
#else
        public string PostalCode { get; private set; }
#endif
        /// <summary>The postOfficeBoxNumber property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? PostOfficeBoxNumber { get; private set; }
#nullable restore
#else
        public string PostOfficeBoxNumber { get; private set; }
#endif
        /// <summary>The streetAddress property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? StreetAddress { get; private set; }
#nullable restore
#else
        public string StreetAddress { get; private set; }
#endif
        /// <summary>The complete address. For example, 2100 Westlake Ave N, Bellevue, WA 98052.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Text { get; private set; }
#nullable restore
#else
        public string Text { get; private set; }
#endif
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::CognitiveServices.Sdk.Models.PostalAddress"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static new global::CognitiveServices.Sdk.Models.PostalAddress CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::CognitiveServices.Sdk.Models.PostalAddress();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public override IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>(base.GetFieldDeserializers())
            {
                { "addressCountry", n => { AddressCountry = n.GetStringValue(); } },
                { "addressLocality", n => { AddressLocality = n.GetStringValue(); } },
                { "addressRegion", n => { AddressRegion = n.GetStringValue(); } },
                { "addressRegionAbbreviation", n => { AddressRegionAbbreviation = n.GetStringValue(); } },
                { "addressSubregion", n => { AddressSubregion = n.GetStringValue(); } },
                { "countryIso", n => { CountryIso = n.GetStringValue(); } },
                { "neighborhood", n => { Neighborhood = n.GetStringValue(); } },
                { "postOfficeBoxNumber", n => { PostOfficeBoxNumber = n.GetStringValue(); } },
                { "postalCode", n => { PostalCode = n.GetStringValue(); } },
                { "streetAddress", n => { StreetAddress = n.GetStringValue(); } },
                { "text", n => { Text = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public override void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            base.Serialize(writer);
        }
    }
}
#pragma warning restore CS0618
