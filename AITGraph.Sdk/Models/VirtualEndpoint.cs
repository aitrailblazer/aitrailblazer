// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace AITGraph.Sdk.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class VirtualEndpoint : global::AITGraph.Sdk.Models.Entity, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Cloud PC audit event.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::AITGraph.Sdk.Models.CloudPcAuditEvent>? AuditEvents { get; set; }
#nullable restore
#else
        public List<global::AITGraph.Sdk.Models.CloudPcAuditEvent> AuditEvents { get; set; }
#endif
        /// <summary>Cloud managed virtual desktops.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::AITGraph.Sdk.Models.CloudPC>? CloudPCs { get; set; }
#nullable restore
#else
        public List<global::AITGraph.Sdk.Models.CloudPC> CloudPCs { get; set; }
#endif
        /// <summary>Cloud PC organization mapping between public and US Government Community Cloud (GCC) organizations.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::AITGraph.Sdk.Models.CloudPcCrossCloudGovernmentOrganizationMapping? CrossCloudGovernmentOrganizationMapping { get; set; }
#nullable restore
#else
        public global::AITGraph.Sdk.Models.CloudPcCrossCloudGovernmentOrganizationMapping CrossCloudGovernmentOrganizationMapping { get; set; }
#endif
        /// <summary>The image resource on Cloud PC.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::AITGraph.Sdk.Models.CloudPcDeviceImage>? DeviceImages { get; set; }
#nullable restore
#else
        public List<global::AITGraph.Sdk.Models.CloudPcDeviceImage> DeviceImages { get; set; }
#endif
        /// <summary>The external partner settings on a Cloud PC.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::AITGraph.Sdk.Models.CloudPcExternalPartnerSetting>? ExternalPartnerSettings { get; set; }
#nullable restore
#else
        public List<global::AITGraph.Sdk.Models.CloudPcExternalPartnerSetting> ExternalPartnerSettings { get; set; }
#endif
        /// <summary>The gallery image resource on Cloud PC.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::AITGraph.Sdk.Models.CloudPcGalleryImage>? GalleryImages { get; set; }
#nullable restore
#else
        public List<global::AITGraph.Sdk.Models.CloudPcGalleryImage> GalleryImages { get; set; }
#endif
        /// <summary>A defined collection of Azure resource information that can be used to establish on-premises network connectivity for Cloud PCs.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::AITGraph.Sdk.Models.CloudPcOnPremisesConnection>? OnPremisesConnections { get; set; }
#nullable restore
#else
        public List<global::AITGraph.Sdk.Models.CloudPcOnPremisesConnection> OnPremisesConnections { get; set; }
#endif
        /// <summary>The Cloud PC organization settings for a tenant.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::AITGraph.Sdk.Models.CloudPcOrganizationSettings? OrganizationSettings { get; set; }
#nullable restore
#else
        public global::AITGraph.Sdk.Models.CloudPcOrganizationSettings OrganizationSettings { get; set; }
#endif
        /// <summary>Cloud PC provisioning policy.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::AITGraph.Sdk.Models.CloudPcProvisioningPolicy>? ProvisioningPolicies { get; set; }
#nullable restore
#else
        public List<global::AITGraph.Sdk.Models.CloudPcProvisioningPolicy> ProvisioningPolicies { get; set; }
#endif
        /// <summary>Cloud PC related reports.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::AITGraph.Sdk.Models.CloudPcReports? Reports { get; set; }
#nullable restore
#else
        public global::AITGraph.Sdk.Models.CloudPcReports Reports { get; set; }
#endif
        /// <summary>Cloud PC service plans.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::AITGraph.Sdk.Models.CloudPcServicePlan>? ServicePlans { get; set; }
#nullable restore
#else
        public List<global::AITGraph.Sdk.Models.CloudPcServicePlan> ServicePlans { get; set; }
#endif
        /// <summary>Cloud PC shared-use service plans.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::AITGraph.Sdk.Models.CloudPcSharedUseServicePlan>? SharedUseServicePlans { get; set; }
#nullable restore
#else
        public List<global::AITGraph.Sdk.Models.CloudPcSharedUseServicePlan> SharedUseServicePlans { get; set; }
#endif
        /// <summary>Cloud PC snapshots.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::AITGraph.Sdk.Models.CloudPcSnapshot>? Snapshots { get; set; }
#nullable restore
#else
        public List<global::AITGraph.Sdk.Models.CloudPcSnapshot> Snapshots { get; set; }
#endif
        /// <summary>Cloud PC supported regions.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::AITGraph.Sdk.Models.CloudPcSupportedRegion>? SupportedRegions { get; set; }
#nullable restore
#else
        public List<global::AITGraph.Sdk.Models.CloudPcSupportedRegion> SupportedRegions { get; set; }
#endif
        /// <summary>Cloud PC user settings.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::AITGraph.Sdk.Models.CloudPcUserSetting>? UserSettings { get; set; }
#nullable restore
#else
        public List<global::AITGraph.Sdk.Models.CloudPcUserSetting> UserSettings { get; set; }
#endif
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::AITGraph.Sdk.Models.VirtualEndpoint"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static new global::AITGraph.Sdk.Models.VirtualEndpoint CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::AITGraph.Sdk.Models.VirtualEndpoint();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public override IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>(base.GetFieldDeserializers())
            {
                { "auditEvents", n => { AuditEvents = n.GetCollectionOfObjectValues<global::AITGraph.Sdk.Models.CloudPcAuditEvent>(global::AITGraph.Sdk.Models.CloudPcAuditEvent.CreateFromDiscriminatorValue)?.AsList(); } },
                { "cloudPCs", n => { CloudPCs = n.GetCollectionOfObjectValues<global::AITGraph.Sdk.Models.CloudPC>(global::AITGraph.Sdk.Models.CloudPC.CreateFromDiscriminatorValue)?.AsList(); } },
                { "crossCloudGovernmentOrganizationMapping", n => { CrossCloudGovernmentOrganizationMapping = n.GetObjectValue<global::AITGraph.Sdk.Models.CloudPcCrossCloudGovernmentOrganizationMapping>(global::AITGraph.Sdk.Models.CloudPcCrossCloudGovernmentOrganizationMapping.CreateFromDiscriminatorValue); } },
                { "deviceImages", n => { DeviceImages = n.GetCollectionOfObjectValues<global::AITGraph.Sdk.Models.CloudPcDeviceImage>(global::AITGraph.Sdk.Models.CloudPcDeviceImage.CreateFromDiscriminatorValue)?.AsList(); } },
                { "externalPartnerSettings", n => { ExternalPartnerSettings = n.GetCollectionOfObjectValues<global::AITGraph.Sdk.Models.CloudPcExternalPartnerSetting>(global::AITGraph.Sdk.Models.CloudPcExternalPartnerSetting.CreateFromDiscriminatorValue)?.AsList(); } },
                { "galleryImages", n => { GalleryImages = n.GetCollectionOfObjectValues<global::AITGraph.Sdk.Models.CloudPcGalleryImage>(global::AITGraph.Sdk.Models.CloudPcGalleryImage.CreateFromDiscriminatorValue)?.AsList(); } },
                { "onPremisesConnections", n => { OnPremisesConnections = n.GetCollectionOfObjectValues<global::AITGraph.Sdk.Models.CloudPcOnPremisesConnection>(global::AITGraph.Sdk.Models.CloudPcOnPremisesConnection.CreateFromDiscriminatorValue)?.AsList(); } },
                { "organizationSettings", n => { OrganizationSettings = n.GetObjectValue<global::AITGraph.Sdk.Models.CloudPcOrganizationSettings>(global::AITGraph.Sdk.Models.CloudPcOrganizationSettings.CreateFromDiscriminatorValue); } },
                { "provisioningPolicies", n => { ProvisioningPolicies = n.GetCollectionOfObjectValues<global::AITGraph.Sdk.Models.CloudPcProvisioningPolicy>(global::AITGraph.Sdk.Models.CloudPcProvisioningPolicy.CreateFromDiscriminatorValue)?.AsList(); } },
                { "reports", n => { Reports = n.GetObjectValue<global::AITGraph.Sdk.Models.CloudPcReports>(global::AITGraph.Sdk.Models.CloudPcReports.CreateFromDiscriminatorValue); } },
                { "servicePlans", n => { ServicePlans = n.GetCollectionOfObjectValues<global::AITGraph.Sdk.Models.CloudPcServicePlan>(global::AITGraph.Sdk.Models.CloudPcServicePlan.CreateFromDiscriminatorValue)?.AsList(); } },
                { "sharedUseServicePlans", n => { SharedUseServicePlans = n.GetCollectionOfObjectValues<global::AITGraph.Sdk.Models.CloudPcSharedUseServicePlan>(global::AITGraph.Sdk.Models.CloudPcSharedUseServicePlan.CreateFromDiscriminatorValue)?.AsList(); } },
                { "snapshots", n => { Snapshots = n.GetCollectionOfObjectValues<global::AITGraph.Sdk.Models.CloudPcSnapshot>(global::AITGraph.Sdk.Models.CloudPcSnapshot.CreateFromDiscriminatorValue)?.AsList(); } },
                { "supportedRegions", n => { SupportedRegions = n.GetCollectionOfObjectValues<global::AITGraph.Sdk.Models.CloudPcSupportedRegion>(global::AITGraph.Sdk.Models.CloudPcSupportedRegion.CreateFromDiscriminatorValue)?.AsList(); } },
                { "userSettings", n => { UserSettings = n.GetCollectionOfObjectValues<global::AITGraph.Sdk.Models.CloudPcUserSetting>(global::AITGraph.Sdk.Models.CloudPcUserSetting.CreateFromDiscriminatorValue)?.AsList(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public override void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            base.Serialize(writer);
            writer.WriteCollectionOfObjectValues<global::AITGraph.Sdk.Models.CloudPcAuditEvent>("auditEvents", AuditEvents);
            writer.WriteCollectionOfObjectValues<global::AITGraph.Sdk.Models.CloudPC>("cloudPCs", CloudPCs);
            writer.WriteObjectValue<global::AITGraph.Sdk.Models.CloudPcCrossCloudGovernmentOrganizationMapping>("crossCloudGovernmentOrganizationMapping", CrossCloudGovernmentOrganizationMapping);
            writer.WriteCollectionOfObjectValues<global::AITGraph.Sdk.Models.CloudPcDeviceImage>("deviceImages", DeviceImages);
            writer.WriteCollectionOfObjectValues<global::AITGraph.Sdk.Models.CloudPcExternalPartnerSetting>("externalPartnerSettings", ExternalPartnerSettings);
            writer.WriteCollectionOfObjectValues<global::AITGraph.Sdk.Models.CloudPcGalleryImage>("galleryImages", GalleryImages);
            writer.WriteCollectionOfObjectValues<global::AITGraph.Sdk.Models.CloudPcOnPremisesConnection>("onPremisesConnections", OnPremisesConnections);
            writer.WriteObjectValue<global::AITGraph.Sdk.Models.CloudPcOrganizationSettings>("organizationSettings", OrganizationSettings);
            writer.WriteCollectionOfObjectValues<global::AITGraph.Sdk.Models.CloudPcProvisioningPolicy>("provisioningPolicies", ProvisioningPolicies);
            writer.WriteObjectValue<global::AITGraph.Sdk.Models.CloudPcReports>("reports", Reports);
            writer.WriteCollectionOfObjectValues<global::AITGraph.Sdk.Models.CloudPcServicePlan>("servicePlans", ServicePlans);
            writer.WriteCollectionOfObjectValues<global::AITGraph.Sdk.Models.CloudPcSharedUseServicePlan>("sharedUseServicePlans", SharedUseServicePlans);
            writer.WriteCollectionOfObjectValues<global::AITGraph.Sdk.Models.CloudPcSnapshot>("snapshots", Snapshots);
            writer.WriteCollectionOfObjectValues<global::AITGraph.Sdk.Models.CloudPcSupportedRegion>("supportedRegions", SupportedRegions);
            writer.WriteCollectionOfObjectValues<global::AITGraph.Sdk.Models.CloudPcUserSetting>("userSettings", UserSettings);
        }
    }
}
#pragma warning restore CS0618
