// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace AITGraph.Sdk.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class Post : global::AITGraph.Sdk.Models.OutlookItem, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>The collection of fileAttachment, itemAttachment, and referenceAttachment attachments for the post. Read-only. Nullable. Supports $expand.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::AITGraph.Sdk.Models.Attachment>? Attachments { get; set; }
#nullable restore
#else
        public List<global::AITGraph.Sdk.Models.Attachment> Attachments { get; set; }
#endif
        /// <summary>The contents of the post. This is a default property. This property can be null.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::AITGraph.Sdk.Models.ItemBody? Body { get; set; }
#nullable restore
#else
        public global::AITGraph.Sdk.Models.ItemBody Body { get; set; }
#endif
        /// <summary>Unique ID of the conversation. Read-only.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ConversationId { get; set; }
#nullable restore
#else
        public string ConversationId { get; set; }
#endif
        /// <summary>Unique ID of the conversation thread. Read-only.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ConversationThreadId { get; set; }
#nullable restore
#else
        public string ConversationThreadId { get; set; }
#endif
        /// <summary>The collection of open extensions defined for the post. Read-only. Nullable. Supports $expand.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::AITGraph.Sdk.Models.Extension>? Extensions { get; set; }
#nullable restore
#else
        public List<global::AITGraph.Sdk.Models.Extension> Extensions { get; set; }
#endif
        /// <summary>The from property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::AITGraph.Sdk.Models.Recipient? From { get; set; }
#nullable restore
#else
        public global::AITGraph.Sdk.Models.Recipient From { get; set; }
#endif
        /// <summary>Indicates whether the post has at least one attachment. This is a default property.</summary>
        public bool? HasAttachments { get; set; }
        /// <summary>The importance of a group post: low, normal, high.</summary>
        public global::AITGraph.Sdk.Models.Importance? Importance { get; set; }
        /// <summary>The earlier post that this post is replying to in the conversationThread. Read-only. Supports $expand.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::AITGraph.Sdk.Models.Post? InReplyTo { get; set; }
#nullable restore
#else
        public global::AITGraph.Sdk.Models.Post InReplyTo { get; set; }
#endif
        /// <summary>The mentions property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::AITGraph.Sdk.Models.Mention>? Mentions { get; set; }
#nullable restore
#else
        public List<global::AITGraph.Sdk.Models.Mention> Mentions { get; set; }
#endif
        /// <summary>The collection of multi-value extended properties defined for the post. Read-only. Nullable.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::AITGraph.Sdk.Models.MultiValueLegacyExtendedProperty>? MultiValueExtendedProperties { get; set; }
#nullable restore
#else
        public List<global::AITGraph.Sdk.Models.MultiValueLegacyExtendedProperty> MultiValueExtendedProperties { get; set; }
#endif
        /// <summary>Conversation participants that were added to the thread as part of this post.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::AITGraph.Sdk.Models.Recipient>? NewParticipants { get; set; }
#nullable restore
#else
        public List<global::AITGraph.Sdk.Models.Recipient> NewParticipants { get; set; }
#endif
        /// <summary>Specifies when the post was received. The DateTimeOffset type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z</summary>
        public DateTimeOffset? ReceivedDateTime { get; set; }
        /// <summary>Contains the address of the sender. The value of Sender is assumed to be the address of the authenticated user in the case when Sender is not specified. This is a default property.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::AITGraph.Sdk.Models.Recipient? Sender { get; set; }
#nullable restore
#else
        public global::AITGraph.Sdk.Models.Recipient Sender { get; set; }
#endif
        /// <summary>The collection of single-value extended properties defined for the post. Read-only. Nullable.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::AITGraph.Sdk.Models.SingleValueLegacyExtendedProperty>? SingleValueExtendedProperties { get; set; }
#nullable restore
#else
        public List<global::AITGraph.Sdk.Models.SingleValueLegacyExtendedProperty> SingleValueExtendedProperties { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::AITGraph.Sdk.Models.Post"/> and sets the default values.
        /// </summary>
        public Post() : base()
        {
            OdataType = "#microsoft.graph.post";
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::AITGraph.Sdk.Models.Post"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static new global::AITGraph.Sdk.Models.Post CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::AITGraph.Sdk.Models.Post();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public override IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>(base.GetFieldDeserializers())
            {
                { "attachments", n => { Attachments = n.GetCollectionOfObjectValues<global::AITGraph.Sdk.Models.Attachment>(global::AITGraph.Sdk.Models.Attachment.CreateFromDiscriminatorValue)?.AsList(); } },
                { "body", n => { Body = n.GetObjectValue<global::AITGraph.Sdk.Models.ItemBody>(global::AITGraph.Sdk.Models.ItemBody.CreateFromDiscriminatorValue); } },
                { "conversationId", n => { ConversationId = n.GetStringValue(); } },
                { "conversationThreadId", n => { ConversationThreadId = n.GetStringValue(); } },
                { "extensions", n => { Extensions = n.GetCollectionOfObjectValues<global::AITGraph.Sdk.Models.Extension>(global::AITGraph.Sdk.Models.Extension.CreateFromDiscriminatorValue)?.AsList(); } },
                { "from", n => { From = n.GetObjectValue<global::AITGraph.Sdk.Models.Recipient>(global::AITGraph.Sdk.Models.Recipient.CreateFromDiscriminatorValue); } },
                { "hasAttachments", n => { HasAttachments = n.GetBoolValue(); } },
                { "importance", n => { Importance = n.GetEnumValue<global::AITGraph.Sdk.Models.Importance>(); } },
                { "inReplyTo", n => { InReplyTo = n.GetObjectValue<global::AITGraph.Sdk.Models.Post>(global::AITGraph.Sdk.Models.Post.CreateFromDiscriminatorValue); } },
                { "mentions", n => { Mentions = n.GetCollectionOfObjectValues<global::AITGraph.Sdk.Models.Mention>(global::AITGraph.Sdk.Models.Mention.CreateFromDiscriminatorValue)?.AsList(); } },
                { "multiValueExtendedProperties", n => { MultiValueExtendedProperties = n.GetCollectionOfObjectValues<global::AITGraph.Sdk.Models.MultiValueLegacyExtendedProperty>(global::AITGraph.Sdk.Models.MultiValueLegacyExtendedProperty.CreateFromDiscriminatorValue)?.AsList(); } },
                { "newParticipants", n => { NewParticipants = n.GetCollectionOfObjectValues<global::AITGraph.Sdk.Models.Recipient>(global::AITGraph.Sdk.Models.Recipient.CreateFromDiscriminatorValue)?.AsList(); } },
                { "receivedDateTime", n => { ReceivedDateTime = n.GetDateTimeOffsetValue(); } },
                { "sender", n => { Sender = n.GetObjectValue<global::AITGraph.Sdk.Models.Recipient>(global::AITGraph.Sdk.Models.Recipient.CreateFromDiscriminatorValue); } },
                { "singleValueExtendedProperties", n => { SingleValueExtendedProperties = n.GetCollectionOfObjectValues<global::AITGraph.Sdk.Models.SingleValueLegacyExtendedProperty>(global::AITGraph.Sdk.Models.SingleValueLegacyExtendedProperty.CreateFromDiscriminatorValue)?.AsList(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public override void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            base.Serialize(writer);
            writer.WriteCollectionOfObjectValues<global::AITGraph.Sdk.Models.Attachment>("attachments", Attachments);
            writer.WriteObjectValue<global::AITGraph.Sdk.Models.ItemBody>("body", Body);
            writer.WriteStringValue("conversationId", ConversationId);
            writer.WriteStringValue("conversationThreadId", ConversationThreadId);
            writer.WriteCollectionOfObjectValues<global::AITGraph.Sdk.Models.Extension>("extensions", Extensions);
            writer.WriteObjectValue<global::AITGraph.Sdk.Models.Recipient>("from", From);
            writer.WriteBoolValue("hasAttachments", HasAttachments);
            writer.WriteEnumValue<global::AITGraph.Sdk.Models.Importance>("importance", Importance);
            writer.WriteObjectValue<global::AITGraph.Sdk.Models.Post>("inReplyTo", InReplyTo);
            writer.WriteCollectionOfObjectValues<global::AITGraph.Sdk.Models.Mention>("mentions", Mentions);
            writer.WriteCollectionOfObjectValues<global::AITGraph.Sdk.Models.MultiValueLegacyExtendedProperty>("multiValueExtendedProperties", MultiValueExtendedProperties);
            writer.WriteCollectionOfObjectValues<global::AITGraph.Sdk.Models.Recipient>("newParticipants", NewParticipants);
            writer.WriteDateTimeOffsetValue("receivedDateTime", ReceivedDateTime);
            writer.WriteObjectValue<global::AITGraph.Sdk.Models.Recipient>("sender", Sender);
            writer.WriteCollectionOfObjectValues<global::AITGraph.Sdk.Models.SingleValueLegacyExtendedProperty>("singleValueExtendedProperties", SingleValueExtendedProperties);
        }
    }
}
#pragma warning restore CS0618
