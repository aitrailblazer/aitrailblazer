@page "/profile"
@rendermode InteractiveServer

@attribute [Authorize]
@using SmartComponents
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Authorization
@using Microsoft.Identity.Web
@using AITGraph.Sdk.Models
@using CognitiveServices.Sdk.News.Search;
@using CognitiveServices.Sdk.News.Trendingtopics;
@using CognitiveServices.Sdk.Models;
@using AITrailBlazer.Web.Services
@using aitrailblazer.net.Services
@using aitrailblazer.net.Models
@using SearchSdk = CognitiveServices.Sdk.News.Search;
@using TrendingSdk = CognitiveServices.Sdk.News.Trendingtopics;
@using System.Text.Json; 
@using aitrailblazer.net.Models; 
@using OurNewsArticle = aitrailblazer.net.Models.NewsArticle
@using ExternalNewsArticle = CognitiveServices.Sdk.Models.NewsArticle
@using Newtonsoft.Json;

@using Markdig
@inject AITGraphService GraphService
@inject AITGraphService GraphService

@inject NavigationManager NavigationManager
@inject AzureOpenAIHandler azureOpenAIHandler
@inject BingNewsService BingNewsService
@inject IJSRuntime JS
@using GraphMessage = AITGraph.Sdk.Models.Message

@using Microsoft.AspNetCore.Components.Web

@if (isLoading)
{
    <p><em>Loading...</em></p>
}
else if (error != null)
{
    <div class="alert alert-danger" role="alert">
        @error
    </div>
}
else if (user != null)
{
    <FluentCard MinimalStyle="true" Width="1280px" Height="640px" Style="border: 2px solid var(--accent-fill-rest); padding: 20px;" Class="fluent-card-user-details-size">
        <div style="display: flex; align-items: center;">
            @if (userPhotoBase64 != null)
            {
                <img src="data:image/jpeg;base64,@userPhotoBase64" alt="User Photo"
                     style="width: 100px; height: 100px; object-fit: cover; border-radius: 50%; margin-right: 20px;" />
            }
            else
            {
                <div style="width: 100px; height: 100px; background-color: #ccc; border-radius: 50%; display: flex; align-items: center; justify-content: center; margin-right: 20px;">
                    <span style="font-size: 50px; color: white;">ðŸ‘¤</span>
                </div>
            }

            <div>
                <h2>Welcome, @GetUserFullName()!</h2>
                <p>@GetUserEmail()</p>
                <p style="color: gray;">We are glad to have you here.</p>
            </div>
        </div>

        <!-- Input Section for Azure OpenAI Query -->
        <div style="margin-top: 20px; display: flex; align-items: center; max-width: 820px;">
            <FluentStack Orientation="Orientation.Vertical" HorizontalAlignment="@Horizontal" VerticalAlignment="@Vertical" VerticalGap="1">
                <FluentStack Orientation="Orientation.Horizontal" HorizontalAlignment="@Horizontal" VerticalAlignment="@Vertical" VerticalGap="1">
                    <FluentTextArea 
                        Typo="Typography.Body" 
                        @bind-Value="@userQuery" 
                        @oninput="HandleInput" 
                        Placeholder="Enter your question here..."
                        style="flex: 1; max-height: 120px; overflow-y: auto;" 
                        Class="card-splitter alert alert-primary content-splitter-font-size"
                        Appearance="FluentInputAppearance.Filled" 
                        Autofocus="@Autofocus" 
                        Minlength="@MinLength"
                        MaxLength="@MaxLength" 
                        Rows="@Rows" 
                        id="fluentTextArea" />
                    
                    <FluentButton 
                        IconStart="@(new Icons.Filled.Size32.ArrowCircleUp())" 
                        Class="FluentButton"
                        OnClick="@OnButtonASAPTimeClicked" 
                        >
                        Send
                    </FluentButton>
                </FluentStack>
                @if (isDeleting)
                {
                    <FluentLabel Typo="Typography.Body">Please wait...</FluentLabel>
                    <FluentProgress Class="progress-top" style="color: var(--themePrimary);"></FluentProgress>
                }
                @if (Submitting)
                {
                    <FluentLabel Typo="Typography.Body">Please wait...</FluentLabel>
                    <FluentProgress Class="progress-top" style="color: var(--themePrimary);"></FluentProgress>
                } 
                else 
                {
                    @response
@if (showResponse)
{
    @if (!string.IsNullOrEmpty(response))
    {
        <div class="alert alert-info">@response</div>
    }

    @if (newsArticles != null && newsArticles.Any())
    {
        <FluentCard MinimalStyle="false" Class="response-card" Width="1840px" Height="100%"
                    Style="@($"background-color: #FFFFFF; border: 1px solid #ccc; position: absolute; top: 10px; left: 50%; transform: translateX(-50%); z-index: 9999;")">
            <div style="display: flex; justify-content: space-between; align-items: center;">
                <FluentLabel Typo="Typography.Subject" Class="response-label">
                    News Articles:
                </FluentLabel>
                <FluentButton 
                    IconStart="@(new Icons.Filled.Size24.Dismiss())" 
                    Appearance="Appearance.Stealth" 
                    Class="close-button"
                    OnClick="@CloseResponse"
                    aria-label="Close Response">
                </FluentButton>
            </div>
            <div class="news-articles-container" style="overflow-y: auto; max-height: 80vh;">
                @foreach (var article in newsArticles)
                {
                    <FluentCard Class="article-card" MinimalStyle="false" Width="780px" Height="120px" Style="margin-bottom: 16px; padding: 16px;">
                        <div style="display: flex;">
                            @if (!string.IsNullOrEmpty(article.ThumbnailUrl))
                            {
                                <img src="@article.ThumbnailUrl" alt="Thumbnail" style="max-width: 120px; margin-right: 16px;" />
                            }
                            <div>
                                <FluentAnchor Href="@article.Url" Target="_blank" Style="font-size: 20px; font-weight: bold; color: #0078D4; text-decoration: none;">
                                    @article.Name
                                </FluentAnchor>
                                <p style="margin-top: 8px;">@article.Description</p>
                            </div>
                        </div>
                    </FluentCard>
                }
            </div>
        </FluentCard>
    }
}

                }
            </FluentStack>
        </div>

        <FluentTabs @bind-ActiveTabId="@activeTabId" OnTabChange="HandleOnTabChange">
            <!-- Emails Tab -->
            <FluentTab Id="Emails-tab">
                <Header>
                    <FluentIcon Value="@(new Icons.Regular.Size20.Mail())" />
                    <FluentLabel Typo="Typography.Body" Appearance="Appearance.Stealth" Color="@Color.Neutral">
                        Mail
                    </FluentLabel>
                </Header>
                <Content>
                    <FluentLabel Typo="Typography.H4" Appearance="Appearance.Stealth" Color="@Color.Neutral">
                        Your Emails in Outlook
                    </FluentLabel>
                    <FluentLabel Typo="Typography.Body" Appearance="Appearance.Stealth" Color="@Color.Neutral">
                        Access and manage your Outlook emails directly from this tab.
                    </FluentLabel>
                    <FluentStack Orientation="Orientation.Horizontal" HorizontalAlignment="@Horizontal" VerticalAlignment="@Vertical">
                        <FluentTextArea 
                            Typo="Typography.Body" 
                            Class="card-splitter alert alert-primary content-splitter-font-size"
                            Appearance="FluentInputAppearance.Filled" 
                            @bind-Value="@searchQuery" 
                            Placeholder="Search emails..."
                            Style="width: 1600px;"
                            @oninput="OnSearchInputChanged" 
                            Autofocus="@Autofocus" 
                            Minlength="@MinLength"
                            MaxLength="@MaxLength" 
                            Rows="@Rows" />
                        <FluentStack Orientation="Orientation.Vertical" HorizontalAlignment="@Horizontal" VerticalAlignment="@Vertical">

                        @if (isSearch)
                        {
                            <FluentLabel Typo="Typography.Body">Please wait...</FluentLabel>
                            <FluentProgress Class="progress-top" style="color: var(--themePrimary);"></FluentProgress>
                        }
                        <FluentButton 
                            OnClick="@SearchEmails" 
                            Appearance="Appearance.Accent"
                            Disabled="@string.IsNullOrWhiteSpace(searchQuery)"
                            IconStart="@(new Icons.Regular.Size20.Search())"
                            aria-label="Search Emails">
                            Search
                        </FluentButton>

                        @if (!string.IsNullOrWhiteSpace(searchQuery))
                        {
                            <FluentButton 
                                OnClick="@ClearSearchAndReloadEmails" 
                                Appearance="Appearance.Lightweight"
                                IconStart="@(new Icons.Regular.Size20.Delete())"
                                aria-label="Clear Search">
                                Clear Search
                            </FluentButton>
                        }
                        </FluentStack>

                    </FluentStack>
                    @if (emailsWithComputedProperties != null && emailsWithComputedProperties.Any())
                    {
                        <div style="max-height: 640px; overflow-y: auto;" tabindex="-1">

                            <FluentDataGrid 
                            Items="@emailsWithComputedProperties.AsQueryable()" 
                            TGridItem="EmailViewModel"
                            ShowHover="true" 
                            TGridItem="EmailViewModel"
                            SelectionMode="DataGridSelectionMode.Single" 
                            SelectedItemsChanged="OnSelectedEmailChanged"
                            GenerateHeader="GenerateHeaderOption.Sticky">
                                <PropertyColumn 
                                Property="@(e => e.SenderName)" 
                                Title="Sender" Sortable="true" 
                                Width="200px" />

                                <PropertyColumn 
                                Property="@(e => e.Subject)" 
                                Title="Subject" 
                                Sortable="true" 
                                Width="300px" />

                                <PropertyColumn 
                                Property="@(e => e.ReceivedDateTimeFormatted)" 
                                Title="Received" 
                                Sortable="true" 
                                Width="150px" />
                                <!-- Actions Column -->
                                <TemplateColumn 
                                    Title="Actions" 
                                    Width="100px">
                                    <ChildContent Context="emailViewModel">
                                        <FluentButton 
                                            OnClick="@(() => OpenEmailDialog(emailViewModel))" 
                                            Appearance="Appearance.Stealth" 
                                            Size="Size.Small"
                                            IconStart="@(new Icons.Regular.Size20.Eye())"
                                            class="text-gray-500 hover:text-gray-700">
                                            View
                                        </FluentButton>
                                    </ChildContent>
                                </TemplateColumn>
                            </FluentDataGrid>
                        </div>

                     }
                    else
                    {
                        <p>No emails available</p>
                    }

                    <!-- Email Content Dialog -->
                    @if (selectedEmail != null)
                    {
                        <FluentDialog Id="emailContentDialog" Visible="true" OnDismiss="CloseEmailDialog" Style="width: 80vw; max-height: 420px; overflow: auto;">
                            <div style="max-height: 70vh; overflow-y: auto;">
                            <FluentButton Appearance="Appearance.Accent" OnClick="@(() => CopyEmailToClipboard())">
                                Copy to Clipboard
                            </FluentButton>
                                <h3>@selectedEmail.Subject</h3>
                                <p><strong>From:</strong> @selectedEmail.From?.EmailAddress?.Name</p>
                                <p><strong>To:</strong> @(selectedEmail.ToRecipients != null && selectedEmail.ToRecipients.Any()
                                    ? string.Join(", ", selectedEmail.ToRecipients.Select(r => r.EmailAddress.Name))
                                    : "No recipients")</p>
                                <p><strong>Received:</strong> @selectedEmail.ReceivedDateTime?.ToLocalTime().ToString("g")</p>
                                <pre style="white-space: pre-wrap; padding: 10px; background-color: #f5f5f5; border: 1px solid #ddd; font-size: 16px; color: black;">
                                    @if (!string.IsNullOrEmpty(selectedEmail.BodyContent))
                                    {
                                        @if (selectedEmail.BodyContentType == BodyType.Html)
                                        {
                                            @((MarkupString)selectedEmail.BodyContent)
                                        }
                                        else
                                        {
                                            @selectedEmail.BodyContent
                                        }
                                    }
                                    else
                                    {
                                        <em>No content available</em>
                                    }
                                </pre>
                            </div>

                            <FluentButton Appearance="Appearance.Accent" OnClick="@CloseEmailDialog">Close</FluentButton>
                        </FluentDialog>
                    }
                </Content>
            </FluentTab>

            <!-- Calendar Tab -->
            <FluentTab Id="Calendar-tab">
                <Header>
                    <FluentIcon Value="@(new Icons.Regular.Size20.Calendar())" />
                    <FluentLabel Typo="Typography.Body" Appearance="Appearance.Stealth" Color="@Color.Neutral">
                        Calendar
                    </FluentLabel>
                </Header>
                <Content>
                    <FluentLabel Typo="Typography.H4" Appearance="Appearance.Stealth" Color="@Color.Neutral">
                        Your Outlook Calendar
                    </FluentLabel>
                    <FluentLabel Typo="Typography.Body" Appearance="Appearance.Stealth" Color="@Color.Neutral">
                        Access and manage your Outlook calendar directly from this tab.
                    </FluentLabel>
                    <!-- Button to open the event creation dialog -->
                    <FluentButton 
                        OnClick="@OpenNewEventDialog" 
                        Appearance="Appearance.Accent"
                        IconStart="@(new Icons.Regular.Size20.AddCircle())"
                        Size="Size.Small">
                        Create New Event
                    </FluentButton>
                    @if (calendarEventsWithComputedProperties != null && calendarEventsWithComputedProperties.Any())
                    {
                        <div style="max-height: 640px; overflow-y: auto;" tabindex="-1">
                            <FluentDataGrid 
                                Items="@calendarEventsWithComputedProperties.AsQueryable()" 
                                ShowHover="true" 
                                TGridItem="EventViewModel"
                                SelectionMode="DataGridSelectionMode.Single" 
                                SelectedItemsChanged="OnSelectedEventChanged"
                                GenerateHeader="GenerateHeaderOption.Sticky" 
                                Style="width: 820px;">
                                
                                <!-- Select Column with Fixed Width -->
                                <SelectColumn 
                                    TGridItem="EventViewModel" 
                                    SelectMode="DataGridSelectMode.Single" 
                                    Width="50px" />
                                
                                <!-- Event Subject Column -->
                                <PropertyColumn 
                                    Property="@(e => e.Subject)"
                                    Title="Event" 
                                    Sortable="true" 
                                    Width="250px" />
                                
                                <!-- Start Date Column -->
                                <PropertyColumn 
                                    Property="@(e => e.StartDateTimeFormatted)"
                                    Title="Start" 
                                    Sortable="true" 
                                    Width="150px" />
                                
                                <!-- End Date Column -->
                                <PropertyColumn 
                                    Property="@(e => e.EndDateTimeFormatted)"
                                    Title="End" 
                                    Sortable="true" 
                                    Width="150px" />
                                
                                <!-- Actions Column -->
                                <TemplateColumn 
                                    Title="Actions" 
                                    Width="200px">
                                    <ChildContent Context="eventViewModel">
                                        <FluentStack Orientation="Orientation.Horizontal" HorizontalGap="5">

                                            <FluentButton 
                                                OnClick="@(() => OpenEventDialog(eventViewModel))" 
                                                Appearance="Appearance.Stealth" 
                                                Size="Size.Small"
                                                IconStart="@(new Icons.Regular.Size20.Eye())"
                                                class="text-gray-500 hover:text-gray-700">
                                                View
                                            </FluentButton>
                                            <!-- Delete Event Button -->
                                            <FluentButton 
                                                OnClick="() => DeleteEventAsync(eventViewModel.Id)" 
                                                Appearance="Appearance.Stealth" 
                                                Size="Size.Small"
                                                IconStart="@(new Icons.Regular.Size20.Delete())"
                                                class="text-gray-500 hover:text-gray-700">
                                                Delete
                                            </FluentButton>
                                        </FluentStack>
                                    </ChildContent>
                                </TemplateColumn>
                                
                            </FluentDataGrid>
                        </div>
                    }
                    else
                    {
                        <p>No events available</p>
                    }
                        <!-- Event Details Dialog -->
@if (selectedEvent != null)
{
    <FluentDialog 
        Visible="true" 
        OnDismiss="CloseEventDetailsDialog" 
        Class="dialog-container">
        
        <!-- Wrapper Div for Flex Layout -->
        <div class="dialog-wrapper">
            
            <!-- Scrollable Content Area -->
            <div class="dialog-content">
                <h3>@selectedEvent.Subject</h3>
                
                <!-- Event Subject -->
                <p><strong>Event Subject:</strong> @selectedEvent.Subject</p>
                
                <!-- Event Start Date/Time -->
                <p><strong>Start Date:</strong> @selectedEvent.StartDateTimeFormatted.Split(' ')[0]</p>
                <p><strong>Start Time:</strong> @selectedEvent.StartDateTimeFormatted.Split(' ')[1]</p>
                
                <!-- Event End Date/Time -->
                <p><strong>End Date:</strong> @selectedEvent.EndDateTimeFormatted.Split(' ')[0]</p>
                <p><strong>End Time:</strong> @selectedEvent.EndDateTimeFormatted.Split(' ')[1]</p>
                
                <!-- Event Location -->
                <p><strong>Location:</strong> @(!string.IsNullOrWhiteSpace(selectedEvent.Location) ? selectedEvent.Location : "N/A")</p>
                
                <!-- Event Attendees -->
                <p><strong>Attendees:</strong></p>
                <ul>
                    @if (selectedEvent.Attendees != null && selectedEvent.Attendees.Any() && selectedEvent.Attendees[0] != "No attendees")
                    {
                        @foreach (var attendee in selectedEvent.Attendees)
                        {
                            <li>@attendee</li>
                        }
                    }
                    else
                    {
                        <li>No attendees</li>
                    }
                </ul>

                <!-- Display Recurrence Pattern if available -->
                <p><strong>Recurrence:</strong> 
                    @if (selectedEvent.OriginalEvent.Recurrence != null)
                    {
                        @selectedEvent.OriginalEvent.Recurrence.Pattern.Type.ToString()
                    }
                    else
                    {
                        <span>None</span>
                    }
                </p>

                <!-- Display Event Categories -->
                <p><strong>Categories:</strong> 
                    @if (selectedEvent.OriginalEvent.Categories != null && selectedEvent.OriginalEvent.Categories.Any())
                    {
                        @string.Join(", ", selectedEvent.OriginalEvent.Categories)
                    }
                    else
                    {
                        <span>No categories</span>
                    }
                </p>

                <!-- Display Event Description -->
                <p><strong>Description:</strong></p>
                <div style="white-space: normal; padding: 10px; background-color: #f5f5f5; border: 1px solid #ddd;">
                    @((MarkupString)(!string.IsNullOrWhiteSpace(selectedEvent.Description) ? selectedEvent.Description : "No description available"))
                </div>
            </div>
            
            <!-- Fixed Footer with Close Button -->
            <div class="dialog-footer">
            <FluentButton 
                Appearance="Appearance.Stealth" 
                IconStart="@(new Icons.Regular.Size20.Dismiss())" 
                OnClick="@CloseEventDetailsDialog" 
                class="text-gray-500 hover:text-gray-700">
                Cancel
            </FluentButton>
            </div>
        </div>
    </FluentDialog>
}

                        <!-- Event Creation Dialog -->
                        @if (isEventDialogVisible)
                        {
                            <FluentDialog Visible="true" OnDismiss="CloseNewEventDialog">
                                <FluentCard MinimalStyle="true" Width="640px" Height="100%">
                                    <FluentHeader>Create New Event</FluentHeader>
                                    <EditForm Model="@newEvent">
                                        <DataAnnotationsValidator />
                                        <ValidationSummary class="mb-4 text-red-600" />
                                        <form class="default-form rounded-lg bg-white p-8 shadow-xl mb-12">
                                            <div class="grid gap-8">
                                                <FluentStack Orientation="Orientation.Vertical" HorizontalAlignment="@Horizontal" VerticalAlignment="@Vertical">

                                                    <!-- Event Subject -->
                                                    <div>
                                                        <label for="EventSubject" class="block text-sm font-medium text-gray-700 mb-2">Event Subject</label>
                                                        <InputText id="EventSubject" class="mt-1 block w-full rounded-lg" 
                                                                @bind-Value="newEvent.Subject" 
                                                                data-smartpaste-description="This is the title or subject of the event or meeting."
                                                                style="width: 600px; max-width: 600px;" />
                                                    </div>

                                                    <!-- Event Start Date/Time -->
                                                    <div>
                                                        <label for="EventStartDateFromReceived" class="block text-sm font-medium text-gray-700 mb-2">Start Date</label>
                                                        <InputDate id="EventStartDateFromReceived" class="mt-1 block w-full rounded-lg" 
                                                                @bind-Value="newEventStartDate"
                                                                data-smartpaste-description="The start date of the event, in the format MM/DD/YYYY." />
                                                        
                                                        <label for="EventStartTimeFromReceived" class="block text-sm font-medium text-gray-700 mt-2">Start Time</label>
                                                        <select id="EventStartTimeFromReceived" class="mt-1 block w-full rounded-lg" 
                                                                @bind="selectedStartTime" 
                                                                data-smartpaste-description="The time the event starts, in the format HH:mm (24-hour clock).">
                                                            @foreach (var time in timeIntervals)
                                                            {
                                                                <option value="@time">@time</option>
                                                            }
                                                        </select>
                                                    </div>

                                                    <!-- Event End Date/Time -->
                                                    <div>
                                                        <label for="EventEndDateFromReceived" class="block text-sm font-medium text-gray-700 mb-2">End Date</label>
                                                        <InputDate id="EventEndDateFromReceived" class="mt-1 block w-full rounded-lg" 
                                                                @bind-Value="newEventEndDate" 
                                                                data-smartpaste-description="The end date of the event, in the format MM/DD/YYYY." />
                                                        
                                                        <label for="EventEndTimeFromReceived" class="block text-sm font-medium text-gray-700 mt-2">End Time</label>
                                                        <select id="EventEndTimeFromReceived" class="mt-1 block w-full rounded-lg" 
                                                                @bind="selectedEndTime"
                                                                data-smartpaste-description="The time the event ends, in the format HH:mm (24-hour clock).">
                                                            @foreach (var time in timeIntervals)
                                                            {
                                                                <option value="@time">@time</option>
                                                            }
                                                        </select>
                                                    </div>

                                                    <!-- Event Location -->
                                                    <div>
                                                        <label for="EventLocation" class="block text-sm font-medium text-gray-700 mb-2">Event Location</label>
                                                        <InputText id="EventLocation" class="mt-1 block w-full rounded-lg" 
                                                                @bind-Value="newEvent.Location.DisplayName" 
                                                                data-smartpaste-description="The location of the event, either physical or virtual, such as 'Conference Room A' or 'Microsoft Teams Meeting'."
                                                                style="width: 1200px; max-width: 600px;" />
                                                    </div>

                                                    <!-- Event Attendees -->
                                                    <div>
                                                        <label for="EventAttendees" class="block text-sm font-medium text-gray-700 mb-2">Attendees (comma-separated emails)</label>
                                                        <InputTextArea id="EventAttendees" class="mt-1 block w-full rounded-lg" 
                                                                    @bind-Value="attendeesInput" 
                                                                    data-smartpaste-description="A list of email addresses of people attending the event, separated by commas."
                                                                    Rows="5" 
                                                                    Placeholder="Enter attendee emails..." 
                                                                    style="width: 1200px; max-width: 600px;" />
                                                    </div>

                                                    <!-- Event Description -->
                                                    <div>
                                                        <label for="EventDescriptionFromBody" class="block text-sm font-medium text-gray-700 mb-2">Event Description</label>
                                                        <InputTextArea id="EventDescriptionFromBody" class="mt-1 block w-full rounded-lg" 
                                                                    @bind-Value="newEventBody" 
                                                                    data-smartpaste-description="A detailed description of the event or meeting, including the agenda or purpose."
                                                                    Rows="5" 
                                                                    Placeholder="Enter event description..." 
                                                                    style="width: 600px; max-width: 600px;" />
                                                    </div>
                                                </FluentStack>
                                            </div>

                                            <!-- SmartPasteButton for Clipboard Parsing -->
                                            <div class="flex gap-4 mt-10 justify-end items-center">
                                                <FluentIcon Value="@(new Icons.Regular.Size20.Sparkle())" Slot="start" />
                                                <SmartPasteButton IconStart="@(new Icons.Regular.Size20.DocumentSave())" />
                                            </div>
                                        </form>
                                    </EditForm>

                                    <FluentDialogActions class="mt-6">
                                        <FluentButton 
                                            Appearance="Appearance.Stealth" 
                                            IconStart="@(new Icons.Regular.Size20.Dismiss())" 
                                            OnClick="@CloseNewEventDialog" 
                                            class="text-gray-500 hover:text-gray-700">
                                            Cancel
                                        </FluentButton>
                                        <FluentButton 
                                            Appearance="Appearance.Accent" 
                                            IconStart="@(new Icons.Regular.Size20.Save())" 
                                            OnClick="@SaveEventAsync" 
                                            class="text-gray-500 hover:text-gray-700"
                                            Disabled="!IsFormValid()">
                                            Save
                                        </FluentButton>
                                    </FluentDialogActions>
                                </FluentCard>
                            </FluentDialog>

                        }
                </Content>
            </FluentTab>
            <!-- Contacts Tab -->
            <FluentTab Id="Contacts-tab">
                <Header>
                    <FluentIcon Value="@(new Icons.Regular.Size20.People())" />
                    <FluentLabel Typo="Typography.Body" Appearance="Appearance.Stealth" Color="@Color.Neutral">
                        Contacts
                    </FluentLabel>
                </Header>
                <Content>
                    <FluentLabel Typo="Typography.H4" Appearance="Appearance.Stealth" Color="@Color.Neutral">
                        Your Contacts
                    </FluentLabel>
                    <FluentLabel Typo="Typography.Body" Appearance="Appearance.Stealth" Color="@Color.Neutral">
                        Access and manage your contacts directly from this tab.
                    </FluentLabel>
                    <FluentButton 
                        OnClick="@OpenNewContactDialog" 
                        Appearance="Appearance.Accent"
                        IconStart="@(new Icons.Regular.Size20.PersonAdd())"
                        Size="Size.Small">
                        Add New Contact
                    </FluentButton>
                    @if (contactsWithComputedProperties != null && contactsWithComputedProperties.Any())
                    {
                        <div style="max-height: 640px; overflow-y: auto;" tabindex="-1">
                            <FluentDataGrid 
                                Items="@contactsWithComputedProperties.AsQueryable()" 
                                ShowHover="true" 
                                TGridItem="ContactViewModel"
                                SelectionMode="DataGridSelectionMode.Single" 
                                SelectedItemsChanged="OnSelectedContactChanged"
                                GenerateHeader="GenerateHeaderOption.Sticky" 
                                Style="width: 820px;">
                                
                                <!-- Contact Name Column -->
                                <PropertyColumn 
                                    Property="@(c => c.DisplayName)"
                                    Title="Name" 
                                    Sortable="true" 
                                    Width="200px" />
                                
                                <!-- Email Address Column -->
                                <PropertyColumn 
                                    Property="@(c => c.EmailAddressesFormatted)"
                                    Title="Email" 
                                    Sortable="true" 
                                    Width="250px" />
                                
                                <!-- Mobile Phone Column -->
                                <PropertyColumn 
                                    Property="@(c => c.MobilePhone)"
                                    Title="Mobile Phone" 
                                    Sortable="true" 
                                    Width="150px" />
                                
                                <!-- Actions Column -->
                                <TemplateColumn Title="Actions" Width="200px">
                                    <ChildContent Context="contactViewModel">
                                        <FluentStack Orientation="Orientation.Horizontal" HorizontalGap="5">
                                            <FluentButton 
                                                OnClick="() => OpenContactDialog(contactViewModel)" 
                                                Appearance="Appearance.Stealth" 
                                                Size="Size.Small"
                                                IconStart="@(new Icons.Regular.Size20.Edit())"
                                                class="text-gray-500 hover:text-gray-700">
                                                Edit
                                            </FluentButton>
                                            <FluentButton 
                                                OnClick="() => DeleteContactAsync(contactViewModel.Id)" 
                                                Appearance="Appearance.Stealth" 
                                                Size="Size.Small"
                                                IconStart="@(new Icons.Regular.Size20.Delete())"
                                                class="text-gray-500 hover:text-gray-700">
                                                Delete
                                            </FluentButton>
                                        </FluentStack>
                                    </ChildContent>
                                </TemplateColumn>
                                
                            </FluentDataGrid>
                        </div>
                    }
                    else
                    {
                        <p>No contacts available</p>
                    }

                    <!-- Contact Details Dialog -->
                    @if (selectedContact != null && isContactDetailsDialogVisible)
                    {
                        <FluentDialog @bind-Visible="isContactDetailsDialogVisible">
                            <FluentCard MinimalStyle="true" Width="640px" Height="100%" Style="border: 1px solid var(--accent-fill-rest); padding: 0px; margin-right: 0px;" Class="fluent-card-summary-details">
                                <FluentHeader>@(string.IsNullOrEmpty(selectedContact.Id) ? "Add New Contact" : "Edit Contact")</FluentHeader>
                                <EditForm Model="@selectedContact" OnValidSubmit="SaveContactAsync">
                                    <DataAnnotationsValidator />
                                    <ValidationSummary class="mb-4 text-red-600" />
                                    <form class="default-form rounded-lg bg-white p-8 shadow-xl mb-12">
                                        <div class="grid gap-8 md:grid-cols-2">
                                            <!-- Personal Information -->
                                            <div class="col-span-2">
                                                <h3 class="text-lg font-medium text-gray-900 mb-4">Personal Information</h3>
                                                <FluentStack Orientation="Orientation.Horizontal" HorizontalAlignment="@Horizontal" VerticalAlignment="@Vertical">
                                                    <div>
                                                        <label for="FirstName" class="block text-sm font-medium text-gray-700 mb-2">First Name</label>
                                                        <InputText id="FirstName" class="mt-1 block w-full rounded-lg border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm p-2" @bind-Value="@selectedContact.GivenName"></InputText>
                                                    </div>
                                                    <div>
                                                        <label for="LastName" class="block text-sm font-medium text-gray-700 mb-2">Last Name</label>
                                                        <InputText id="LastName" class="mt-1 block w-full rounded-lg border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm p-2" @bind-Value="@selectedContact.Surname"></InputText>
                                                        <ValidationMessage For="@(() => selectedContact.Surname)" />
                                                    </div>
                                                </FluentStack>
                                            </div>

                                            <!-- Contact Information -->
                                            <div class="col-span-2">
                                                <h3 class="text-lg font-medium text-gray-900 mb-4">Contact Information</h3>
                                                <FluentStack Orientation="Orientation.Horizontal" HorizontalAlignment="@Horizontal" VerticalAlignment="@Vertical">
                                                    <div>
                                                        <label for="email" class="block text-sm font-medium text-gray-700 mb-2">Email</label>
                                                        <InputText id="email" class="mt-1 block w-full rounded-lg border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm p-2" @bind-Value="@selectedContact.EmailAddress"></InputText>
                                                        <ValidationMessage For="@(() => selectedContact.EmailAddress)" />
                                                    </div>
                                                    <div>
                                                        <label for="phone" class="block text-sm font-medium text-gray-700 mb-2">Phone</label>
                                                        <InputText id="phone" class="mt-1 block w-full rounded-lg border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm p-2" @bind-Value="@selectedContact.MobilePhone"></InputText>
                                                        <ValidationMessage For="@(() => selectedContact.MobilePhone)" />
                                                    </div>
                                                </FluentStack>
                                            </div>

                                            <!-- Professional Information -->
                                            <div class="col-span-2">
                                                <h3 class="text-lg font-medium text-gray-900 mb-4">Professional Information</h3>
                                                <FluentStack Orientation="Orientation.Horizontal" HorizontalAlignment="@Horizontal" VerticalAlignment="@Vertical">
                                                    <div>
                                                        <label for="jobTitle" class="block text-sm font-medium text-gray-700 mb-2">Job Title</label>
                                                        <InputText id="jobTitle" class="mt-1 block w-full rounded-lg border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm p-2" @bind-Value="@selectedContact.JobTitle"></InputText>
                                                        <ValidationMessage For="@(() => selectedContact.JobTitle)" />
                                                    </div>
                                                    <div>
                                                        <label for="company" class="block text-sm font-medium text-gray-700 mb-2">Company</label>
                                                        <InputText id="company" class="mt-1 block w-full rounded-lg border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm p-2" @bind-Value="@selectedContact.CompanyName"></InputText>
                                                        <ValidationMessage For="@(() => selectedContact.CompanyName)" />
                                                    </div>
                                                </FluentStack>
                                            </div>

                                            <!-- Business Address -->
                                            <div class="col-span-2">
                                                <h3 class="text-lg font-medium text-gray-900 mb-4">Business Address</h3>
                                                <FluentStack Orientation="Orientation.Horizontal" HorizontalAlignment="@Horizontal" VerticalAlignment="@Vertical">
                                                    <div>
                                                        <label for="businessStreet" class="block text-sm font-medium text-gray-700 mb-2">Street</label>
                                                        <InputText id="businessStreet" class="mt-1 block w-full rounded-lg border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm p-2" @bind-Value="@selectedContact.BusinessAddress.Street"></InputText>
                                                    </div>
                                                    <div>
                                                        <label for="businessCity" class="block text-sm font-medium text-gray-700 mb-2">City</label>
                                                        <InputText id="businessCity" class="mt-1 block w-full rounded-lg border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm p-2" @bind-Value="@selectedContact.BusinessAddress.City"></InputText>
                                                    </div>
                                                </FluentStack>
                                                <FluentStack Orientation="Orientation.Horizontal" HorizontalAlignment="@Horizontal" VerticalAlignment="@Vertical">
                                                    <div>
                                                        <label for="businessState" class="block text-sm font-medium text-gray-700 mb-2">State</label>
                                                        <InputText id="businessState" class="mt-1 block w-full rounded-lg border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm p-2" @bind-Value="@selectedContact.BusinessAddress.State"></InputText>
                                                    </div>
                                                    <div>
                                                        <label for="businessPostalCode" class="block text-sm font-medium text-gray-700 mb-2">Postal Code</label>
                                                        <InputText id="businessPostalCode" class="mt-1 block w-full rounded-lg border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm p-2" @bind-Value="@selectedContact.BusinessAddress.PostalCode"></InputText>
                                                    </div>
                                                    <div>
                                                        <label for="businessCountry" class="block text-sm font-medium text-gray-700 mb-2">Country</label>
                                                        <InputText id="businessCountry" class="mt-1 block w-full rounded-lg border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm p-2" @bind-Value="@selectedContact.BusinessAddress.CountryOrRegion"></InputText>
                                                    </div>
                                                </FluentStack>
                                            </div>
                                        </div>
                                        <div class="flex gap-4 mt-10 justify-end items-center">
                                            <FluentIcon Value="@(new Icons.Regular.Size20.Sparkle())" Slot="start" />
                                            <SmartPasteButton IconStart="@(new Icons.Regular.Size20.DocumentSave())" />
                                        </div>    
                                    </form>
                                </EditForm>
                                <FluentDialogActions class="mt-6">
                                    <FluentButton Appearance="Appearance.Stealth" IconStart="@(new Icons.Regular.Size20.Dismiss())" OnClick="@CloseContactDialog" class="text-gray-500 hover:text-gray-700">Cancel</FluentButton>
                                    <FluentButton Appearance="Appearance.Stealth" IconStart="@(new Icons.Regular.Size20.Save())" OnClick="@SaveContactAsync" class="text-gray-500 hover:text-gray-700"
                                    Disabled="@(!IsAtLeastOneContactFieldFilled())">Save</FluentButton>
                                </FluentDialogActions>
                            </FluentCard>
                        </FluentDialog>
                    }
                </Content>
            </FluentTab>
            <!-- Additional Tabs can be added here -->
        </FluentTabs>
    </FluentCard>
}
else
{
    <p>User information could not be loaded.</p>
}

@code {

    public string Placeholder { get; set; } = "Enter command or text";
    public bool Autofocus { get; set; } = false;
    public int MinLength { get; set; } = 16;
    public int MaxLength { get; set; } = 1024;
    public int Rows { get; set; } = 1;

    private Profile user;
    private UserAccountInformation accountInfo;
    private List<GraphMessage> userMessages = new List<GraphMessage>();
    private CalendarEventsResult calendarEventsResult = new CalendarEventsResult();
    private List<EventViewModel> calendarEventsWithComputedProperties = new List<EventViewModel>();
    private List<EmailViewModel> emailsWithComputedProperties = new List<EmailViewModel>();
    private List<ContactViewModel> contactsWithComputedProperties = new List<ContactViewModel>();
    private ContactViewModel selectedContact;
    private ContactViewModel originalContact = new ContactViewModel(new Contact());
    private bool isContactDetailsDialogVisible = false;

    private bool isLoading = true;
    private string error;
    private string userPhotoBase64;
    private string activeTabId = "Emails-tab";
    private string response;
    private string formattedResponse;
    private int calculatedHeight;
    private bool showResponse = false;

    private string userQuery = string.Empty;

    // Changed from GraphMessage to EmailViewModel
    private EmailViewModel selectedEmail;
    // Changed from 'Event' to 'EventViewModel'
    private EventViewModel selectedEvent;
    private bool isInitialized = false;
    public bool Submitting { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (!isInitialized)
        {
            await LoadUserDataAsync();
            isInitialized = true;
        }
    }

    private async Task LoadUserDataAsync()
    {
        isLoading = true;
        error = null;

        try
        {
            user = await GraphService.GetCurrentUserProfileAsync();
            accountInfo = await GraphService.GetUserAccountInformationAsync();
            userMessages = await GraphService.GetRecentMessagesAsync(20);

            var startOfWeek = DateTime.Now;
            var endOfWeek = startOfWeek.AddDays(7);


            // Fetch calendar events
            calendarEventsResult = await GraphService.GetCalendarEventsAsync(20, startOfWeek, endOfWeek); // Get the next 20 events

            if (calendarEventsResult.Events != null && calendarEventsResult.Events.Any())
            {
                calendarEventsWithComputedProperties = calendarEventsResult.Events.Select(e => new EventViewModel(e)).ToList();
            }
            else
            {
                calendarEventsWithComputedProperties = new List<EventViewModel>();
            }

            // Create EmailViewModel list
            emailsWithComputedProperties = userMessages.Select(m => new EmailViewModel(m)).ToList();

            // Fetch the user's profile photo
            var photoStream = await GraphService.GetUserPhotoAsync();
            if (photoStream != null)
            {
                // Convert the photo stream to a Base64 string
                using (var memoryStream = new MemoryStream())
                {
                    await photoStream.CopyToAsync(memoryStream);
                    var photoBytes = memoryStream.ToArray();
                    userPhotoBase64 = Convert.ToBase64String(photoBytes);
                }
            }
            // Fetch contacts
            var contacts = await GraphService.GetUserContactsAsync(50);
            contactsWithComputedProperties = contacts.Select(c => new ContactViewModel(c)).ToList();
            response = await azureOpenAIHandler.GenerateTitleAsync("test","test");

     
        }
        catch (AuthenticationRequiredException)
        {
            RedirectToLogin();
        }
        catch (Exception ex)
        {
            error = $"Error loading user data: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }

    private void RedirectToLogin()
    {
        var returnUrl = Uri.EscapeDataString(NavigationManager.Uri);
        NavigationManager.NavigateTo($"/MicrosoftIdentity/Account/SignIn?returnUrl={returnUrl}", forceLoad: true);
    }

    private string GetUserFullName()
    {
        // Try to get the user's full name from the Names list
        if (user?.Names != null && user.Names.Any())
        {
            var primaryName = user.Names.FirstOrDefault();
            if (primaryName != null)
            {
                string firstName = primaryName.First ?? "";
                string lastName = primaryName.Last ?? "";
                if (!string.IsNullOrWhiteSpace(firstName) || !string.IsNullOrWhiteSpace(lastName))
                {
                    return $"{firstName} {lastName}".Trim();
                }
                else if (!string.IsNullOrWhiteSpace(primaryName.DisplayName))
                {
                    return primaryName.DisplayName;
                }
            }
        }

        // As a fallback, return accountInfo?.UserPrincipalName or "User"
        return accountInfo?.UserPrincipalName ?? "User";
    }

    private string GetUserEmail()
    {
        // Try to get the user's primary email from the Emails list
        if (user?.Emails != null && user.Emails.Any())
        {
            var primaryEmail = user.Emails.FirstOrDefault();
            if (primaryEmail != null)
            {
                return primaryEmail.Address ?? accountInfo?.UserPrincipalName ?? "";
            }
        }
        // As a fallback, return accountInfo?.UserPrincipalName or an empty string
        return accountInfo?.UserPrincipalName ?? "";
    }

    private string ParseAndFormatDateTime(string? dateTimeString)
    {
        if (string.IsNullOrEmpty(dateTimeString))
            return "N/A";

        if (DateTime.TryParse(dateTimeString, out DateTime dateTime))
        {
            return dateTime.ToLocalTime().ToString("g");
        }

        return dateTimeString; // Return the original string if parsing fails
    }

    // Event handler for handling input changes (optional)
    private void HandleInput(ChangeEventArgs e)
    {
        // Optional: Handle input changes if needed
        // Currently, @bind-Value takes care of updating userQuery
    }
    // List to hold the news articles
    private List<OurNewsArticle> newsArticles = new List<OurNewsArticle>();

  


  // Event handler for button click
    private async Task OnButtonASAPTimeClicked()
    {
        if (string.IsNullOrWhiteSpace(userQuery))
        {
            response = "Please enter a valid query.";
            showResponse = false; // Ensure the card is hidden if the query is invalid
            return;
        }

        try
        {
            Submitting = true;
            error = null;
            response = string.Empty;

            // Call the Azure OpenAI handler with the user's query
            var jsonResponse = await azureOpenAIHandler.ShowNewsAsync(userQuery);

            // Log the JSON response for debugging
            Console.WriteLine($"JSON Response: {jsonResponse}");

            // Deserialize JSON into NewsResponse object using Newtonsoft.Json
            var newsResponse = JsonConvert.DeserializeObject<NewsResponse>(jsonResponse);

            if (newsResponse != null && newsResponse.TotalResults > 0 && newsResponse.Articles != null)
            {
                newsArticles = newsResponse.Articles;
                showResponse = true;

                response = $"Found {newsResponse.TotalResults} articles for your query.";
            }
            else
            {
                showResponse = true;
                newsArticles = new List<OurNewsArticle>();
                response = "No news articles found for your query.";
            }
        }
        catch (Newtonsoft.Json.JsonException jsonEx)
        {
            response = $"Failed to parse news data: {jsonEx.Message}";
            showResponse = true;
            newsArticles = new List<OurNewsArticle>();
        }
        catch (Exception ex)
        {
            response = $"An error occurred while fetching news articles: {ex.Message}";
            showResponse = true;
            newsArticles = new List<OurNewsArticle>();
        }
        finally
        {
            Submitting = false;
        }
    }

    protected override void OnParametersSet()
    {
        // Dynamically adjust height based on response length
        calculatedHeight = CalculateHeight(response);
    }

    private int CalculateHeight(string responseText)
    {
        const int minHeight = 200; // Minimum height for short responses
        const int maxHeight = 500; // Maximum height for long responses
        const int charLimitPerLine = 100; // Estimated characters that fit in one line
        const int pixelsPerLine = 20; // Height in pixels for one line of text

        // If responseText is null or empty, return the minimum height
        if (string.IsNullOrEmpty(responseText))
        {
            return minHeight;
        }

        // Calculate how many lines the response will take
        int lineCount = (responseText.Length / charLimitPerLine) + 1;

        // Calculate the height based on the line count
        int calculatedHeight = lineCount * pixelsPerLine + 50; // Extra space for padding and controls

        // Clamp the height between min and max
        return Math.Clamp(calculatedHeight, minHeight, maxHeight);
    }

    // Event handler to close the response card
    private void CloseResponse()
    {
        showResponse = false;
    }

    private void HandleOnTabChange(FluentTab tabId)
    {
        // Optional: Handle tab changes if needed
    }

    // Email Selection Handler
    private void OnSelectedEmailChanged(IEnumerable<EmailViewModel> selectedItems)
    {
        selectedEmail = selectedItems.FirstOrDefault();
    }

    private void CloseEmailDialog()
    {
        selectedEmail = null;
    }
    private string searchQuery = "";
    private bool isSearchButtonDisabled = true;

    private void OnSearchInputChanged(ChangeEventArgs e)
    {
        searchQuery = e.Value?.ToString() ?? "";
        isSearchButtonDisabled = string.IsNullOrWhiteSpace(searchQuery);
        StateHasChanged();
    }

    private bool isSearch = false;

    private async Task SearchEmails()
    {
        isSearch = true;
        error = null;

        try
        {
            // Generate KQL query from natural language input
            string kqlQuery = await azureOpenAIHandler.GenerateKQLQuery(searchQuery);

            var searchResults = await GraphService.SearchMessagesAsync(searchQuery, 20);
            emailsWithComputedProperties = searchResults.Select(m => new EmailViewModel(m)).ToList();
        }
        catch (Exception ex)
        {
            error = $"Error searching emails: {ex.Message}";
        }
        finally
        {
            isSearch = false;
        }
    }
    private async Task ClearSearchAndReloadEmails()
    {
        // Clear the search query
        searchQuery = "";

        // Reset the email list
        isSearch = true;
        error = null;

        try
        {
            // Reload the original email list
            var messages = await GraphService.GetRecentMessagesAsync(20); // Adjust the count as needed
            emailsWithComputedProperties = messages.Select(m => new EmailViewModel(m)).ToList();
        }
        catch (Exception ex)
        {
            error = $"Error loading emails: {ex.Message}";
        }
        finally
        {
            isSearch = false;
        }

        // Ensure the UI updates
        StateHasChanged();
    }
 
    // Event Selection Handler
    private void OnSelectedEventChanged(IEnumerable<EventViewModel> selectedItems)
    {
        // Changed to assign EventViewModel instead of Event
        selectedEvent = selectedItems.FirstOrDefault();
    }

    private void CloseEventDetailsDialog()
    {
        selectedEvent = null;
    }

    // Changed parameter type from 'GraphMessage' to 'EmailViewModel'
    private void OpenEmailDialog(EmailViewModel emailViewModel)
    {
        selectedEmail = emailViewModel;
    }

    // Changed parameter type from 'Event' to 'EventViewModel'
    private void OpenEventDialog(EventViewModel evtViewModel)
    {
        selectedEvent = evtViewModel;
    }
    private async Task DeleteEventAsync(string eventId)
    {
        try
        {
            // Confirm the deletion with the user
            var confirmed = await JS.InvokeAsync<bool>("confirm", "Are you sure you want to delete this event?");
            if (!confirmed)
            {
                return;
            }

            // Call the GraphService to delete the event
            await GraphService.DeleteCalendarEventAsync(eventId);

            // Remove the event from the UI
            calendarEventsWithComputedProperties.RemoveAll(e => e.OriginalEvent.Id == eventId);
            StateHasChanged(); // Update the UI
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error deleting event: {ex.Message}");
            await JS.InvokeVoidAsync("alert", $"Error deleting event: {ex.Message}");
        }
    }

// Open and Close methods for Contact Dialog
    private void OpenContactDialog(ContactViewModel contactViewModel)
    {
        selectedContact = contactViewModel;
        isContactDetailsDialogVisible = true;
    }
    private void CloseContactDialog()
    {
        isContactDetailsDialogVisible = false;
        selectedContact = null;
    }

@code {
    private bool IsAtLeastOneContactFieldFilled()
    {
        return !string.IsNullOrWhiteSpace(selectedContact.GivenName) ||
            !string.IsNullOrWhiteSpace(selectedContact.Surname) ||
            !string.IsNullOrWhiteSpace(selectedContact.EmailAddress) ||
            !string.IsNullOrWhiteSpace(selectedContact.MobilePhone) ||
            !string.IsNullOrWhiteSpace(selectedContact.JobTitle) ||
            !string.IsNullOrWhiteSpace(selectedContact.CompanyName) ||
            (selectedContact.BusinessAddress != null &&
            (!string.IsNullOrWhiteSpace(selectedContact.BusinessAddress.Street) ||
                !string.IsNullOrWhiteSpace(selectedContact.BusinessAddress.City) ||
                !string.IsNullOrWhiteSpace(selectedContact.BusinessAddress.State) ||
                !string.IsNullOrWhiteSpace(selectedContact.BusinessAddress.PostalCode) ||
                !string.IsNullOrWhiteSpace(selectedContact.BusinessAddress.CountryOrRegion)));
    }
    public class ContactViewModel
{
    public string Id { get; set; }
    public Contact OriginalContact { get; set; }
    public string DisplayName { get; set; }
    public string GivenName { get; set; }
    public string Surname { get; set; }
    public string EmailAddress { get; set; }
    public string EmailAddressesFormatted { get; set; }
    public string MobilePhone { get; set; }
    public string BusinessPhonesFormatted { get; set; }
    public string HomePhonesFormatted { get; set; }
    public string CompanyName { get; set; }
    public string JobTitle { get; set; }
    public string OfficeLocation { get; set; }
    public string ImAddressesFormatted { get; set; }
    public string BirthdayFormatted { get; set; }
    public string NickName { get; set; }
    public string MiddleName { get; set; }
    public string PersonalNotes { get; set; }
    public string SpouseName { get; set; }
    public string Department { get; set; }
    public string Manager { get; set; }
    public string AssistantName { get; set; }
    public string YomiGivenName { get; set; }
    public string YomiSurname { get; set; }
    public string YomiCompanyName { get; set; }
    public PhysicalAddress BusinessAddress { get; set; }
    public string BusinessAddressFormatted { get; set; }
    public string HomeAddressFormatted { get; set; }
    public string OtherAddressFormatted { get; set; }
    public string Profession { get; set; }
    public string Title { get; set; }
    public string ChildrenFormatted { get; set; }
    public string Gender { get; set; }

    public ContactViewModel(Contact contact = null)
    {
        OriginalContact = contact ?? new Contact();
        Id = contact?.Id ?? "";
        DisplayName = contact?.DisplayName ?? "New Contact";
        GivenName = contact?.GivenName ?? "";
        Surname = contact?.Surname ?? "";
        EmailAddressesFormatted = contact?.EmailAddresses != null && contact.EmailAddresses.Any()
            ? string.Join(", ", contact.EmailAddresses.Select(e => e.Address))
            : "";
        EmailAddress = contact?.EmailAddresses != null && contact.EmailAddresses.Any()
                    ? contact.EmailAddresses.First().Address
                    : "";
        if (contact?.Phones != null && contact.Phones.Any())
        {
            MobilePhone = contact.Phones
                .FirstOrDefault(phone => phone.Type == PhoneType.Mobile)?.Number ?? "";
            BusinessPhonesFormatted = string.Join(", ", contact.Phones
                .Where(phone => phone.Type == PhoneType.Business)
                .Select(phone => phone.Number));
            HomePhonesFormatted = string.Join(", ", contact.Phones
                .Where(phone => phone.Type == PhoneType.Home)
                .Select(phone => phone.Number));
        }
        else
        {
            MobilePhone = "";
            BusinessPhonesFormatted = "";
            HomePhonesFormatted = "";
        }

        CompanyName = contact?.CompanyName ?? "";
        JobTitle = contact?.JobTitle ?? "";
        OfficeLocation = contact?.OfficeLocation ?? "";
        ImAddressesFormatted = contact?.ImAddresses != null && contact.ImAddresses.Any()
            ? string.Join(", ", contact.ImAddresses)
            : "";
        BirthdayFormatted = contact?.Birthday.HasValue == true
            ? contact.Birthday.Value.ToLocalTime().ToString("d")
            : "";
        NickName = contact?.NickName ?? "";
        MiddleName = contact?.MiddleName ?? "";
        PersonalNotes = contact?.PersonalNotes ?? "";
        SpouseName = contact?.SpouseName ?? "";
        Department = contact?.Department ?? "";
        Manager = contact?.Manager ?? "";
        AssistantName = contact?.AssistantName ?? "";
        YomiGivenName = contact?.YomiGivenName ?? "";
        YomiSurname = contact?.YomiSurname ?? "";
        YomiCompanyName = contact?.YomiCompanyName ?? "";

        if (contact?.PostalAddresses != null && contact.PostalAddresses.Any())
        {
            BusinessAddress = contact.PostalAddresses
                .FirstOrDefault(addr => addr.Type == PhysicalAddressType.Business);
            BusinessAddressFormatted = GetAddressFormatted(BusinessAddress);
            HomeAddressFormatted = GetAddressFormatted(contact.PostalAddresses
                .FirstOrDefault(addr => addr.Type == PhysicalAddressType.Home));
            OtherAddressFormatted = GetAddressFormatted(contact.PostalAddresses
                .FirstOrDefault(addr => addr.Type == PhysicalAddressType.Other));
        }
        else
        {
            BusinessAddress = new PhysicalAddress();
            BusinessAddressFormatted = "";
            HomeAddressFormatted = "";
            OtherAddressFormatted = "";
        }

        Profession = contact?.Profession ?? "";
        Title = contact?.Title ?? "";
        ChildrenFormatted = contact?.Children != null && contact.Children.Any()
            ? string.Join(", ", contact.Children)
            : "";
        Gender = contact?.Gender ?? "";
    }
    private string GetAddressFormatted(PhysicalAddress address)
    {
        if (address == null) return "N/A";

        var components = new List<string>
        {
            address.Street, address.City, address.State, address.PostalCode, address.CountryOrRegion
        }.Where(c => !string.IsNullOrWhiteSpace(c));

        return components.Any() ? string.Join(", ", components) : "N/A";
    }
}

private async Task SaveContactAsync()
{
    try
    {
        Contact contactToSave;
        if (string.IsNullOrEmpty(selectedContact.Id))
        {
            // This is a new contact
            contactToSave = new Contact
            {
                GivenName = selectedContact.GivenName,
                Surname = selectedContact.Surname,
                JobTitle = selectedContact.JobTitle,
                CompanyName = selectedContact.CompanyName,
                EmailAddresses = new List<TypedEmailAddress>
                {
                    new TypedEmailAddress
                    {
                        Address = selectedContact.EmailAddress,
                        Type = EmailType.Other // You can change this to the appropriate type if needed
                    }
                },
                Phones = new List<Phone>
                {
                    new Phone
                    {
                        Number = selectedContact.MobilePhone,
                        Type = PhoneType.Mobile
                    }
                },
                PostalAddresses = new List<PhysicalAddress>
                {
                    new PhysicalAddress
                    {
                        Street = selectedContact.BusinessAddress?.Street,
                        City = selectedContact.BusinessAddress?.City,
                        State = selectedContact.BusinessAddress?.State,
                        PostalCode = selectedContact.BusinessAddress?.PostalCode,
                        CountryOrRegion = selectedContact.BusinessAddress?.CountryOrRegion,
                        Type = PhysicalAddressType.Business
                    }
                }
            };

            var newContact = await GraphService.AddContactAsync(contactToSave);
            contactsWithComputedProperties.Add(new ContactViewModel(newContact));
        }
        else
        {
            // This is an existing contact
            contactToSave = new Contact
            {
                Id = selectedContact.Id,
                GivenName = selectedContact.GivenName,
                Surname = selectedContact.Surname,
                JobTitle = selectedContact.JobTitle,
                CompanyName = selectedContact.CompanyName,
                Phones = new List<Phone>
                {
                    new Phone
                    {
                        Number = selectedContact.MobilePhone,
                        Type = PhoneType.Mobile
                    }
                },
                PostalAddresses = new List<PhysicalAddress>
                {
                    new PhysicalAddress
                    {
                        Street = selectedContact.BusinessAddress?.Street,
                        City = selectedContact.BusinessAddress?.City,
                        State = selectedContact.BusinessAddress?.State,
                        PostalCode = selectedContact.BusinessAddress?.PostalCode,
                        CountryOrRegion = selectedContact.BusinessAddress?.CountryOrRegion,
                        Type = PhysicalAddressType.Business
                    }
                }
            };

            var updatedContact = await GraphService.UpdateContactAsync(selectedContact.Id, contactToSave);
            var index = contactsWithComputedProperties.FindIndex(c => c.Id == updatedContact.Id);
            if (index != -1)
            {
                contactsWithComputedProperties[index] = new ContactViewModel(updatedContact);
            }
        }

        CloseContactDialog();
        StateHasChanged();
    }
    catch (Exception ex)
    {
        Console.WriteLine($"Error saving contact: {ex.Message}");
    }
}
private string GetAddressFormatted(AITGraph.Sdk.Models.PhysicalAddress address)
        {
            if (address == null) return "N/A";

            var components = new List<string>
            {
                address.Street, address.City, address.State, address.PostalCode, address.CountryOrRegion
            }.Where(c => !string.IsNullOrWhiteSpace(c));

            return components.Any() ? string.Join(", ", components) : "N/A";
        }
    }

private void OpenNewContactDialog()
{
    selectedContact = new ContactViewModel(new Contact());
    isContactDetailsDialogVisible = true;
    StateHasChanged(); // Ensure the UI updates
}

private bool isDeleting = false;


private async Task DeleteContactAsync(string contactId)
{
    try
    {
        var confirmed = await JS.InvokeAsync<bool>("confirm", "Are you sure you want to delete this contact?");
        if (!confirmed)
        {
            return;
        }

        isDeleting = true;
        StateHasChanged();

        await GraphService.DeleteContactAsync(contactId);
        contactsWithComputedProperties.RemoveAll(c => c.Id == contactId);
    }
    catch (Exception ex)
    {
        Console.WriteLine($"Error deleting contact: {ex.Message}");
        await JS.InvokeVoidAsync("alert", $"Error deleting contact: {ex.Message}");
    }
    finally
    {
        isDeleting = false;
        StateHasChanged();
    }
}
public class EmailViewModel
{ 
    public GraphMessage OriginalMessage { get; set; }
    public string SenderName { get; set; }
    public string Subject { get; set; }
    public string ReceivedDateTimeFormatted { get; set; }

    // Properties for Body Content and Content Type
    public string BodyContent { get; set; }
    public BodyType BodyContentType { get; set; }

    // Exposed properties from OriginalMessage
    public Recipient From => OriginalMessage.From;
    public List<Recipient> ToRecipients => OriginalMessage.ToRecipients;
    public DateTimeOffset? ReceivedDateTime => OriginalMessage.ReceivedDateTime;

    // Event-Related Properties
    public string EventTitle { get; set; } // Can be populated from email subject
    public string EventDescription { get; set; } // Can be populated from email body
    public DateTimeOffset? EventStartTime { get; set; } // Can use ReceivedDateTime or parsed from email content
    public DateTimeOffset? EventEndTime { get; set; } // Start time + default duration
    public List<string> EventAttendeesEmails { get; set; } // Extract attendees from the 'To' field

    // Constructor to initialize the view model with email data
    public EmailViewModel(GraphMessage message)
    {
        OriginalMessage = message;
        SenderName = message.From?.EmailAddress?.Name ?? "Unknown";
        Subject = message.Subject ?? "No Subject";
        ReceivedDateTimeFormatted = message.ReceivedDateTime.HasValue
            ? message.ReceivedDateTime.Value.ToLocalTime().ToString("g")
            : "N/A";

        // Initialize BodyContent and BodyContentType
        BodyContent = message.Body?.Content ?? "";
        BodyContentType = message.Body?.ContentType ?? BodyType.Text;

        // Initialize event-related fields
        EventTitle = message.Subject ?? "New Event";
        EventDescription = message.Body?.Content ?? "";
        EventStartTime = message.ReceivedDateTime; // Use the email's received time as the event start time by default
        EventEndTime = EventStartTime?.AddMinutes(30); // Default event duration is 30 minutes
        EventAttendeesEmails = message.ToRecipients?.Select(r => r.EmailAddress?.Address).ToList() ?? new List<string>();
    }
}



// ViewModel for Events
public class EventViewModel
{
    public Event OriginalEvent { get; set; }
    public string Id => OriginalEvent?.Id; // Expose the Id of the original event
    public string Subject { get; set; }
    public string StartDateTimeFormatted { get; set; }
    public string EndDateTimeFormatted { get; set; }
    public string Location { get; set; }

    // Parsed DateTimeOffset properties
    public DateTimeOffset? StartDateTime { get; set; }
    public DateTimeOffset? EndDateTime { get; set; }

    // New properties for attendees and description
    public List<string> Attendees { get; set; }
    public string Description { get; set; }

    public EventViewModel(Event evt)
    {
        OriginalEvent = evt;
        Subject = evt.Subject ?? "No Subject";

        // Attempt to parse Start.DateTime
        if (DateTimeOffset.TryParse(evt.Start?.DateTime, out var startDt))
        {
            StartDateTime = startDt;
            StartDateTimeFormatted = startDt.ToLocalTime().ToString("g");
        }
        else
        {
            StartDateTime = null;
            StartDateTimeFormatted = "N/A";
        }

        // Attempt to parse End.DateTime
        if (DateTimeOffset.TryParse(evt.End?.DateTime, out var endDt))
        {
            EndDateTime = endDt;
            EndDateTimeFormatted = endDt.ToLocalTime().ToString("g");
        }
        else
        {
            EndDateTime = null;
            EndDateTimeFormatted = "N/A";
        }

        // Add location information
        Location = evt.Location?.DisplayName ?? "No location";

        // Initialize attendees list
        Attendees = evt.Attendees?.Select(a => 
            a.EmailAddress?.Name ?? a.EmailAddress?.Address ?? "Unknown Attendee")
            .ToList() ?? new List<string> { "No attendees" };

        // Set description
        Description = evt.Body?.Content ?? "No description available";
    }
}

    HorizontalAlignment Horizontal;
    VerticalAlignment Vertical;
    

}

@code {

    private bool IsFormValid()
    {
        // Check that Subject, StartDate, and EndDate are not empty, and are valid.
        bool hasValidBasicFields = !string.IsNullOrWhiteSpace(newEvent.Subject) 
                                && newEventStartDate.HasValue 
                                && newEventEndDate.HasValue;

        // Check that Location is not empty.
        bool hasValidLocation = !string.IsNullOrWhiteSpace(newEvent.Location?.DisplayName);

        // Check that there is at least one attendee entered.
        bool hasValidAttendees = !string.IsNullOrWhiteSpace(attendeesInput) 
                                && attendeesInput.Split(',').Any(email => !string.IsNullOrWhiteSpace(email.Trim()));

        // Ensure all fields are valid.
        return hasValidBasicFields && hasValidLocation && hasValidAttendees;
    }


    private DateTime? newEventStartDate { get; set; } = DateTime.Now;
    private string newEventStartTime { get; set; } = DateTime.Now.ToString("HH:mm");

    private DateTime? newEventEndDate { get; set; } = DateTime.Now.AddMinutes(30);
    private string newEventEndTime { get; set; } = DateTime.Now.AddMinutes(30).ToString("HH:mm");

    // Model for creating new event
    private Event newEvent = new Event
    {
        Start = new DateTimeTimeZone(),
        End = new DateTimeTimeZone(),
    };
    
    private bool isEventDialogVisible = false;
    
    // Open event creation dialog
    private void OpenNewEventDialog()
    {
        // Set current time as start and round it to the next 30-minute interval
        var startDateTime = RoundToNext30MinuteInterval(DateTime.Now); 
        var endDateTime = startDateTime.AddMinutes(30); // End time 30 minutes later

        // Initialize the time intervals for the dropdown
        timeIntervals = GenerateTimeIntervals();

        // Find the closest intervals that match the start and end times
        selectedStartTime = timeIntervals.FirstOrDefault(t => t == startDateTime.ToString("HH:mm"));
        selectedEndTime = timeIntervals.FirstOrDefault(t => t == endDateTime.ToString("HH:mm"));

        // Initialize a new event with proper Start, End, Location, and Attendees values
        newEvent = new Event
        {
            Subject = "", // Set an initial empty subject to prevent null errors
            Start = new DateTimeTimeZone
            {
                DateTime = startDateTime.ToString("yyyy-MM-ddTHH:mm:ss"), // Local start date and time
                TimeZone = TimeZoneInfo.Local.Id // Use the local time zone
            },
            End = new DateTimeTimeZone
            {
                DateTime = endDateTime.ToString("yyyy-MM-ddTHH:mm:ss"), // Local end date and time (30 mins later)
                TimeZone = TimeZoneInfo.Local.Id // Use the local time zone
            },
            Location = new Location
            {
                DisplayName = "Microsoft Teams Meeting" // Set an initial empty location
            },
            // Set the event description
            Body = new ItemBody
            {
                Content = ""
            },
            Attendees = new List<Attendee>() // Initialize with an empty attendees list
        };

        attendeesInput = ""; // Clear attendees input
        isEventDialogVisible = true;
    }
    private string clipboardContent = "";

    private async Task PasteClipboardContentIntoVariable()
    {
        // Call the JavaScript function to get clipboard content
        clipboardContent = await JS.InvokeAsync<string>("getClipboardText");

        // You can now use clipboardContent in your logic
        Console.WriteLine("Clipboard content: " + clipboardContent);
    }
    private DateTime RoundToNext30MinuteInterval(DateTime dateTime)
    {
        // Round the current time to the next 30-minute interval
        var minutes = dateTime.Minute;
        var adjustment = minutes % 30 == 0 ? 0 : 30 - (minutes % 30);
        return dateTime.AddMinutes(adjustment).AddSeconds(-dateTime.Second); // Remove seconds to clean time
    }


    private List<string> timeIntervals;
    private string selectedStartTime { get; set; }
    private string selectedEndTime { get; set; }

    private List<string> GenerateTimeIntervals()
    {
        var intervals = new List<string>();
        var start = new TimeSpan(0, 0, 0);  // 00:00
        var end = new TimeSpan(23, 59, 0);  // 23:59
        var increment = TimeSpan.FromMinutes(30);  // 30-minute intervals

        for (var time = start; time <= end; time = time.Add(increment))
        {
            intervals.Add(time.ToString(@"hh\:mm"));
        }

        return intervals;
    }
    // Close event creation dialog
    private void CloseNewEventDialog()
    {
        isEventDialogVisible = false;
    }

    private string newEventBody { get; set; } = ""; // Store the body content
    private string attendeesInput { get; set; } = string.Empty; // Holds attendee emails input

private async Task SaveEventAsync()
{
    try
    {
        // Set the event subject
        newEvent.Subject = string.IsNullOrWhiteSpace(newEvent.Subject) ? "No Subject" : newEvent.Subject;

        // Combine date and time for Start
        if (newEventStartDate.HasValue && !string.IsNullOrWhiteSpace(selectedStartTime))
        {
            newEvent.Start.DateTime = $"{newEventStartDate.Value:yyyy-MM-dd}T{selectedStartTime}";
            newEvent.Start.TimeZone = TimeZoneInfo.Local.Id;
        }

        // Combine date and time for End
        if (newEventEndDate.HasValue && !string.IsNullOrWhiteSpace(selectedEndTime))
        {
            newEvent.End.DateTime = $"{newEventEndDate.Value:yyyy-MM-dd}T{selectedEndTime}";
            newEvent.End.TimeZone = TimeZoneInfo.Local.Id;
        }

        // Set the location
        newEvent.Location = new Location
        {
            DisplayName = !string.IsNullOrWhiteSpace(newEvent.Location?.DisplayName) 
                ? newEvent.Location.DisplayName 
                : "No location"
        };

        // Process attendees input
        if (!string.IsNullOrWhiteSpace(attendeesInput))
        {
            var attendeesEmails = attendeesInput.Split(',')
                                                .Select(email => email.Trim())
                                                .Where(email => !string.IsNullOrWhiteSpace(email))
                                                .ToList();

            newEvent.Attendees = attendeesEmails.Select(email => new Attendee
            {
                EmailAddress = new EmailAddress { Address = email },
                Type = AttendeeType.Required
            }).ToList();
        }
        else
        {
            newEvent.Attendees = new List<Attendee>();
        }

        // Set the event description
        newEvent.Body = new ItemBody
        {
            ContentType = BodyType.Text,
            Content = string.IsNullOrWhiteSpace(newEventBody) ? "No description available" : newEventBody
        };

        // Call the service to create the event
        var result = await GraphService.CreateCalendarEventAsync(newEvent);

        if (result.CreatedEvent != null)
        {
            // Log the event properties for verification
            Console.WriteLine("Event Created:");
            Console.WriteLine($"Subject: {result.CreatedEvent.Subject}");
            Console.WriteLine($"Start: {result.CreatedEvent.Start.DateTime} ({result.CreatedEvent.Start.TimeZone})");
            Console.WriteLine($"End: {result.CreatedEvent.End.DateTime} ({result.CreatedEvent.End.TimeZone})");
            Console.WriteLine($"Location: {result.CreatedEvent.Location?.DisplayName}");
            Console.WriteLine($"Attendees: {string.Join(", ", result.CreatedEvent.Attendees.Select(a => a.EmailAddress.Address))}");
            Console.WriteLine($"Description: {result.CreatedEvent.Body?.Content}");

            // Add the created event to the list with computed properties
            calendarEventsWithComputedProperties.Add(new EventViewModel(result.CreatedEvent));
            CloseNewEventDialog();
            StateHasChanged();
        }
        else
        {
            error = result.ErrorMessage ?? "An error occurred while creating the event.";
        }
    }
    catch (Exception ex)
    {
        error = $"Error creating event: {ex.Message}";
    }
}


}
@code {
    private async Task CopyEmailToClipboard()
    {
        // Ensure that email has valid From and To fields
        var fromEmail = selectedEmail.From?.EmailAddress != null
            ? $"{selectedEmail.From.EmailAddress.Name} <{selectedEmail.From.EmailAddress.Address}>"
            : "Unknown Sender";

        var toEmails = selectedEmail.ToRecipients != null && selectedEmail.ToRecipients.Any()
            ? string.Join(", ", selectedEmail.ToRecipients.Select(r => r.EmailAddress != null 
                ? $"{r.EmailAddress.Name} <{r.EmailAddress.Address}>" 
                : "Unknown Recipient"))
            : "No recipients";

        // Combine From and To for Attendees
        var attendees = fromEmail + (toEmails != "No recipients" ? $", {toEmails}" : "");

        // Ensure that ReceivedDateTime is properly formatted
        var receivedDateTime = selectedEmail.ReceivedDateTime?.ToLocalTime().ToString("g") ?? "N/A";

        // Get the plain text version of the email body
        var bodyContent = string.IsNullOrEmpty(GetPlainText(selectedEmail))
            ? "No body content available."
            : GetPlainText(selectedEmail);

        // Prepare the email content to be copied
        var clipboardContent = $"Subject: {selectedEmail.Subject ?? "No subject"}\n" +
                            $"From: {fromEmail}\n" +
                            $"To: {toEmails}\n" +
                            $"Attendees: {attendees}\n" +  // Adding Attendees field
                            $"Received: {receivedDateTime}\n\n" +
                            $"Body:\n{bodyContent}";

        // Output for debugging (optional)
        Console.WriteLine("Clipboard Content:\n" + clipboardContent);

        // Call the JavaScript function to copy the content to the clipboard
        await JS.InvokeVoidAsync("copyToClipboard", clipboardContent);
    }



    // Method to remove HTML tags from email body content
    private string GetPlainText(EmailViewModel email)
    {
        if (email.BodyContentType == BodyType.Html)
        {
            // Remove HTML comments
            var plainText = System.Text.RegularExpressions.Regex.Replace(email.BodyContent, "<!--.*?-->", string.Empty, System.Text.RegularExpressions.RegexOptions.Singleline);

            // Remove HTML tags
            plainText = System.Text.RegularExpressions.Regex.Replace(plainText, "<.*?>", string.Empty);

            // Decode HTML entities (e.g., &nbsp; -> space)
            plainText = System.Net.WebUtility.HtmlDecode(plainText);

            // Normalize and trim excess whitespace
            plainText = System.Text.RegularExpressions.Regex.Replace(plainText, @"\s+", " ").Trim();

            return plainText;
        }

        return email.BodyContent;
    }


}
