// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace AITGraph.Sdk.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class SignIn : global::AITGraph.Sdk.Models.Entity, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>The application name displayed in the Azure Portal. Supports $filter (eq and startsWith operators only).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? AppDisplayName { get; set; }
#nullable restore
#else
        public string AppDisplayName { get; set; }
#endif
        /// <summary>The application identifier in Azure Active Directory. Supports $filter (eq operator only).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? AppId { get; set; }
#nullable restore
#else
        public string AppId { get; set; }
#endif
        /// <summary>A list of conditional access policies that are triggered by the corresponding sign-in activity.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::AITGraph.Sdk.Models.AppliedConditionalAccessPolicy>? AppliedConditionalAccessPolicies { get; set; }
#nullable restore
#else
        public List<global::AITGraph.Sdk.Models.AppliedConditionalAccessPolicy> AppliedConditionalAccessPolicies { get; set; }
#endif
        /// <summary>Detailed information about the listeners, such as Azure Logic Apps and Azure Functions, that were triggered by the corresponding events in the sign-in event.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::AITGraph.Sdk.Models.AppliedAuthenticationEventListener>? AppliedEventListeners { get; set; }
#nullable restore
#else
        public List<global::AITGraph.Sdk.Models.AppliedAuthenticationEventListener> AppliedEventListeners { get; set; }
#endif
        /// <summary>Provides details about the app and device used during an Azure AD authentication step.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::AITGraph.Sdk.Models.AuthenticationAppDeviceDetails? AuthenticationAppDeviceDetails { get; set; }
#nullable restore
#else
        public global::AITGraph.Sdk.Models.AuthenticationAppDeviceDetails AuthenticationAppDeviceDetails { get; set; }
#endif
        /// <summary>Provides details of the Azure AD policies applied to a user and client authentication app during an authentication step.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::AITGraph.Sdk.Models.AuthenticationAppPolicyDetails>? AuthenticationAppPolicyEvaluationDetails { get; set; }
#nullable restore
#else
        public List<global::AITGraph.Sdk.Models.AuthenticationAppPolicyDetails> AuthenticationAppPolicyEvaluationDetails { get; set; }
#endif
        /// <summary>Contains a collection of values that represent the conditional access authentication contexts applied to the sign-in.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::AITGraph.Sdk.Models.AuthenticationContext>? AuthenticationContextClassReferences { get; set; }
#nullable restore
#else
        public List<global::AITGraph.Sdk.Models.AuthenticationContext> AuthenticationContextClassReferences { get; set; }
#endif
        /// <summary>The result of the authentication attempt and additional details on the authentication method.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::AITGraph.Sdk.Models.AuthenticationDetail>? AuthenticationDetails { get; set; }
#nullable restore
#else
        public List<global::AITGraph.Sdk.Models.AuthenticationDetail> AuthenticationDetails { get; set; }
#endif
        /// <summary>The authentication methods used. Possible values: SMS, Authenticator App, App Verification code, Password, FIDO, PTA, or PHS.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? AuthenticationMethodsUsed { get; set; }
#nullable restore
#else
        public List<string> AuthenticationMethodsUsed { get; set; }
#endif
        /// <summary>Additional authentication processing details, such as the agent name in case of PTA/PHS or Server/farm name in case of federated authentication.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::AITGraph.Sdk.Models.KeyValue>? AuthenticationProcessingDetails { get; set; }
#nullable restore
#else
        public List<global::AITGraph.Sdk.Models.KeyValue> AuthenticationProcessingDetails { get; set; }
#endif
        /// <summary>Lists the protocol type or grant type used in the authentication. The possible values are: none, oAuth2, ropc, wsFederation, saml20, deviceCode, unknownFutureValue. For authentications that use protocols other than the possible values listed, the protocol type is listed as none.</summary>
        public global::AITGraph.Sdk.Models.ProtocolType? AuthenticationProtocol { get; set; }
        /// <summary>This holds the highest level of authentication needed through all the sign-in steps, for sign-in to succeed. Supports $filter (eq and startsWith operators only).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? AuthenticationRequirement { get; set; }
#nullable restore
#else
        public string AuthenticationRequirement { get; set; }
#endif
        /// <summary>Sources of authentication requirement, such as conditional access, per-user MFA, identity protection, and security defaults.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::AITGraph.Sdk.Models.AuthenticationRequirementPolicy>? AuthenticationRequirementPolicies { get; set; }
#nullable restore
#else
        public List<global::AITGraph.Sdk.Models.AuthenticationRequirementPolicy> AuthenticationRequirementPolicies { get; set; }
#endif
        /// <summary>The Autonomous System Number (ASN) of the network used by the actor.</summary>
        public int? AutonomousSystemNumber { get; set; }
        /// <summary>Contains a fully qualified Azure Resource Manager ID of an Azure resource accessed during the sign-in.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? AzureResourceId { get; set; }
#nullable restore
#else
        public string AzureResourceId { get; set; }
#endif
        /// <summary>The legacy client used for sign-in activity. For example: Browser, Exchange ActiveSync, Modern clients, IMAP, MAPI, SMTP, or POP. Supports $filter (eq operator only).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ClientAppUsed { get; set; }
#nullable restore
#else
        public string ClientAppUsed { get; set; }
#endif
        /// <summary>Describes the credential type that a user client or service principal provided to Azure AD to authenticate itself. You may wish to review clientCredentialType to track and eliminate less secure credential types or to watch for clients and service principals using anomalous credential types. The possible values are: none, clientSecret, clientAssertion, federatedIdentityCredential, managedIdentity, certificate, unknownFutureValue.</summary>
        public global::AITGraph.Sdk.Models.ClientCredentialType? ClientCredentialType { get; set; }
        /// <summary>The status of the conditional access policy triggered. Possible values: success, failure, notApplied, or unknownFutureValue. Supports $filter (eq operator only).</summary>
        public global::AITGraph.Sdk.Models.ConditionalAccessStatus? ConditionalAccessStatus { get; set; }
        /// <summary>The identifier that&apos;s sent from the client when sign-in is initiated. This is used for troubleshooting the corresponding sign-in activity when calling for support. Supports $filter (eq operator only).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CorrelationId { get; set; }
#nullable restore
#else
        public string CorrelationId { get; set; }
#endif
        /// <summary>The date and time the sign-in was initiated. The Timestamp type is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z. Supports $orderby and $filter (eq, le, and ge operators only).</summary>
        public DateTimeOffset? CreatedDateTime { get; set; }
        /// <summary>Describes the type of cross-tenant access used by the actor to access the resource. Possible values are: none, b2bCollaboration, b2bDirectConnect, microsoftSupport, serviceProvider, unknownFutureValue. If the sign in did not cross tenant boundaries, the value is none.</summary>
        public global::AITGraph.Sdk.Models.SignInAccessType? CrossTenantAccessType { get; set; }
        /// <summary>The device information from where the sign-in occurred. Includes information such as deviceId, OS, and browser. Supports $filter (eq and startsWith operators only) on browser and operatingSystem properties.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::AITGraph.Sdk.Models.DeviceDetail? DeviceDetail { get; set; }
#nullable restore
#else
        public global::AITGraph.Sdk.Models.DeviceDetail DeviceDetail { get; set; }
#endif
        /// <summary>Contains the identifier of an application&apos;s federated identity credential, if a federated identity credential was used to sign in.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? FederatedCredentialId { get; set; }
#nullable restore
#else
        public string FederatedCredentialId { get; set; }
#endif
        /// <summary>During a failed sign in, a user may click a button in the Azure portal to mark the failed event for tenant admins. If a user clicked the button to flag the failed sign in, this value is true.</summary>
        public bool? FlaggedForReview { get; set; }
        /// <summary>The tenant identifier of the user initiating the sign in. Not applicable in Managed Identity or service principal sign ins.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? HomeTenantId { get; set; }
#nullable restore
#else
        public string HomeTenantId { get; set; }
#endif
        /// <summary>For user sign ins, the identifier of the tenant that the user is a member of. Only populated in cases where the home tenant has provided affirmative consent to Azure AD to show the tenant content.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? HomeTenantName { get; set; }
#nullable restore
#else
        public string HomeTenantName { get; set; }
#endif
        /// <summary>Indicates the token types that were presented to Azure AD to authenticate the actor in the sign in. The possible values are: none, primaryRefreshToken, saml11, saml20, unknownFutureValue, remoteDesktopToken.  NOTE Azure AD may have also used token types not listed in this Enum type to authenticate the actor. Do not infer the lack of a token if it is not one of the types listed. Also, please note that you must use the Prefer: include-unknown-enum-members request header to get the following value(s) in this evolvable enum: remoteDesktopToken.</summary>
        public global::AITGraph.Sdk.Models.IncomingTokenType? IncomingTokenType { get; set; }
        /// <summary>The IP address of the client from where the sign-in occurred. Supports $filter (eq and startsWith operators only).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? IpAddress { get; set; }
#nullable restore
#else
        public string IpAddress { get; set; }
#endif
        /// <summary>The IP address a user used to reach a resource provider, used to determine Conditional Access compliance for some policies. For example, when a user interacts with Exchange Online, the IP address Exchange receives from the user may be recorded here. This value is often null.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? IpAddressFromResourceProvider { get; set; }
#nullable restore
#else
        public string IpAddressFromResourceProvider { get; set; }
#endif
        /// <summary>Indicates whether a user sign in is interactive. In interactive sign in, the user provides an authentication factor to Azure AD. These factors include passwords, responses to MFA challenges, biometric factors, or QR codes that a user provides to Azure AD or an associated app. In non-interactive sign in, the user doesn&apos;t provide an authentication factor. Instead, the client app uses a token or code to authenticate or access a resource on behalf of a user. Non-interactive sign ins are commonly used for a client to sign in on a user&apos;s behalf in a process transparent to the user.</summary>
        public bool? IsInteractive { get; set; }
        /// <summary>Shows whether the sign in event was subject to an Azure AD tenant restriction policy.</summary>
        public bool? IsTenantRestricted { get; set; }
        /// <summary>The city, state, and 2 letter country code from where the sign-in occurred. Supports $filter (eq and startsWith operators only) on city, state, and countryOrRegion properties.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::AITGraph.Sdk.Models.SignInLocation? Location { get; set; }
#nullable restore
#else
        public global::AITGraph.Sdk.Models.SignInLocation Location { get; set; }
#endif
        /// <summary>The mfaDetail property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::AITGraph.Sdk.Models.MfaDetail? MfaDetail { get; set; }
#nullable restore
#else
        public global::AITGraph.Sdk.Models.MfaDetail MfaDetail { get; set; }
#endif
        /// <summary>The network location details including the type of network used and its names.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::AITGraph.Sdk.Models.NetworkLocationDetail>? NetworkLocationDetails { get; set; }
#nullable restore
#else
        public List<global::AITGraph.Sdk.Models.NetworkLocationDetail> NetworkLocationDetails { get; set; }
#endif
        /// <summary>The request identifier of the first request in the authentication sequence. Supports $filter (eq operator only).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? OriginalRequestId { get; set; }
#nullable restore
#else
        public string OriginalRequestId { get; set; }
#endif
        /// <summary>Contains information about the Azure AD Private Link policy that is associated with the sign in event.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::AITGraph.Sdk.Models.PrivateLinkDetails? PrivateLinkDetails { get; set; }
#nullable restore
#else
        public global::AITGraph.Sdk.Models.PrivateLinkDetails PrivateLinkDetails { get; set; }
#endif
        /// <summary>The request processing time in milliseconds in AD STS.</summary>
        public int? ProcessingTimeInMilliseconds { get; set; }
        /// <summary>The name of the resource that the user signed in to. Supports $filter (eq operator only).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ResourceDisplayName { get; set; }
#nullable restore
#else
        public string ResourceDisplayName { get; set; }
#endif
        /// <summary>The identifier of the resource that the user signed in to. Supports $filter (eq operator only).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ResourceId { get; set; }
#nullable restore
#else
        public string ResourceId { get; set; }
#endif
        /// <summary>The identifier of the service principal representing the target resource in the sign-in event.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ResourceServicePrincipalId { get; set; }
#nullable restore
#else
        public string ResourceServicePrincipalId { get; set; }
#endif
        /// <summary>The tenant identifier of the resource referenced in the sign in.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ResourceTenantId { get; set; }
#nullable restore
#else
        public string ResourceTenantId { get; set; }
#endif
        /// <summary>The reason behind a specific state of a risky user, sign-in, or a risk event. Possible values: none, adminGeneratedTemporaryPassword, userPerformedSecuredPasswordChange, userPerformedSecuredPasswordReset, adminConfirmedSigninSafe, aiConfirmedSigninSafe, userPassedMFADrivenByRiskBasedPolicy, adminDismissedAllRiskForUser, adminConfirmedSigninCompromised, or unknownFutureValue. The value none means that no action has been performed on the user or sign-in so far. Supports $filter (eq operator only). Note: Details for this property are only available for Azure AD Premium P2 customers. All other customers are returned hidden.</summary>
        public global::AITGraph.Sdk.Models.RiskDetail? RiskDetail { get; set; }
        /// <summary>The list of risk event types associated with the sign-in. Possible values: unlikelyTravel, anonymizedIPAddress, maliciousIPAddress, unfamiliarFeatures, malwareInfectedIPAddress, suspiciousIPAddress, leakedCredentials, investigationsThreatIntelligence,  generic, or unknownFutureValue. Supports $filter (eq and startsWith operators only).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? RiskEventTypesV2 { get; set; }
#nullable restore
#else
        public List<string> RiskEventTypesV2 { get; set; }
#endif
        /// <summary>The aggregated risk level. Possible values: none, low, medium, high, hidden, or unknownFutureValue. The value hidden means the user or sign-in was not enabled for Azure AD Identity Protection. Supports $filter (eq operator only). Note: Details for this property are only available for Azure AD Premium P2 customers. All other customers are returned hidden.</summary>
        public global::AITGraph.Sdk.Models.RiskLevel? RiskLevelAggregated { get; set; }
        /// <summary>The risk level during sign-in. Possible values: none, low, medium, high, hidden, or unknownFutureValue. The value hidden means the user or sign-in was not enabled for Azure AD Identity Protection. Supports $filter (eq operator only). Note: Details for this property are only available for Azure AD Premium P2 customers. All other customers are returned hidden.</summary>
        public global::AITGraph.Sdk.Models.RiskLevel? RiskLevelDuringSignIn { get; set; }
        /// <summary>The risk state of a risky user, sign-in, or a risk event. Possible values: none, confirmedSafe, remediated, dismissed, atRisk, confirmedCompromised, or unknownFutureValue. Supports $filter (eq operator only).</summary>
        public global::AITGraph.Sdk.Models.RiskState? RiskState { get; set; }
        /// <summary>The unique identifier of the key credential used by the service principal to authenticate.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ServicePrincipalCredentialKeyId { get; set; }
#nullable restore
#else
        public string ServicePrincipalCredentialKeyId { get; set; }
#endif
        /// <summary>The certificate thumbprint of the certificate used by the service principal to authenticate.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ServicePrincipalCredentialThumbprint { get; set; }
#nullable restore
#else
        public string ServicePrincipalCredentialThumbprint { get; set; }
#endif
        /// <summary>The application identifier used for sign-in. This field is populated when you are signing in using an application. Supports $filter (eq and startsWith operators only).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ServicePrincipalId { get; set; }
#nullable restore
#else
        public string ServicePrincipalId { get; set; }
#endif
        /// <summary>The application name used for sign-in. This field is populated when you are signing in using an application. Supports $filter (eq and startsWith operators only).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ServicePrincipalName { get; set; }
#nullable restore
#else
        public string ServicePrincipalName { get; set; }
#endif
        /// <summary>Any conditional access session management policies that were applied during the sign-in event.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::AITGraph.Sdk.Models.SessionLifetimePolicy>? SessionLifetimePolicies { get; set; }
#nullable restore
#else
        public List<global::AITGraph.Sdk.Models.SessionLifetimePolicy> SessionLifetimePolicies { get; set; }
#endif
        /// <summary>Indicates the category of sign in that the event represents. For user sign ins, the category can be interactiveUser or nonInteractiveUser and corresponds to the value for the isInteractive property on the signin resource. For managed identity sign ins, the category is managedIdentity. For service principal sign ins, the category is servicePrincipal. Possible values are: interactiveUser, nonInteractiveUser, servicePrincipal, managedIdentity, unknownFutureValue. Supports $filter (eq, ne).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? SignInEventTypes { get; set; }
#nullable restore
#else
        public List<string> SignInEventTypes { get; set; }
#endif
        /// <summary>The identification that the user provided to sign in. It may be the userPrincipalName but it&apos;s also populated when a user signs in using other identifiers.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? SignInIdentifier { get; set; }
#nullable restore
#else
        public string SignInIdentifier { get; set; }
#endif
        /// <summary>The type of sign in identifier. Possible values are: userPrincipalName, phoneNumber, proxyAddress, qrCode, onPremisesUserPrincipalName, unknownFutureValue.</summary>
        public global::AITGraph.Sdk.Models.SignInIdentifierType? SignInIdentifierType { get; set; }
        /// <summary>The sign-in status. Includes the error code and description of the error (in case of a sign-in failure). Supports $filter (eq operator only) on errorCode property.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::AITGraph.Sdk.Models.SignInStatus? Status { get; set; }
#nullable restore
#else
        public global::AITGraph.Sdk.Models.SignInStatus Status { get; set; }
#endif
        /// <summary>The name of the identity provider. For example, sts.microsoft.com. Supports $filter (eq operator only).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? TokenIssuerName { get; set; }
#nullable restore
#else
        public string TokenIssuerName { get; set; }
#endif
        /// <summary>The type of identity provider. The possible values are: AzureAD, ADFederationServices, UnknownFutureValue, AzureADBackupAuth, ADFederationServicesMFAAdapter, NPSExtension. Note that you must use the Prefer: include-unknown-enum-members request header to get the following values in this evolvable enum: AzureADBackupAuth , ADFederationServicesMFAAdapter , NPSExtension.</summary>
        public global::AITGraph.Sdk.Models.TokenIssuerType? TokenIssuerType { get; set; }
        /// <summary>A unique base64 encoded request identifier used to track tokens issued by Azure AD as they are redeemed at resource providers.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? UniqueTokenIdentifier { get; set; }
#nullable restore
#else
        public string UniqueTokenIdentifier { get; set; }
#endif
        /// <summary>The user agent information related to sign-in. Supports $filter (eq and startsWith operators only).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? UserAgent { get; set; }
#nullable restore
#else
        public string UserAgent { get; set; }
#endif
        /// <summary>The display name of the user. Supports $filter (eq and startsWith operators only).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? UserDisplayName { get; set; }
#nullable restore
#else
        public string UserDisplayName { get; set; }
#endif
        /// <summary>The identifier of the user. Supports $filter (eq operator only).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? UserId { get; set; }
#nullable restore
#else
        public string UserId { get; set; }
#endif
        /// <summary>The UPN of the user. Supports $filter (eq and startsWith operators only).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? UserPrincipalName { get; set; }
#nullable restore
#else
        public string UserPrincipalName { get; set; }
#endif
        /// <summary>Identifies whether the user is a member or guest in the tenant. Possible values are: member, guest, unknownFutureValue.</summary>
        public global::AITGraph.Sdk.Models.SignInUserType? UserType { get; set; }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::AITGraph.Sdk.Models.SignIn"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static new global::AITGraph.Sdk.Models.SignIn CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::AITGraph.Sdk.Models.SignIn();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public override IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>(base.GetFieldDeserializers())
            {
                { "appDisplayName", n => { AppDisplayName = n.GetStringValue(); } },
                { "appId", n => { AppId = n.GetStringValue(); } },
                { "appliedConditionalAccessPolicies", n => { AppliedConditionalAccessPolicies = n.GetCollectionOfObjectValues<global::AITGraph.Sdk.Models.AppliedConditionalAccessPolicy>(global::AITGraph.Sdk.Models.AppliedConditionalAccessPolicy.CreateFromDiscriminatorValue)?.AsList(); } },
                { "appliedEventListeners", n => { AppliedEventListeners = n.GetCollectionOfObjectValues<global::AITGraph.Sdk.Models.AppliedAuthenticationEventListener>(global::AITGraph.Sdk.Models.AppliedAuthenticationEventListener.CreateFromDiscriminatorValue)?.AsList(); } },
                { "authenticationAppDeviceDetails", n => { AuthenticationAppDeviceDetails = n.GetObjectValue<global::AITGraph.Sdk.Models.AuthenticationAppDeviceDetails>(global::AITGraph.Sdk.Models.AuthenticationAppDeviceDetails.CreateFromDiscriminatorValue); } },
                { "authenticationAppPolicyEvaluationDetails", n => { AuthenticationAppPolicyEvaluationDetails = n.GetCollectionOfObjectValues<global::AITGraph.Sdk.Models.AuthenticationAppPolicyDetails>(global::AITGraph.Sdk.Models.AuthenticationAppPolicyDetails.CreateFromDiscriminatorValue)?.AsList(); } },
                { "authenticationContextClassReferences", n => { AuthenticationContextClassReferences = n.GetCollectionOfObjectValues<global::AITGraph.Sdk.Models.AuthenticationContext>(global::AITGraph.Sdk.Models.AuthenticationContext.CreateFromDiscriminatorValue)?.AsList(); } },
                { "authenticationDetails", n => { AuthenticationDetails = n.GetCollectionOfObjectValues<global::AITGraph.Sdk.Models.AuthenticationDetail>(global::AITGraph.Sdk.Models.AuthenticationDetail.CreateFromDiscriminatorValue)?.AsList(); } },
                { "authenticationMethodsUsed", n => { AuthenticationMethodsUsed = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "authenticationProcessingDetails", n => { AuthenticationProcessingDetails = n.GetCollectionOfObjectValues<global::AITGraph.Sdk.Models.KeyValue>(global::AITGraph.Sdk.Models.KeyValue.CreateFromDiscriminatorValue)?.AsList(); } },
                { "authenticationProtocol", n => { AuthenticationProtocol = n.GetEnumValue<global::AITGraph.Sdk.Models.ProtocolType>(); } },
                { "authenticationRequirement", n => { AuthenticationRequirement = n.GetStringValue(); } },
                { "authenticationRequirementPolicies", n => { AuthenticationRequirementPolicies = n.GetCollectionOfObjectValues<global::AITGraph.Sdk.Models.AuthenticationRequirementPolicy>(global::AITGraph.Sdk.Models.AuthenticationRequirementPolicy.CreateFromDiscriminatorValue)?.AsList(); } },
                { "autonomousSystemNumber", n => { AutonomousSystemNumber = n.GetIntValue(); } },
                { "azureResourceId", n => { AzureResourceId = n.GetStringValue(); } },
                { "clientAppUsed", n => { ClientAppUsed = n.GetStringValue(); } },
                { "clientCredentialType", n => { ClientCredentialType = n.GetEnumValue<global::AITGraph.Sdk.Models.ClientCredentialType>(); } },
                { "conditionalAccessStatus", n => { ConditionalAccessStatus = n.GetEnumValue<global::AITGraph.Sdk.Models.ConditionalAccessStatus>(); } },
                { "correlationId", n => { CorrelationId = n.GetStringValue(); } },
                { "createdDateTime", n => { CreatedDateTime = n.GetDateTimeOffsetValue(); } },
                { "crossTenantAccessType", n => { CrossTenantAccessType = n.GetEnumValue<global::AITGraph.Sdk.Models.SignInAccessType>(); } },
                { "deviceDetail", n => { DeviceDetail = n.GetObjectValue<global::AITGraph.Sdk.Models.DeviceDetail>(global::AITGraph.Sdk.Models.DeviceDetail.CreateFromDiscriminatorValue); } },
                { "federatedCredentialId", n => { FederatedCredentialId = n.GetStringValue(); } },
                { "flaggedForReview", n => { FlaggedForReview = n.GetBoolValue(); } },
                { "homeTenantId", n => { HomeTenantId = n.GetStringValue(); } },
                { "homeTenantName", n => { HomeTenantName = n.GetStringValue(); } },
                { "incomingTokenType", n => { IncomingTokenType = n.GetEnumValue<global::AITGraph.Sdk.Models.IncomingTokenType>(); } },
                { "ipAddress", n => { IpAddress = n.GetStringValue(); } },
                { "ipAddressFromResourceProvider", n => { IpAddressFromResourceProvider = n.GetStringValue(); } },
                { "isInteractive", n => { IsInteractive = n.GetBoolValue(); } },
                { "isTenantRestricted", n => { IsTenantRestricted = n.GetBoolValue(); } },
                { "location", n => { Location = n.GetObjectValue<global::AITGraph.Sdk.Models.SignInLocation>(global::AITGraph.Sdk.Models.SignInLocation.CreateFromDiscriminatorValue); } },
                { "mfaDetail", n => { MfaDetail = n.GetObjectValue<global::AITGraph.Sdk.Models.MfaDetail>(global::AITGraph.Sdk.Models.MfaDetail.CreateFromDiscriminatorValue); } },
                { "networkLocationDetails", n => { NetworkLocationDetails = n.GetCollectionOfObjectValues<global::AITGraph.Sdk.Models.NetworkLocationDetail>(global::AITGraph.Sdk.Models.NetworkLocationDetail.CreateFromDiscriminatorValue)?.AsList(); } },
                { "originalRequestId", n => { OriginalRequestId = n.GetStringValue(); } },
                { "privateLinkDetails", n => { PrivateLinkDetails = n.GetObjectValue<global::AITGraph.Sdk.Models.PrivateLinkDetails>(global::AITGraph.Sdk.Models.PrivateLinkDetails.CreateFromDiscriminatorValue); } },
                { "processingTimeInMilliseconds", n => { ProcessingTimeInMilliseconds = n.GetIntValue(); } },
                { "resourceDisplayName", n => { ResourceDisplayName = n.GetStringValue(); } },
                { "resourceId", n => { ResourceId = n.GetStringValue(); } },
                { "resourceServicePrincipalId", n => { ResourceServicePrincipalId = n.GetStringValue(); } },
                { "resourceTenantId", n => { ResourceTenantId = n.GetStringValue(); } },
                { "riskDetail", n => { RiskDetail = n.GetEnumValue<global::AITGraph.Sdk.Models.RiskDetail>(); } },
                { "riskEventTypes_v2", n => { RiskEventTypesV2 = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "riskLevelAggregated", n => { RiskLevelAggregated = n.GetEnumValue<global::AITGraph.Sdk.Models.RiskLevel>(); } },
                { "riskLevelDuringSignIn", n => { RiskLevelDuringSignIn = n.GetEnumValue<global::AITGraph.Sdk.Models.RiskLevel>(); } },
                { "riskState", n => { RiskState = n.GetEnumValue<global::AITGraph.Sdk.Models.RiskState>(); } },
                { "servicePrincipalCredentialKeyId", n => { ServicePrincipalCredentialKeyId = n.GetStringValue(); } },
                { "servicePrincipalCredentialThumbprint", n => { ServicePrincipalCredentialThumbprint = n.GetStringValue(); } },
                { "servicePrincipalId", n => { ServicePrincipalId = n.GetStringValue(); } },
                { "servicePrincipalName", n => { ServicePrincipalName = n.GetStringValue(); } },
                { "sessionLifetimePolicies", n => { SessionLifetimePolicies = n.GetCollectionOfObjectValues<global::AITGraph.Sdk.Models.SessionLifetimePolicy>(global::AITGraph.Sdk.Models.SessionLifetimePolicy.CreateFromDiscriminatorValue)?.AsList(); } },
                { "signInEventTypes", n => { SignInEventTypes = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "signInIdentifier", n => { SignInIdentifier = n.GetStringValue(); } },
                { "signInIdentifierType", n => { SignInIdentifierType = n.GetEnumValue<global::AITGraph.Sdk.Models.SignInIdentifierType>(); } },
                { "status", n => { Status = n.GetObjectValue<global::AITGraph.Sdk.Models.SignInStatus>(global::AITGraph.Sdk.Models.SignInStatus.CreateFromDiscriminatorValue); } },
                { "tokenIssuerName", n => { TokenIssuerName = n.GetStringValue(); } },
                { "tokenIssuerType", n => { TokenIssuerType = n.GetEnumValue<global::AITGraph.Sdk.Models.TokenIssuerType>(); } },
                { "uniqueTokenIdentifier", n => { UniqueTokenIdentifier = n.GetStringValue(); } },
                { "userAgent", n => { UserAgent = n.GetStringValue(); } },
                { "userDisplayName", n => { UserDisplayName = n.GetStringValue(); } },
                { "userId", n => { UserId = n.GetStringValue(); } },
                { "userPrincipalName", n => { UserPrincipalName = n.GetStringValue(); } },
                { "userType", n => { UserType = n.GetEnumValue<global::AITGraph.Sdk.Models.SignInUserType>(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public override void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            base.Serialize(writer);
            writer.WriteStringValue("appDisplayName", AppDisplayName);
            writer.WriteStringValue("appId", AppId);
            writer.WriteCollectionOfObjectValues<global::AITGraph.Sdk.Models.AppliedConditionalAccessPolicy>("appliedConditionalAccessPolicies", AppliedConditionalAccessPolicies);
            writer.WriteCollectionOfObjectValues<global::AITGraph.Sdk.Models.AppliedAuthenticationEventListener>("appliedEventListeners", AppliedEventListeners);
            writer.WriteObjectValue<global::AITGraph.Sdk.Models.AuthenticationAppDeviceDetails>("authenticationAppDeviceDetails", AuthenticationAppDeviceDetails);
            writer.WriteCollectionOfObjectValues<global::AITGraph.Sdk.Models.AuthenticationAppPolicyDetails>("authenticationAppPolicyEvaluationDetails", AuthenticationAppPolicyEvaluationDetails);
            writer.WriteCollectionOfObjectValues<global::AITGraph.Sdk.Models.AuthenticationContext>("authenticationContextClassReferences", AuthenticationContextClassReferences);
            writer.WriteCollectionOfObjectValues<global::AITGraph.Sdk.Models.AuthenticationDetail>("authenticationDetails", AuthenticationDetails);
            writer.WriteCollectionOfPrimitiveValues<string>("authenticationMethodsUsed", AuthenticationMethodsUsed);
            writer.WriteCollectionOfObjectValues<global::AITGraph.Sdk.Models.KeyValue>("authenticationProcessingDetails", AuthenticationProcessingDetails);
            writer.WriteEnumValue<global::AITGraph.Sdk.Models.ProtocolType>("authenticationProtocol", AuthenticationProtocol);
            writer.WriteStringValue("authenticationRequirement", AuthenticationRequirement);
            writer.WriteCollectionOfObjectValues<global::AITGraph.Sdk.Models.AuthenticationRequirementPolicy>("authenticationRequirementPolicies", AuthenticationRequirementPolicies);
            writer.WriteIntValue("autonomousSystemNumber", AutonomousSystemNumber);
            writer.WriteStringValue("azureResourceId", AzureResourceId);
            writer.WriteStringValue("clientAppUsed", ClientAppUsed);
            writer.WriteEnumValue<global::AITGraph.Sdk.Models.ClientCredentialType>("clientCredentialType", ClientCredentialType);
            writer.WriteEnumValue<global::AITGraph.Sdk.Models.ConditionalAccessStatus>("conditionalAccessStatus", ConditionalAccessStatus);
            writer.WriteStringValue("correlationId", CorrelationId);
            writer.WriteDateTimeOffsetValue("createdDateTime", CreatedDateTime);
            writer.WriteEnumValue<global::AITGraph.Sdk.Models.SignInAccessType>("crossTenantAccessType", CrossTenantAccessType);
            writer.WriteObjectValue<global::AITGraph.Sdk.Models.DeviceDetail>("deviceDetail", DeviceDetail);
            writer.WriteStringValue("federatedCredentialId", FederatedCredentialId);
            writer.WriteBoolValue("flaggedForReview", FlaggedForReview);
            writer.WriteStringValue("homeTenantId", HomeTenantId);
            writer.WriteStringValue("homeTenantName", HomeTenantName);
            writer.WriteEnumValue<global::AITGraph.Sdk.Models.IncomingTokenType>("incomingTokenType", IncomingTokenType);
            writer.WriteStringValue("ipAddress", IpAddress);
            writer.WriteStringValue("ipAddressFromResourceProvider", IpAddressFromResourceProvider);
            writer.WriteBoolValue("isInteractive", IsInteractive);
            writer.WriteBoolValue("isTenantRestricted", IsTenantRestricted);
            writer.WriteObjectValue<global::AITGraph.Sdk.Models.SignInLocation>("location", Location);
            writer.WriteObjectValue<global::AITGraph.Sdk.Models.MfaDetail>("mfaDetail", MfaDetail);
            writer.WriteCollectionOfObjectValues<global::AITGraph.Sdk.Models.NetworkLocationDetail>("networkLocationDetails", NetworkLocationDetails);
            writer.WriteStringValue("originalRequestId", OriginalRequestId);
            writer.WriteObjectValue<global::AITGraph.Sdk.Models.PrivateLinkDetails>("privateLinkDetails", PrivateLinkDetails);
            writer.WriteIntValue("processingTimeInMilliseconds", ProcessingTimeInMilliseconds);
            writer.WriteStringValue("resourceDisplayName", ResourceDisplayName);
            writer.WriteStringValue("resourceId", ResourceId);
            writer.WriteStringValue("resourceServicePrincipalId", ResourceServicePrincipalId);
            writer.WriteStringValue("resourceTenantId", ResourceTenantId);
            writer.WriteEnumValue<global::AITGraph.Sdk.Models.RiskDetail>("riskDetail", RiskDetail);
            writer.WriteCollectionOfPrimitiveValues<string>("riskEventTypes_v2", RiskEventTypesV2);
            writer.WriteEnumValue<global::AITGraph.Sdk.Models.RiskLevel>("riskLevelAggregated", RiskLevelAggregated);
            writer.WriteEnumValue<global::AITGraph.Sdk.Models.RiskLevel>("riskLevelDuringSignIn", RiskLevelDuringSignIn);
            writer.WriteEnumValue<global::AITGraph.Sdk.Models.RiskState>("riskState", RiskState);
            writer.WriteStringValue("servicePrincipalCredentialKeyId", ServicePrincipalCredentialKeyId);
            writer.WriteStringValue("servicePrincipalCredentialThumbprint", ServicePrincipalCredentialThumbprint);
            writer.WriteStringValue("servicePrincipalId", ServicePrincipalId);
            writer.WriteStringValue("servicePrincipalName", ServicePrincipalName);
            writer.WriteCollectionOfObjectValues<global::AITGraph.Sdk.Models.SessionLifetimePolicy>("sessionLifetimePolicies", SessionLifetimePolicies);
            writer.WriteCollectionOfPrimitiveValues<string>("signInEventTypes", SignInEventTypes);
            writer.WriteStringValue("signInIdentifier", SignInIdentifier);
            writer.WriteEnumValue<global::AITGraph.Sdk.Models.SignInIdentifierType>("signInIdentifierType", SignInIdentifierType);
            writer.WriteObjectValue<global::AITGraph.Sdk.Models.SignInStatus>("status", Status);
            writer.WriteStringValue("tokenIssuerName", TokenIssuerName);
            writer.WriteEnumValue<global::AITGraph.Sdk.Models.TokenIssuerType>("tokenIssuerType", TokenIssuerType);
            writer.WriteStringValue("uniqueTokenIdentifier", UniqueTokenIdentifier);
            writer.WriteStringValue("userAgent", UserAgent);
            writer.WriteStringValue("userDisplayName", UserDisplayName);
            writer.WriteStringValue("userId", UserId);
            writer.WriteStringValue("userPrincipalName", UserPrincipalName);
            writer.WriteEnumValue<global::AITGraph.Sdk.Models.SignInUserType>("userType", UserType);
        }
    }
}
#pragma warning restore CS0618
