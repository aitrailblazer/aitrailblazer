// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace AITGraph.Sdk.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class DelegatedAdminRelationship : global::AITGraph.Sdk.Models.Entity, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>The access assignments associated with the delegated admin relationship.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::AITGraph.Sdk.Models.DelegatedAdminAccessAssignment>? AccessAssignments { get; set; }
#nullable restore
#else
        public List<global::AITGraph.Sdk.Models.DelegatedAdminAccessAssignment> AccessAssignments { get; set; }
#endif
        /// <summary>The accessDetails property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::AITGraph.Sdk.Models.DelegatedAdminAccessDetails? AccessDetails { get; set; }
#nullable restore
#else
        public global::AITGraph.Sdk.Models.DelegatedAdminAccessDetails AccessDetails { get; set; }
#endif
        /// <summary>The date and time in ISO 8601 format and in UTC time when the relationship became active. Read-only.</summary>
        public DateTimeOffset? ActivatedDateTime { get; set; }
        /// <summary>The date and time in ISO 8601 format and in UTC time when the relationship was created. Read-only.</summary>
        public DateTimeOffset? CreatedDateTime { get; set; }
        /// <summary>The display name and unique identifier of the customer of the relationship. This is configured either by the partner at the time the relationship is created or by the system after the customer approves the relationship. Cannot be changed by the customer.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::AITGraph.Sdk.Models.DelegatedAdminRelationshipCustomerParticipant? Customer { get; set; }
#nullable restore
#else
        public global::AITGraph.Sdk.Models.DelegatedAdminRelationshipCustomerParticipant Customer { get; set; }
#endif
        /// <summary>The display name of the relationship used for ease of identification. Must be unique across all delegated admin relationships of the partner. This is set by the partner only when the relationship is in the created status and cannot be changed by the customer.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? DisplayName { get; set; }
#nullable restore
#else
        public string DisplayName { get; set; }
#endif
        /// <summary>The duration of the relationship in ISO 8601 format. Must be a value between P1D and P2Y inclusive. This is set by the partner only when the relationship is in the created status and cannot be changed by the customer.</summary>
        public TimeSpan? Duration { get; set; }
        /// <summary>The date and time in ISO 8601 format and in UTC time when the status of relationship changes to either terminated or expired. Calculated as endDateTime = activatedDateTime + duration. Read-only.</summary>
        public DateTimeOffset? EndDateTime { get; set; }
        /// <summary>The date and time in ISO 8601 format and in UTC time when the relationship was last modified. Read-only.</summary>
        public DateTimeOffset? LastModifiedDateTime { get; set; }
        /// <summary>The long running operations associated with the delegated admin relationship.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::AITGraph.Sdk.Models.DelegatedAdminRelationshipOperation>? Operations { get; set; }
#nullable restore
#else
        public List<global::AITGraph.Sdk.Models.DelegatedAdminRelationshipOperation> Operations { get; set; }
#endif
        /// <summary>The requests associated with the delegated admin relationship.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::AITGraph.Sdk.Models.DelegatedAdminRelationshipRequest>? Requests { get; set; }
#nullable restore
#else
        public List<global::AITGraph.Sdk.Models.DelegatedAdminRelationshipRequest> Requests { get; set; }
#endif
        /// <summary>The status of the relationship. Read Only. The possible values are: activating, active, approvalPending, approved, created, expired, expiring, terminated, terminating, terminationRequested, unknownFutureValue. Supports $orderBy.</summary>
        public global::AITGraph.Sdk.Models.DelegatedAdminRelationshipStatus? Status { get; set; }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::AITGraph.Sdk.Models.DelegatedAdminRelationship"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static new global::AITGraph.Sdk.Models.DelegatedAdminRelationship CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::AITGraph.Sdk.Models.DelegatedAdminRelationship();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public override IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>(base.GetFieldDeserializers())
            {
                { "accessAssignments", n => { AccessAssignments = n.GetCollectionOfObjectValues<global::AITGraph.Sdk.Models.DelegatedAdminAccessAssignment>(global::AITGraph.Sdk.Models.DelegatedAdminAccessAssignment.CreateFromDiscriminatorValue)?.AsList(); } },
                { "accessDetails", n => { AccessDetails = n.GetObjectValue<global::AITGraph.Sdk.Models.DelegatedAdminAccessDetails>(global::AITGraph.Sdk.Models.DelegatedAdminAccessDetails.CreateFromDiscriminatorValue); } },
                { "activatedDateTime", n => { ActivatedDateTime = n.GetDateTimeOffsetValue(); } },
                { "createdDateTime", n => { CreatedDateTime = n.GetDateTimeOffsetValue(); } },
                { "customer", n => { Customer = n.GetObjectValue<global::AITGraph.Sdk.Models.DelegatedAdminRelationshipCustomerParticipant>(global::AITGraph.Sdk.Models.DelegatedAdminRelationshipCustomerParticipant.CreateFromDiscriminatorValue); } },
                { "displayName", n => { DisplayName = n.GetStringValue(); } },
                { "duration", n => { Duration = n.GetTimeSpanValue(); } },
                { "endDateTime", n => { EndDateTime = n.GetDateTimeOffsetValue(); } },
                { "lastModifiedDateTime", n => { LastModifiedDateTime = n.GetDateTimeOffsetValue(); } },
                { "operations", n => { Operations = n.GetCollectionOfObjectValues<global::AITGraph.Sdk.Models.DelegatedAdminRelationshipOperation>(global::AITGraph.Sdk.Models.DelegatedAdminRelationshipOperation.CreateFromDiscriminatorValue)?.AsList(); } },
                { "requests", n => { Requests = n.GetCollectionOfObjectValues<global::AITGraph.Sdk.Models.DelegatedAdminRelationshipRequest>(global::AITGraph.Sdk.Models.DelegatedAdminRelationshipRequest.CreateFromDiscriminatorValue)?.AsList(); } },
                { "status", n => { Status = n.GetEnumValue<global::AITGraph.Sdk.Models.DelegatedAdminRelationshipStatus>(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public override void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            base.Serialize(writer);
            writer.WriteCollectionOfObjectValues<global::AITGraph.Sdk.Models.DelegatedAdminAccessAssignment>("accessAssignments", AccessAssignments);
            writer.WriteObjectValue<global::AITGraph.Sdk.Models.DelegatedAdminAccessDetails>("accessDetails", AccessDetails);
            writer.WriteDateTimeOffsetValue("activatedDateTime", ActivatedDateTime);
            writer.WriteDateTimeOffsetValue("createdDateTime", CreatedDateTime);
            writer.WriteObjectValue<global::AITGraph.Sdk.Models.DelegatedAdminRelationshipCustomerParticipant>("customer", Customer);
            writer.WriteStringValue("displayName", DisplayName);
            writer.WriteTimeSpanValue("duration", Duration);
            writer.WriteDateTimeOffsetValue("endDateTime", EndDateTime);
            writer.WriteDateTimeOffsetValue("lastModifiedDateTime", LastModifiedDateTime);
            writer.WriteCollectionOfObjectValues<global::AITGraph.Sdk.Models.DelegatedAdminRelationshipOperation>("operations", Operations);
            writer.WriteCollectionOfObjectValues<global::AITGraph.Sdk.Models.DelegatedAdminRelationshipRequest>("requests", Requests);
            writer.WriteEnumValue<global::AITGraph.Sdk.Models.DelegatedAdminRelationshipStatus>("status", Status);
        }
    }
}
#pragma warning restore CS0618
